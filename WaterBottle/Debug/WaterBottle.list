
WaterBottle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007750  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  080078f0  080078f0  000178f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cd4  08007cd4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007cd4  08007cd4  00017cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cdc  08007cdc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cdc  08007cdc  00017cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ce0  08007ce0  00017ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  200001d4  08007eb8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  08007eb8  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd34  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024c5  00000000  00000000  0002ff7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f58  00000000  00000000  00032440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bf3  00000000  00000000  00033398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017fcf  00000000  00000000  00033f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011a47  00000000  00000000  0004bf5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095275  00000000  00000000  0005d9a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005174  00000000  00000000  000f2c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000f7d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080078d8 	.word	0x080078d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080078d8 	.word	0x080078d8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <hx711_init>:
 */

#include <HX711.h>

//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	; 0x28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	4613      	mov	r3, r2
 8000f62:	80fb      	strh	r3, [r7, #6]
  // Setup the pin connections with the STM Board
  hx711->clk_gpio = clk_gpio;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	88fa      	ldrh	r2, [r7, #6]
 8000f6e:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000f7a:	815a      	strh	r2, [r3, #10]

  GPIO_InitTypeDef  gpio = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f94:	2302      	movs	r3, #2
 8000f96:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 8000f98:	88fb      	ldrh	r3, [r7, #6]
 8000f9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	68b8      	ldr	r0, [r7, #8]
 8000fa4:	f001 faa2 	bl	80024ec <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 8000fb4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000fb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	6838      	ldr	r0, [r7, #0]
 8000fc0:	f001 fa94 	bl	80024ec <HAL_GPIO_Init>

}
 8000fc4:	bf00      	nop
 8000fc6:	3728      	adds	r7, #40	; 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <set_scale>:

//#############################################################################################
void set_scale(hx711_t *hx711, float Ascale, float Bscale){
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fd8:	edc7 0a01 	vstr	s1, [r7, #4]
  // Set the scale. To calibrate the cell, run the program with a scale of 1, call the tare function and then the get_units function. 
  // Divide the obtained weight by the real weight. The result is the parameter to pass to scale
	hx711->Ascale = Ascale;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	611a      	str	r2, [r3, #16]
	hx711->Bscale = Bscale;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	61da      	str	r2, [r3, #28]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <set_gain>:

//#############################################################################################
void set_gain(hx711_t *hx711, uint8_t Again, uint8_t Bgain){
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	70fb      	strb	r3, [r7, #3]
 8001000:	4613      	mov	r3, r2
 8001002:	70bb      	strb	r3, [r7, #2]
  // Define A channel's gain
	switch (Again) {
 8001004:	78fb      	ldrb	r3, [r7, #3]
 8001006:	2b40      	cmp	r3, #64	; 0x40
 8001008:	d005      	beq.n	8001016 <set_gain+0x22>
 800100a:	2b80      	cmp	r3, #128	; 0x80
 800100c:	d107      	bne.n	800101e <set_gain+0x2a>
			case 128:		// channel A, gain factor 128
				hx711->Again = 1;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	751a      	strb	r2, [r3, #20]
				break;
 8001014:	e003      	b.n	800101e <set_gain+0x2a>
			case 64:		// channel A, gain factor 64
				hx711->Again = 3;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2203      	movs	r2, #3
 800101a:	751a      	strb	r2, [r3, #20]
				break;
 800101c:	bf00      	nop
		}
	hx711->Bgain = 2;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2202      	movs	r2, #2
 8001022:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <set_offset>:

//#############################################################################################
void set_offset(hx711_t *hx711, long offset, uint8_t channel){
 8001032:	b480      	push	{r7}
 8001034:	b085      	sub	sp, #20
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	4613      	mov	r3, r2
 800103e:	71fb      	strb	r3, [r7, #7]
	if(channel == CHANNEL_A) hx711->Aoffset = offset;
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d103      	bne.n	800104e <set_offset+0x1c>
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	68ba      	ldr	r2, [r7, #8]
 800104a:	60da      	str	r2, [r3, #12]
	else hx711->Boffset = offset;
}
 800104c:	e002      	b.n	8001054 <set_offset+0x22>
	else hx711->Boffset = offset;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	619a      	str	r2, [r3, #24]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <shiftIn>:

//############################################################################################
uint8_t shiftIn(hx711_t *hx711, uint8_t bitOrder) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	70fb      	strb	r3, [r7, #3]
    uint8_t value = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	73fb      	strb	r3, [r7, #15]
    uint8_t i;

    for(i = 0; i < 8; ++i) {
 8001070:	2300      	movs	r3, #0
 8001072:	73bb      	strb	r3, [r7, #14]
 8001074:	e03e      	b.n	80010f4 <shiftIn+0x94>
    	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6818      	ldr	r0, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	891b      	ldrh	r3, [r3, #8]
 800107e:	2201      	movs	r2, #1
 8001080:	4619      	mov	r1, r3
 8001082:	f001 fbcf 	bl	8002824 <HAL_GPIO_WritePin>
        if(bitOrder == 0)
 8001086:	78fb      	ldrb	r3, [r7, #3]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d113      	bne.n	80010b4 <shiftIn+0x54>
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << i;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	895b      	ldrh	r3, [r3, #10]
 8001094:	4619      	mov	r1, r3
 8001096:	4610      	mov	r0, r2
 8001098:	f001 fbac 	bl	80027f4 <HAL_GPIO_ReadPin>
 800109c:	4603      	mov	r3, r0
 800109e:	461a      	mov	r2, r3
 80010a0:	7bbb      	ldrb	r3, [r7, #14]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	b25a      	sxtb	r2, r3
 80010a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	e014      	b.n	80010de <shiftIn+0x7e>
        else
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << (7 - i);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	895b      	ldrh	r3, [r3, #10]
 80010bc:	4619      	mov	r1, r3
 80010be:	4610      	mov	r0, r2
 80010c0:	f001 fb98 	bl	80027f4 <HAL_GPIO_ReadPin>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	7bbb      	ldrb	r3, [r7, #14]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	b25a      	sxtb	r2, r3
 80010d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d8:	4313      	orrs	r3, r2
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	891b      	ldrh	r3, [r3, #8]
 80010e6:	2200      	movs	r2, #0
 80010e8:	4619      	mov	r1, r3
 80010ea:	f001 fb9b 	bl	8002824 <HAL_GPIO_WritePin>
    for(i = 0; i < 8; ++i) {
 80010ee:	7bbb      	ldrb	r3, [r7, #14]
 80010f0:	3301      	adds	r3, #1
 80010f2:	73bb      	strb	r3, [r7, #14]
 80010f4:	7bbb      	ldrb	r3, [r7, #14]
 80010f6:	2b07      	cmp	r3, #7
 80010f8:	d9bd      	bls.n	8001076 <shiftIn+0x16>
    }
    return value;
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <is_ready>:

//############################################################################################
bool is_ready(hx711_t *hx711) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_RESET){
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	895b      	ldrh	r3, [r3, #10]
 8001114:	4619      	mov	r1, r3
 8001116:	4610      	mov	r0, r2
 8001118:	f001 fb6c 	bl	80027f4 <HAL_GPIO_ReadPin>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <is_ready+0x22>
		return 1;
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <is_ready+0x24>
	}
	return 0;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <wait_ready>:

//############################################################################################
void wait_ready(hx711_t *hx711) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	// Wait for the chip to become ready.
	while (!is_ready(hx711)) {
 8001138:	e002      	b.n	8001140 <wait_ready+0x10>
		HAL_Delay(0);
 800113a:	2000      	movs	r0, #0
 800113c:	f001 f8a0 	bl	8002280 <HAL_Delay>
	while (!is_ready(hx711)) {
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ffdf 	bl	8001104 <is_ready>
 8001146:	4603      	mov	r3, r0
 8001148:	f083 0301 	eor.w	r3, r3, #1
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f3      	bne.n	800113a <wait_ready+0xa>
	}
}
 8001152:	bf00      	nop
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <read>:

//############################################################################################
long read(hx711_t *hx711, uint8_t channel){
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
	wait_ready(hx711);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ffe1 	bl	8001130 <wait_ready>
	unsigned long value = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
	uint8_t data[3] = { 0 };
 8001172:	4b2e      	ldr	r3, [pc, #184]	; (800122c <read+0xd0>)
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	813b      	strh	r3, [r7, #8]
 8001178:	2300      	movs	r3, #0
 800117a:	72bb      	strb	r3, [r7, #10]
	uint8_t filler = 0x00;
 800117c:	2300      	movs	r3, #0
 800117e:	75fb      	strb	r3, [r7, #23]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop

	noInterrupts();

	data[2] = shiftIn(hx711, 1);
 8001184:	2101      	movs	r1, #1
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ff6a 	bl	8001060 <shiftIn>
 800118c:	4603      	mov	r3, r0
 800118e:	72bb      	strb	r3, [r7, #10]
	data[1] = shiftIn(hx711, 1);
 8001190:	2101      	movs	r1, #1
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ff64 	bl	8001060 <shiftIn>
 8001198:	4603      	mov	r3, r0
 800119a:	727b      	strb	r3, [r7, #9]
	data[0] = shiftIn(hx711, 1);
 800119c:	2101      	movs	r1, #1
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ff5e 	bl	8001060 <shiftIn>
 80011a4:	4603      	mov	r3, r0
 80011a6:	723b      	strb	r3, [r7, #8]

	uint8_t gain = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	75bb      	strb	r3, [r7, #22]
	if(channel == 0) gain = hx711->Again;
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d103      	bne.n	80011ba <read+0x5e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	7d1b      	ldrb	r3, [r3, #20]
 80011b6:	75bb      	strb	r3, [r7, #22]
 80011b8:	e003      	b.n	80011c2 <read+0x66>
	else gain = hx711->Bgain;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011c0:	75bb      	strb	r3, [r7, #22]

	for (unsigned int i = 0; i < gain; i++) {
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	e012      	b.n	80011ee <read+0x92>
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6818      	ldr	r0, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	891b      	ldrh	r3, [r3, #8]
 80011d0:	2201      	movs	r2, #1
 80011d2:	4619      	mov	r1, r3
 80011d4:	f001 fb26 	bl	8002824 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	891b      	ldrh	r3, [r3, #8]
 80011e0:	2200      	movs	r2, #0
 80011e2:	4619      	mov	r1, r3
 80011e4:	f001 fb1e 	bl	8002824 <HAL_GPIO_WritePin>
	for (unsigned int i = 0; i < gain; i++) {
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	3301      	adds	r3, #1
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	7dbb      	ldrb	r3, [r7, #22]
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d3e8      	bcc.n	80011c8 <read+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 80011f6:	b662      	cpsie	i
}
 80011f8:	bf00      	nop
	}

	interrupts();

	// Replicate the most significant bit to pad out a 32-bit signed integer
	if (data[2] & 0x80) {
 80011fa:	7abb      	ldrb	r3, [r7, #10]
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	da02      	bge.n	8001208 <read+0xac>
		filler = 0xFF;
 8001202:	23ff      	movs	r3, #255	; 0xff
 8001204:	75fb      	strb	r3, [r7, #23]
 8001206:	e001      	b.n	800120c <read+0xb0>
	} else {
		filler = 0x00;
 8001208:	2300      	movs	r3, #0
 800120a:	75fb      	strb	r3, [r7, #23]
	}

	// Construct a 32-bit signed integer
	value = ( (unsigned long)(filler) << 24
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	061a      	lsls	r2, r3, #24
			| (unsigned long)(data[2]) << 16
 8001210:	7abb      	ldrb	r3, [r7, #10]
 8001212:	041b      	lsls	r3, r3, #16
 8001214:	431a      	orrs	r2, r3
			| (unsigned long)(data[1]) << 8
 8001216:	7a7b      	ldrb	r3, [r7, #9]
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	4313      	orrs	r3, r2
			| (unsigned long)(data[0]) );
 800121c:	7a3a      	ldrb	r2, [r7, #8]
	value = ( (unsigned long)(filler) << 24
 800121e:	4313      	orrs	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]

	return (long)(value);
 8001222:	68fb      	ldr	r3, [r7, #12]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	080078f0 	.word	0x080078f0

08001230 <read_average>:

//############################################################################################
long read_average(hx711_t *hx711, int8_t times, uint8_t channel) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	70fb      	strb	r3, [r7, #3]
 800123c:	4613      	mov	r3, r2
 800123e:	70bb      	strb	r3, [r7, #2]
	long sum = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
	for (int8_t i = 0; i < times; i++) {
 8001244:	2300      	movs	r3, #0
 8001246:	72fb      	strb	r3, [r7, #11]
 8001248:	e011      	b.n	800126e <read_average+0x3e>
		sum += read(hx711, channel);
 800124a:	78bb      	ldrb	r3, [r7, #2]
 800124c:	4619      	mov	r1, r3
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ff84 	bl	800115c <read>
 8001254:	4602      	mov	r2, r0
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4413      	add	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]
		HAL_Delay(0);
 800125c:	2000      	movs	r0, #0
 800125e:	f001 f80f 	bl	8002280 <HAL_Delay>
	for (int8_t i = 0; i < times; i++) {
 8001262:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	3301      	adds	r3, #1
 800126a:	b2db      	uxtb	r3, r3
 800126c:	72fb      	strb	r3, [r7, #11]
 800126e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8001272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001276:	429a      	cmp	r2, r3
 8001278:	dbe7      	blt.n	800124a <read_average+0x1a>
	}
	return sum / times;
 800127a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <get_value>:

//############################################################################################
double get_value(hx711_t *hx711, int8_t times, uint8_t channel) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	70fb      	strb	r3, [r7, #3]
 8001298:	4613      	mov	r3, r2
 800129a:	70bb      	strb	r3, [r7, #2]
	long offset = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
	if(channel == CHANNEL_A) offset = hx711->Aoffset;
 80012a0:	78bb      	ldrb	r3, [r7, #2]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d103      	bne.n	80012ae <get_value+0x22>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	e002      	b.n	80012b4 <get_value+0x28>
	else offset = hx711->Boffset;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	60fb      	str	r3, [r7, #12]
	return read_average(hx711, times, channel) - offset;
 80012b4:	78ba      	ldrb	r2, [r7, #2]
 80012b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012ba:	4619      	mov	r1, r3
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ffb7 	bl	8001230 <read_average>
 80012c2:	4602      	mov	r2, r0
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f933 	bl	8000534 <__aeabi_i2d>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80012d6:	eeb0 0a47 	vmov.f32	s0, s14
 80012da:	eef0 0a67 	vmov.f32	s1, s15
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <tare>:

//############################################################################################
void tare(hx711_t *hx711, uint8_t times, uint8_t channel) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	70fb      	strb	r3, [r7, #3]
 80012f0:	4613      	mov	r3, r2
 80012f2:	70bb      	strb	r3, [r7, #2]
	read(hx711, channel); // Change channel
 80012f4:	78bb      	ldrb	r3, [r7, #2]
 80012f6:	4619      	mov	r1, r3
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff2f 	bl	800115c <read>
	double sum = read_average(hx711, times, channel);
 80012fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001302:	78ba      	ldrb	r2, [r7, #2]
 8001304:	4619      	mov	r1, r3
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ff92 	bl	8001230 <read_average>
 800130c:	4603      	mov	r3, r0
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f910 	bl	8000534 <__aeabi_i2d>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	e9c7 2302 	strd	r2, r3, [r7, #8]
	set_offset(hx711, sum, channel);
 800131c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001320:	f7ff fc22 	bl	8000b68 <__aeabi_d2iz>
 8001324:	4601      	mov	r1, r0
 8001326:	78bb      	ldrb	r3, [r7, #2]
 8001328:	461a      	mov	r2, r3
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff fe81 	bl	8001032 <set_offset>
}
 8001330:	bf00      	nop
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <tare_all>:

//############################################################################################
void tare_all(hx711_t *hx711, uint8_t times) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	70fb      	strb	r3, [r7, #3]
	tare(hx711, times, CHANNEL_A);
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	2200      	movs	r2, #0
 8001348:	4619      	mov	r1, r3
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffca 	bl	80012e4 <tare>
	tare(hx711, times, CHANNEL_B);
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	2201      	movs	r2, #1
 8001354:	4619      	mov	r1, r3
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffc4 	bl	80012e4 <tare>
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <get_weight>:

//############################################################################################
float get_weight(hx711_t *hx711, int8_t times, uint8_t channel) {
 8001364:	b5b0      	push	{r4, r5, r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	70fb      	strb	r3, [r7, #3]
 8001370:	4613      	mov	r3, r2
 8001372:	70bb      	strb	r3, [r7, #2]
  // Read load cell
	read(hx711, channel);
 8001374:	78bb      	ldrb	r3, [r7, #2]
 8001376:	4619      	mov	r1, r3
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff feef 	bl	800115c <read>
	float scale = 0;
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
	if(channel == CHANNEL_A) scale = hx711->Ascale;
 8001384:	78bb      	ldrb	r3, [r7, #2]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d103      	bne.n	8001392 <get_weight+0x2e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	e002      	b.n	8001398 <get_weight+0x34>
	else scale = hx711->Bscale;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	60fb      	str	r3, [r7, #12]
	return get_value(hx711, times, channel) / scale;
 8001398:	78ba      	ldrb	r2, [r7, #2]
 800139a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800139e:	4619      	mov	r1, r3
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ff73 	bl	800128c <get_value>
 80013a6:	ec55 4b10 	vmov	r4, r5, d0
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f7ff f8d4 	bl	8000558 <__aeabi_f2d>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4620      	mov	r0, r4
 80013b6:	4629      	mov	r1, r5
 80013b8:	f7ff fa50 	bl	800085c <__aeabi_ddiv>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	f7ff fbf8 	bl	8000bb8 <__aeabi_d2f>
 80013c8:	4603      	mov	r3, r0
 80013ca:	ee07 3a90 	vmov	s15, r3
}
 80013ce:	eeb0 0a67 	vmov.f32	s0, s15
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bdb0      	pop	{r4, r5, r7, pc}

080013d8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013e4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d013      	beq.n	8001418 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80013f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013f4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80013f8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00b      	beq.n	8001418 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001400:	e000      	b.n	8001404 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001402:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001404:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f9      	beq.n	8001402 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800140e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001418:	687b      	ldr	r3, [r7, #4]
}
 800141a:	4618      	mov	r0, r3
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <buzzer>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void buzzer(){
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 800142c:	2201      	movs	r2, #1
 800142e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001432:	4809      	ldr	r0, [pc, #36]	; (8001458 <buzzer+0x30>)
 8001434:	f001 f9f6 	bl	8002824 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8001438:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800143c:	f000 ff20 	bl	8002280 <HAL_Delay>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001446:	4804      	ldr	r0, [pc, #16]	; (8001458 <buzzer+0x30>)
 8001448:	f001 f9ec 	bl	8002824 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800144c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001450:	f000 ff16 	bl	8002280 <HAL_Delay>
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40020000 	.word	0x40020000

0800145c <init_weight>:

/**
 * @brief  Weight Initialization Function
 * @retval None
 */
void init_weight(hx711_t *hx711){
 800145c:	b580      	push	{r7, lr}
 800145e:	b0a4      	sub	sp, #144	; 0x90
 8001460:	af02      	add	r7, sp, #8
 8001462:	6078      	str	r0, [r7, #4]
	char buffer[128] = {0};
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	227c      	movs	r2, #124	; 0x7c
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f004 fb77 	bl	8005b64 <memset>

	printf(buffer,"HX711 initialization\n\r");
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	491a      	ldr	r1, [pc, #104]	; (80014e4 <init_weight+0x88>)
 800147c:	4618      	mov	r0, r3
 800147e:	f004 fa2b 	bl	80058d8 <iprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)(buffer), sizeof(buffer), 100);
 8001482:	f107 0108 	add.w	r1, r7, #8
 8001486:	2364      	movs	r3, #100	; 0x64
 8001488:	2280      	movs	r2, #128	; 0x80
 800148a:	4817      	ldr	r0, [pc, #92]	; (80014e8 <init_weight+0x8c>)
 800148c:	f003 f999 	bl	80047c2 <HAL_UART_Transmit>

	/* Initialize the hx711 sensors */
	hx711_init(hx711, GPIOB, GPIO_PIN_4, GPIOB, GPIO_PIN_5);
 8001490:	2320      	movs	r3, #32
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <init_weight+0x90>)
 8001496:	2210      	movs	r2, #16
 8001498:	4914      	ldr	r1, [pc, #80]	; (80014ec <init_weight+0x90>)
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fd5a 	bl	8000f54 <hx711_init>

	/* Configure gain for each channel (see datasheet for details) */
	set_gain(hx711, 128, 32);
 80014a0:	2220      	movs	r2, #32
 80014a2:	2180      	movs	r1, #128	; 0x80
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff fda5 	bl	8000ff4 <set_gain>

	/* Set HX711 scaling factor (see README for procedure) */
	set_scale(hx711, -44.25, -10.98);
 80014aa:	eddf 0a11 	vldr	s1, [pc, #68]	; 80014f0 <init_weight+0x94>
 80014ae:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80014f4 <init_weight+0x98>
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fd8a 	bl	8000fcc <set_scale>

	/* Tare weight */
	tare_all(hx711, 10);
 80014b8:	210a      	movs	r1, #10
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ff3c 	bl	8001338 <tare_all>

	printf(buffer,"HX711 module has been initialized\n\r");
 80014c0:	f107 0308 	add.w	r3, r7, #8
 80014c4:	490c      	ldr	r1, [pc, #48]	; (80014f8 <init_weight+0x9c>)
 80014c6:	4618      	mov	r0, r3
 80014c8:	f004 fa06 	bl	80058d8 <iprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)(buffer), sizeof(buffer), 100);
 80014cc:	f107 0108 	add.w	r1, r7, #8
 80014d0:	2364      	movs	r3, #100	; 0x64
 80014d2:	2280      	movs	r2, #128	; 0x80
 80014d4:	4804      	ldr	r0, [pc, #16]	; (80014e8 <init_weight+0x8c>)
 80014d6:	f003 f974 	bl	80047c2 <HAL_UART_Transmit>
}
 80014da:	bf00      	nop
 80014dc:	3788      	adds	r7, #136	; 0x88
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	080078f4 	.word	0x080078f4
 80014e8:	20000258 	.word	0x20000258
 80014ec:	40020400 	.word	0x40020400
 80014f0:	c12fae14 	.word	0xc12fae14
 80014f4:	c2310000 	.word	0xc2310000
 80014f8:	0800790c 	.word	0x0800790c

080014fc <measure_weight>:
/**
 * @brief  Weight Measuring Function
 * @retval the weight measured for each associated channel
 */

float measure_weight(hx711_t hx711){
 80014fc:	b084      	sub	sp, #16
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	f107 0c10 	add.w	ip, r7, #16
 8001508:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	long weightA = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	607b      	str	r3, [r7, #4]

	// Measure the weight for channel A
	weightA = get_weight(&hx711, 10, CHANNEL_A);
 8001510:	2200      	movs	r2, #0
 8001512:	210a      	movs	r1, #10
 8001514:	f107 0010 	add.w	r0, r7, #16
 8001518:	f7ff ff24 	bl	8001364 <get_weight>
 800151c:	eef0 7a40 	vmov.f32	s15, s0
 8001520:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001524:	ee17 3a90 	vmov	r3, s15
 8001528:	607b      	str	r3, [r7, #4]
	// Weight cannot be negative
	weightA = (weightA < 0) ? 0 : weightA;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001530:	607b      	str	r3, [r7, #4]

	return weightA;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	ee07 3a90 	vmov	s15, r3
 8001538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800153c:	eeb0 0a67 	vmov.f32	s0, s15
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001548:	b004      	add	sp, #16
 800154a:	4770      	bx	lr

0800154c <_write>:

int _write(int le, char *ptr, int len){
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++){
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	e009      	b.n	8001572 <_write+0x26>
		ITM_SendChar(*ptr++);
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	60ba      	str	r2, [r7, #8]
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ff36 	bl	80013d8 <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++){
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	3301      	adds	r3, #1
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	429a      	cmp	r2, r3
 8001578:	dbf1      	blt.n	800155e <_write+0x12>
	}
	return len;
 800157a:	687b      	ldr	r3, [r7, #4]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <calculate>:

float calculate(const float previous_weight, const float current_weight){
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	ed87 0a01 	vstr	s0, [r7, #4]
 800158e:	edc7 0a00 	vstr	s1, [r7]
	int ans = previous_weight - current_weight;
 8001592:	ed97 7a01 	vldr	s14, [r7, #4]
 8001596:	edd7 7a00 	vldr	s15, [r7]
 800159a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a2:	ee17 3a90 	vmov	r3, s15
 80015a6:	60fb      	str	r3, [r7, #12]
	if(ans > 0.0) {
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	dd05      	ble.n	80015ba <calculate+0x36>
		return ans;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	ee07 3a90 	vmov	s15, r3
 80015b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b8:	e001      	b.n	80015be <calculate+0x3a>
	} else {
		return 0.0;
 80015ba:	eddf 7a04 	vldr	s15, [pc, #16]	; 80015cc <calculate+0x48>
	}
}
 80015be:	eeb0 0a67 	vmov.f32	s0, s15
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	00000000 	.word	0x00000000

080015d0 <get_time_in_seconds>:

int get_time_in_seconds(void){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
	 RTC_DateTypeDef gDate;
	 RTC_TimeTypeDef gTime;
	/* Get the RTC current Time */
	 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2200      	movs	r2, #0
 80015da:	4619      	mov	r1, r3
 80015dc:	480f      	ldr	r0, [pc, #60]	; (800161c <get_time_in_seconds+0x4c>)
 80015de:	f001 ffd1 	bl	8003584 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80015e2:	f107 0318 	add.w	r3, r7, #24
 80015e6:	2200      	movs	r2, #0
 80015e8:	4619      	mov	r1, r3
 80015ea:	480c      	ldr	r0, [pc, #48]	; (800161c <get_time_in_seconds+0x4c>)
 80015ec:	f002 f8ac 	bl	8003748 <HAL_RTC_GetDate>
	 int seconds = gTime.Hours * 3600 + gTime.Minutes * 60 + gTime.Seconds;
 80015f0:	793b      	ldrb	r3, [r7, #4]
 80015f2:	461a      	mov	r2, r3
 80015f4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80015f8:	fb03 f202 	mul.w	r2, r3, r2
 80015fc:	797b      	ldrb	r3, [r7, #5]
 80015fe:	4619      	mov	r1, r3
 8001600:	460b      	mov	r3, r1
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	1a5b      	subs	r3, r3, r1
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	79ba      	ldrb	r2, [r7, #6]
 800160c:	4413      	add	r3, r2
 800160e:	61fb      	str	r3, [r7, #28]
	 return seconds;
 8001610:	69fb      	ldr	r3, [r7, #28]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3720      	adds	r7, #32
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200001f0 	.word	0x200001f0

08001620 <moving_average>:

float moving_average(float arr[]) {
 8001620:	b480      	push	{r7}
 8001622:	b091      	sub	sp, #68	; 0x44
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	int size = 5;
 8001628:	2305      	movs	r3, #5
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int window_size = 3;
 800162c:	2303      	movs	r3, #3
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	63fb      	str	r3, [r7, #60]	; 0x3c
	float moving_averages[3];
	while (i < size - window_size + 1) {
 8001634:	e04d      	b.n	80016d2 <moving_average+0xb2>
		int window[3];
		int j;

		for (j = 0; j < window_size; j++) {
 8001636:	2300      	movs	r3, #0
 8001638:	63bb      	str	r3, [r7, #56]	; 0x38
 800163a:	e014      	b.n	8001666 <moving_average+0x46>
			window[j] = arr[i + j];
 800163c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800163e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001640:	4413      	add	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	4413      	add	r3, r2
 8001648:	edd3 7a00 	vldr	s15, [r3]
 800164c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001650:	ee17 2a90 	vmov	r2, s15
 8001654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	3340      	adds	r3, #64	; 0x40
 800165a:	443b      	add	r3, r7
 800165c:	f843 2c34 	str.w	r2, [r3, #-52]
		for (j = 0; j < window_size; j++) {
 8001660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001662:	3301      	adds	r3, #1
 8001664:	63bb      	str	r3, [r7, #56]	; 0x38
 8001666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166a:	429a      	cmp	r2, r3
 800166c:	dbe6      	blt.n	800163c <moving_average+0x1c>
		}

		float window_average = 0;
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	637b      	str	r3, [r7, #52]	; 0x34

		for (j = 0; j < window_size; j++) {
 8001674:	2300      	movs	r3, #0
 8001676:	63bb      	str	r3, [r7, #56]	; 0x38
 8001678:	e012      	b.n	80016a0 <moving_average+0x80>
			window_average += window[j];
 800167a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	3340      	adds	r3, #64	; 0x40
 8001680:	443b      	add	r3, r7
 8001682:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8001686:	ee07 3a90 	vmov	s15, r3
 800168a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800168e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001696:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		for (j = 0; j < window_size; j++) {
 800169a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800169c:	3301      	adds	r3, #1
 800169e:	63bb      	str	r3, [r7, #56]	; 0x38
 80016a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a4:	429a      	cmp	r2, r3
 80016a6:	dbe8      	blt.n	800167a <moving_average+0x5a>
		}
		window_average /= window_size;
 80016a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016aa:	ee07 3a90 	vmov	s15, r3
 80016ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016b2:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80016b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ba:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		moving_averages[i] = window_average;
 80016be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	3340      	adds	r3, #64	; 0x40
 80016c4:	443b      	add	r3, r7
 80016c6:	3b28      	subs	r3, #40	; 0x28
 80016c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016ca:	601a      	str	r2, [r3, #0]
		i++;
 80016cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016ce:	3301      	adds	r3, #1
 80016d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (i < size - window_size + 1) {
 80016d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016da:	429a      	cmp	r2, r3
 80016dc:	ddab      	ble.n	8001636 <moving_average+0x16>
    }
	float sum = 0;
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
	for(i = 0; i < 3; i++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016e8:	e00f      	b.n	800170a <moving_average+0xea>
        sum += moving_averages[i];
 80016ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	3340      	adds	r3, #64	; 0x40
 80016f0:	443b      	add	r3, r7
 80016f2:	3b28      	subs	r3, #40	; 0x28
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80016fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001700:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	for(i = 0; i < 3; i++)
 8001704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001706:	3301      	adds	r3, #1
 8001708:	63fb      	str	r3, [r7, #60]	; 0x3c
 800170a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800170c:	2b02      	cmp	r3, #2
 800170e:	ddec      	ble.n	80016ea <moving_average+0xca>
	float moving_average = sum/3;
 8001710:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001714:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800171c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	return moving_average;
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	ee07 3a90 	vmov	s15, r3
}
 8001726:	eeb0 0a67 	vmov.f32	s0, s15
 800172a:	3744      	adds	r7, #68	; 0x44
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001734:	b5b0      	push	{r4, r5, r7, lr}
 8001736:	b0a0      	sub	sp, #128	; 0x80
 8001738:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800173a:	f000 fd2f 	bl	800219c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800173e:	f000 f8f1 	bl	8001924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001742:	f000 fa89 	bl	8001c58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001746:	f000 fa5d 	bl	8001c04 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800174a:	f000 f9e5 	bl	8001b18 <MX_TIM2_Init>
  MX_RTC_Init();
 800174e:	f000 f957 	bl	8001a00 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  hx711_t loadcell;
  float weight;
  init_weight(&loadcell);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fe80 	bl	800145c <init_weight>


  float previous_weight;
  hx711_init(&loadcell, GPIOB, GPIO_PIN_4, GPIOB, GPIO_PIN_5);
 800175c:	f107 0014 	add.w	r0, r7, #20
 8001760:	2320      	movs	r3, #32
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	4b6a      	ldr	r3, [pc, #424]	; (8001910 <main+0x1dc>)
 8001766:	2210      	movs	r2, #16
 8001768:	4969      	ldr	r1, [pc, #420]	; (8001910 <main+0x1dc>)
 800176a:	f7ff fbf3 	bl	8000f54 <hx711_init>
  int lightOnOff = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	663b      	str	r3, [r7, #96]	; 0x60
  int maleMode = 1;
 8001772:	2301      	movs	r3, #1
 8001774:	65fb      	str	r3, [r7, #92]	; 0x5c
  float waterConsumed = 0;
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	65bb      	str	r3, [r7, #88]	; 0x58
  const int MALE_GOAL = 1000;
 800177c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001780:	647b      	str	r3, [r7, #68]	; 0x44
  const int FEMALE_GOAL = 800;
 8001782:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001786:	643b      	str	r3, [r7, #64]	; 0x40
  int previous_time = get_time_in_seconds();
 8001788:	f7ff ff22 	bl	80015d0 <get_time_in_seconds>
 800178c:	6578      	str	r0, [r7, #84]	; 0x54
  int current_time = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	63fb      	str	r3, [r7, #60]	; 0x3c
  int FIRST = 1;
 8001792:	2301      	movs	r3, #1
 8001794:	653b      	str	r3, [r7, #80]	; 0x50
  int water_level_changed = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Program running ... \n");
 800179a:	485e      	ldr	r0, [pc, #376]	; (8001914 <main+0x1e0>)
 800179c:	f004 f902 	bl	80059a4 <puts>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET){
 80017a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a4:	485c      	ldr	r0, [pc, #368]	; (8001918 <main+0x1e4>)
 80017a6:	f001 f825 	bl	80027f4 <HAL_GPIO_ReadPin>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d116      	bne.n	80017de <main+0xaa>
		  if(lightOnOff == 0) lightOnOff = 1;
 80017b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d102      	bne.n	80017bc <main+0x88>
 80017b6:	2301      	movs	r3, #1
 80017b8:	663b      	str	r3, [r7, #96]	; 0x60
 80017ba:	e001      	b.n	80017c0 <main+0x8c>
		  else lightOnOff = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	663b      	str	r3, [r7, #96]	; 0x60

		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, lightOnOff);
 80017c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	461a      	mov	r2, r3
 80017c6:	2140      	movs	r1, #64	; 0x40
 80017c8:	4854      	ldr	r0, [pc, #336]	; (800191c <main+0x1e8>)
 80017ca:	f001 f82b 	bl	8002824 <HAL_GPIO_WritePin>

		  if(maleMode == 1) maleMode = 0;
 80017ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d102      	bne.n	80017da <main+0xa6>
 80017d4:	2300      	movs	r3, #0
 80017d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017d8:	e001      	b.n	80017de <main+0xaa>
		  else maleMode = 1;
 80017da:	2301      	movs	r3, #1
 80017dc:	65fb      	str	r3, [r7, #92]	; 0x5c
//		  buzzer();
	  }

	  if(FIRST == 1){
 80017de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d10f      	bne.n	8001804 <main+0xd0>
	  	previous_weight = measure_weight(loadcell);
 80017e4:	466d      	mov	r5, sp
 80017e6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80017ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ee:	6823      	ldr	r3, [r4, #0]
 80017f0:	602b      	str	r3, [r5, #0]
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017f8:	f7ff fe80 	bl	80014fc <measure_weight>
 80017fc:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
	  	FIRST = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	653b      	str	r3, [r7, #80]	; 0x50
	  }

	  float arr[5];
	  for(int i = 0; i < 5; i++) {
 8001804:	2300      	movs	r3, #0
 8001806:	64bb      	str	r3, [r7, #72]	; 0x48
 8001808:	e017      	b.n	800183a <main+0x106>
		  arr[i] = measure_weight(loadcell);
 800180a:	466d      	mov	r5, sp
 800180c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001814:	6823      	ldr	r3, [r4, #0]
 8001816:	602b      	str	r3, [r5, #0]
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800181e:	f7ff fe6d 	bl	80014fc <measure_weight>
 8001822:	eef0 7a40 	vmov.f32	s15, s0
 8001826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	3368      	adds	r3, #104	; 0x68
 800182c:	443b      	add	r3, r7
 800182e:	3b68      	subs	r3, #104	; 0x68
 8001830:	edc3 7a00 	vstr	s15, [r3]
	  for(int i = 0; i < 5; i++) {
 8001834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001836:	3301      	adds	r3, #1
 8001838:	64bb      	str	r3, [r7, #72]	; 0x48
 800183a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800183c:	2b04      	cmp	r3, #4
 800183e:	dde4      	ble.n	800180a <main+0xd6>
	  }
	  weight = moving_average(arr);
 8001840:	463b      	mov	r3, r7
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff feec 	bl	8001620 <moving_average>
 8001848:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

	  printf("%f",weight);
 800184c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800184e:	f7fe fe83 	bl	8000558 <__aeabi_f2d>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4832      	ldr	r0, [pc, #200]	; (8001920 <main+0x1ec>)
 8001858:	f004 f83e 	bl	80058d8 <iprintf>
	  waterConsumed += calculate(previous_weight, weight);
 800185c:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 8001860:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 8001864:	f7ff fe8e 	bl	8001584 <calculate>
 8001868:	eeb0 7a40 	vmov.f32	s14, s0
 800186c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001870:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001874:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	  previous_weight = weight;
 8001878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800187a:	667b      	str	r3, [r7, #100]	; 0x64

	  // ignore change in water level if less than 5
	  if(waterConsumed < 5){
 800187c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001880:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001884:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188c:	d505      	bpl.n	800189a <main+0x166>
		  waterConsumed = 0;
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	65bb      	str	r3, [r7, #88]	; 0x58
		  water_level_changed = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001898:	e001      	b.n	800189e <main+0x16a>
	  }else {
		  water_level_changed = 1;
 800189a:	2301      	movs	r3, #1
 800189c:	64fb      	str	r3, [r7, #76]	; 0x4c
	  }

	  if(maleMode == 1){
 800189e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d111      	bne.n	80018c8 <main+0x194>
	  	if(waterConsumed >= MALE_GOAL){
 80018a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018a6:	ee07 3a90 	vmov	s15, r3
 80018aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ae:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80018b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ba:	db16      	blt.n	80018ea <main+0x1b6>
	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80018bc:	2201      	movs	r2, #1
 80018be:	2180      	movs	r1, #128	; 0x80
 80018c0:	4816      	ldr	r0, [pc, #88]	; (800191c <main+0x1e8>)
 80018c2:	f000 ffaf 	bl	8002824 <HAL_GPIO_WritePin>
 80018c6:	e010      	b.n	80018ea <main+0x1b6>
	  	}
	  }
	  else{
		if(waterConsumed >= FEMALE_GOAL) {
 80018c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018ca:	ee07 3a90 	vmov	s15, r3
 80018ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018d2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80018d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018de:	db04      	blt.n	80018ea <main+0x1b6>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80018e0:	2201      	movs	r2, #1
 80018e2:	2180      	movs	r1, #128	; 0x80
 80018e4:	480d      	ldr	r0, [pc, #52]	; (800191c <main+0x1e8>)
 80018e6:	f000 ff9d 	bl	8002824 <HAL_GPIO_WritePin>
		}
	  }

	  current_time = get_time_in_seconds();
 80018ea:	f7ff fe71 	bl	80015d0 <get_time_in_seconds>
 80018ee:	63f8      	str	r0, [r7, #60]	; 0x3c
	  if(current_time - previous_time > 10){
 80018f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b0a      	cmp	r3, #10
 80018f8:	f77f af4f 	ble.w	800179a <main+0x66>
		  previous_time = current_time;
 80018fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018fe:	657b      	str	r3, [r7, #84]	; 0x54
		  if(water_level_changed == 0){
 8001900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001902:	2b00      	cmp	r3, #0
 8001904:	f47f af49 	bne.w	800179a <main+0x66>
			  buzzer();
 8001908:	f7ff fd8e 	bl	8001428 <buzzer>
  {
 800190c:	e745      	b.n	800179a <main+0x66>
 800190e:	bf00      	nop
 8001910:	40020400 	.word	0x40020400
 8001914:	08007930 	.word	0x08007930
 8001918:	40020800 	.word	0x40020800
 800191c:	40020000 	.word	0x40020000
 8001920:	08007948 	.word	0x08007948

08001924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b094      	sub	sp, #80	; 0x50
 8001928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800192a:	f107 0320 	add.w	r3, r7, #32
 800192e:	2230      	movs	r2, #48	; 0x30
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f004 f916 	bl	8005b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001948:	2300      	movs	r3, #0
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	4b2a      	ldr	r3, [pc, #168]	; (80019f8 <SystemClock_Config+0xd4>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	4a29      	ldr	r2, [pc, #164]	; (80019f8 <SystemClock_Config+0xd4>)
 8001952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001956:	6413      	str	r3, [r2, #64]	; 0x40
 8001958:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <SystemClock_Config+0xd4>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001964:	2300      	movs	r3, #0
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <SystemClock_Config+0xd8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001970:	4a22      	ldr	r2, [pc, #136]	; (80019fc <SystemClock_Config+0xd8>)
 8001972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	4b20      	ldr	r3, [pc, #128]	; (80019fc <SystemClock_Config+0xd8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001984:	2306      	movs	r3, #6
 8001986:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001988:	2301      	movs	r3, #1
 800198a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800198c:	2301      	movs	r3, #1
 800198e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001990:	2310      	movs	r3, #16
 8001992:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001994:	2302      	movs	r3, #2
 8001996:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001998:	2300      	movs	r3, #0
 800199a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800199c:	2310      	movs	r3, #16
 800199e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80019a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80019a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019a6:	2304      	movs	r3, #4
 80019a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80019aa:	2307      	movs	r3, #7
 80019ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ae:	f107 0320 	add.w	r3, r7, #32
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 ff50 	bl	8002858 <HAL_RCC_OscConfig>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80019be:	f000 f9d1 	bl	8001d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019c2:	230f      	movs	r3, #15
 80019c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019c6:	2302      	movs	r3, #2
 80019c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019d8:	f107 030c 	add.w	r3, r7, #12
 80019dc:	2102      	movs	r1, #2
 80019de:	4618      	mov	r0, r3
 80019e0:	f001 f9b2 	bl	8002d48 <HAL_RCC_ClockConfig>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <SystemClock_Config+0xca>
  {
    Error_Handler();
 80019ea:	f000 f9bb 	bl	8001d64 <Error_Handler>
  }
}
 80019ee:	bf00      	nop
 80019f0:	3750      	adds	r7, #80	; 0x50
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40007000 	.word	0x40007000

08001a00 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b090      	sub	sp, #64	; 0x40
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
 8001a14:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001a16:	2300      	movs	r3, #0
 8001a18:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	2228      	movs	r2, #40	; 0x28
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f004 f89f 	bl	8005b64 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a26:	4b3a      	ldr	r3, [pc, #232]	; (8001b10 <MX_RTC_Init+0x110>)
 8001a28:	4a3a      	ldr	r2, [pc, #232]	; (8001b14 <MX_RTC_Init+0x114>)
 8001a2a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a2c:	4b38      	ldr	r3, [pc, #224]	; (8001b10 <MX_RTC_Init+0x110>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a32:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <MX_RTC_Init+0x110>)
 8001a34:	227f      	movs	r2, #127	; 0x7f
 8001a36:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a38:	4b35      	ldr	r3, [pc, #212]	; (8001b10 <MX_RTC_Init+0x110>)
 8001a3a:	22ff      	movs	r2, #255	; 0xff
 8001a3c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a3e:	4b34      	ldr	r3, [pc, #208]	; (8001b10 <MX_RTC_Init+0x110>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a44:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <MX_RTC_Init+0x110>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a4a:	4b31      	ldr	r3, [pc, #196]	; (8001b10 <MX_RTC_Init+0x110>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a50:	482f      	ldr	r0, [pc, #188]	; (8001b10 <MX_RTC_Init+0x110>)
 8001a52:	f001 fc87 	bl	8003364 <HAL_RTC_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001a5c:	f000 f982 	bl	8001d64 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4619      	mov	r1, r3
 8001a82:	4823      	ldr	r0, [pc, #140]	; (8001b10 <MX_RTC_Init+0x110>)
 8001a84:	f001 fce4 	bl	8003450 <HAL_RTC_SetTime>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001a8e:	f000 f969 	bl	8001d64 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8001a92:	2303      	movs	r3, #3
 8001a94:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_NOVEMBER;
 8001a98:	2311      	movs	r3, #17
 8001a9a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x22;
 8001a9e:	2322      	movs	r3, #34	; 0x22
 8001aa0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001aaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aae:	2201      	movs	r2, #1
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4817      	ldr	r0, [pc, #92]	; (8001b10 <MX_RTC_Init+0x110>)
 8001ab4:	f001 fdc4 	bl	8003640 <HAL_RTC_SetDate>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001abe:	f000 f951 	bl	8001d64 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001aec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001af2:	463b      	mov	r3, r7
 8001af4:	2201      	movs	r2, #1
 8001af6:	4619      	mov	r1, r3
 8001af8:	4805      	ldr	r0, [pc, #20]	; (8001b10 <MX_RTC_Init+0x110>)
 8001afa:	f001 fe75 	bl	80037e8 <HAL_RTC_SetAlarm_IT>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001b04:	f000 f92e 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b08:	bf00      	nop
 8001b0a:	3740      	adds	r7, #64	; 0x40
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	200001f0 	.word	0x200001f0
 8001b14:	40002800 	.word	0x40002800

08001b18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08e      	sub	sp, #56	; 0x38
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b2c:	f107 0320 	add.w	r3, r7, #32
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
 8001b44:	615a      	str	r2, [r3, #20]
 8001b46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b48:	4b2d      	ldr	r3, [pc, #180]	; (8001c00 <MX_TIM2_Init+0xe8>)
 8001b4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b50:	4b2b      	ldr	r3, [pc, #172]	; (8001c00 <MX_TIM2_Init+0xe8>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b56:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <MX_TIM2_Init+0xe8>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b5c:	4b28      	ldr	r3, [pc, #160]	; (8001c00 <MX_TIM2_Init+0xe8>)
 8001b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b64:	4b26      	ldr	r3, [pc, #152]	; (8001c00 <MX_TIM2_Init+0xe8>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6a:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <MX_TIM2_Init+0xe8>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b70:	4823      	ldr	r0, [pc, #140]	; (8001c00 <MX_TIM2_Init+0xe8>)
 8001b72:	f002 f892 	bl	8003c9a <HAL_TIM_Base_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001b7c:	f000 f8f2 	bl	8001d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	481c      	ldr	r0, [pc, #112]	; (8001c00 <MX_TIM2_Init+0xe8>)
 8001b8e:	f002 f9ef 	bl	8003f70 <HAL_TIM_ConfigClockSource>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001b98:	f000 f8e4 	bl	8001d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b9c:	4818      	ldr	r0, [pc, #96]	; (8001c00 <MX_TIM2_Init+0xe8>)
 8001b9e:	f002 f8cb 	bl	8003d38 <HAL_TIM_PWM_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001ba8:	f000 f8dc 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bac:	2300      	movs	r3, #0
 8001bae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bb4:	f107 0320 	add.w	r3, r7, #32
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4811      	ldr	r0, [pc, #68]	; (8001c00 <MX_TIM2_Init+0xe8>)
 8001bbc:	f002 fd46 	bl	800464c <HAL_TIMEx_MasterConfigSynchronization>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001bc6:	f000 f8cd 	bl	8001d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bca:	2360      	movs	r3, #96	; 0x60
 8001bcc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2204      	movs	r2, #4
 8001bde:	4619      	mov	r1, r3
 8001be0:	4807      	ldr	r0, [pc, #28]	; (8001c00 <MX_TIM2_Init+0xe8>)
 8001be2:	f002 f903 	bl	8003dec <HAL_TIM_PWM_ConfigChannel>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001bec:	f000 f8ba 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bf0:	4803      	ldr	r0, [pc, #12]	; (8001c00 <MX_TIM2_Init+0xe8>)
 8001bf2:	f000 f939 	bl	8001e68 <HAL_TIM_MspPostInit>

}
 8001bf6:	bf00      	nop
 8001bf8:	3738      	adds	r7, #56	; 0x38
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000210 	.word	0x20000210

08001c04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c0a:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <MX_USART2_UART_Init+0x50>)
 8001c0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c3a:	4805      	ldr	r0, [pc, #20]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c3c:	f002 fd74 	bl	8004728 <HAL_UART_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c46:	f000 f88d 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000258 	.word	0x20000258
 8001c54:	40004400 	.word	0x40004400

08001c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08a      	sub	sp, #40	; 0x28
 8001c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
 8001c6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	4b38      	ldr	r3, [pc, #224]	; (8001d54 <MX_GPIO_Init+0xfc>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a37      	ldr	r2, [pc, #220]	; (8001d54 <MX_GPIO_Init+0xfc>)
 8001c78:	f043 0304 	orr.w	r3, r3, #4
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b35      	ldr	r3, [pc, #212]	; (8001d54 <MX_GPIO_Init+0xfc>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f003 0304 	and.w	r3, r3, #4
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <MX_GPIO_Init+0xfc>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a30      	ldr	r2, [pc, #192]	; (8001d54 <MX_GPIO_Init+0xfc>)
 8001c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b2e      	ldr	r3, [pc, #184]	; (8001d54 <MX_GPIO_Init+0xfc>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <MX_GPIO_Init+0xfc>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a29      	ldr	r2, [pc, #164]	; (8001d54 <MX_GPIO_Init+0xfc>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <MX_GPIO_Init+0xfc>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <MX_GPIO_Init+0xfc>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a22      	ldr	r2, [pc, #136]	; (8001d54 <MX_GPIO_Init+0xfc>)
 8001ccc:	f043 0302 	orr.w	r3, r3, #2
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <MX_GPIO_Init+0xfc>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10, GPIO_PIN_RESET);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8001ce4:	481c      	ldr	r0, [pc, #112]	; (8001d58 <MX_GPIO_Init+0x100>)
 8001ce6:	f000 fd9d 	bl	8002824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2130      	movs	r1, #48	; 0x30
 8001cee:	481b      	ldr	r0, [pc, #108]	; (8001d5c <MX_GPIO_Init+0x104>)
 8001cf0:	f000 fd98 	bl	8002824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cfa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4815      	ldr	r0, [pc, #84]	; (8001d60 <MX_GPIO_Init+0x108>)
 8001d0c:	f000 fbee 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001d10:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8001d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d16:	2301      	movs	r3, #1
 8001d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d22:	f107 0314 	add.w	r3, r7, #20
 8001d26:	4619      	mov	r1, r3
 8001d28:	480b      	ldr	r0, [pc, #44]	; (8001d58 <MX_GPIO_Init+0x100>)
 8001d2a:	f000 fbdf 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d2e:	2330      	movs	r3, #48	; 0x30
 8001d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d32:	2301      	movs	r3, #1
 8001d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3e:	f107 0314 	add.w	r3, r7, #20
 8001d42:	4619      	mov	r1, r3
 8001d44:	4805      	ldr	r0, [pc, #20]	; (8001d5c <MX_GPIO_Init+0x104>)
 8001d46:	f000 fbd1 	bl	80024ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d4a:	bf00      	nop
 8001d4c:	3728      	adds	r7, #40	; 0x28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40020000 	.word	0x40020000
 8001d5c:	40020400 	.word	0x40020400
 8001d60:	40020800 	.word	0x40020800

08001d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d68:	b672      	cpsid	i
}
 8001d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <Error_Handler+0x8>
	...

08001d70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <HAL_MspInit+0x4c>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	4a0f      	ldr	r2, [pc, #60]	; (8001dbc <HAL_MspInit+0x4c>)
 8001d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d84:	6453      	str	r3, [r2, #68]	; 0x44
 8001d86:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <HAL_MspInit+0x4c>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	603b      	str	r3, [r7, #0]
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <HAL_MspInit+0x4c>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	4a08      	ldr	r2, [pc, #32]	; (8001dbc <HAL_MspInit+0x4c>)
 8001d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da0:	6413      	str	r3, [r2, #64]	; 0x40
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_MspInit+0x4c>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001dae:	2007      	movs	r0, #7
 8001db0:	f000 fb5a 	bl	8002468 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40023800 	.word	0x40023800

08001dc0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dc8:	f107 030c 	add.w	r3, r7, #12
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a10      	ldr	r2, [pc, #64]	; (8001e20 <HAL_RTC_MspInit+0x60>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d119      	bne.n	8001e16 <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001de2:	2302      	movs	r3, #2
 8001de4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001de6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dea:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dec:	f107 030c 	add.w	r3, r7, #12
 8001df0:	4618      	mov	r0, r3
 8001df2:	f001 f9c9 	bl	8003188 <HAL_RCCEx_PeriphCLKConfig>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001dfc:	f7ff ffb2 	bl	8001d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_RTC_MspInit+0x64>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2100      	movs	r1, #0
 8001e0a:	2029      	movs	r0, #41	; 0x29
 8001e0c:	f000 fb37 	bl	800247e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001e10:	2029      	movs	r0, #41	; 0x29
 8001e12:	f000 fb50 	bl	80024b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e16:	bf00      	nop
 8001e18:	3720      	adds	r7, #32
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40002800 	.word	0x40002800
 8001e24:	42470e3c 	.word	0x42470e3c

08001e28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e38:	d10d      	bne.n	8001e56 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <HAL_TIM_Base_MspInit+0x3c>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	4a08      	ldr	r2, [pc, #32]	; (8001e64 <HAL_TIM_Base_MspInit+0x3c>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_TIM_Base_MspInit+0x3c>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800

08001e68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 030c 	add.w	r3, r7, #12
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e88:	d11d      	bne.n	8001ec6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <HAL_TIM_MspPostInit+0x68>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <HAL_TIM_MspPostInit+0x68>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <HAL_TIM_MspPostInit+0x68>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eba:	f107 030c 	add.w	r3, r7, #12
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4804      	ldr	r0, [pc, #16]	; (8001ed4 <HAL_TIM_MspPostInit+0x6c>)
 8001ec2:	f000 fb13 	bl	80024ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ec6:	bf00      	nop
 8001ec8:	3720      	adds	r7, #32
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40020000 	.word	0x40020000

08001ed8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08a      	sub	sp, #40	; 0x28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a19      	ldr	r2, [pc, #100]	; (8001f5c <HAL_UART_MspInit+0x84>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d12b      	bne.n	8001f52 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <HAL_UART_MspInit+0x88>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	4a17      	ldr	r2, [pc, #92]	; (8001f60 <HAL_UART_MspInit+0x88>)
 8001f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f08:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <HAL_UART_MspInit+0x88>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <HAL_UART_MspInit+0x88>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a10      	ldr	r2, [pc, #64]	; (8001f60 <HAL_UART_MspInit+0x88>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <HAL_UART_MspInit+0x88>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f32:	230c      	movs	r3, #12
 8001f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f42:	2307      	movs	r3, #7
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4805      	ldr	r0, [pc, #20]	; (8001f64 <HAL_UART_MspInit+0x8c>)
 8001f4e:	f000 facd 	bl	80024ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f52:	bf00      	nop
 8001f54:	3728      	adds	r7, #40	; 0x28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40004400 	.word	0x40004400
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40020000 	.word	0x40020000

08001f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <NMI_Handler+0x4>

08001f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f72:	e7fe      	b.n	8001f72 <HardFault_Handler+0x4>

08001f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <MemManage_Handler+0x4>

08001f7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f7e:	e7fe      	b.n	8001f7e <BusFault_Handler+0x4>

08001f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <UsageFault_Handler+0x4>

08001f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fb4:	f000 f944 	bl	8002240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001fc0:	4802      	ldr	r0, [pc, #8]	; (8001fcc <RTC_Alarm_IRQHandler+0x10>)
 8001fc2:	f001 fd53 	bl	8003a6c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200001f0 	.word	0x200001f0

08001fd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return 1;
 8001fd4:	2301      	movs	r3, #1
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <_kill>:

int _kill(int pid, int sig)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fea:	f003 fe0d 	bl	8005c08 <__errno>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2216      	movs	r2, #22
 8001ff2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ff4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <_exit>:

void _exit (int status)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002008:	f04f 31ff 	mov.w	r1, #4294967295
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff ffe7 	bl	8001fe0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002012:	e7fe      	b.n	8002012 <_exit+0x12>

08002014 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	e00a      	b.n	800203c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002026:	f3af 8000 	nop.w
 800202a:	4601      	mov	r1, r0
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	60ba      	str	r2, [r7, #8]
 8002032:	b2ca      	uxtb	r2, r1
 8002034:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	3301      	adds	r3, #1
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	429a      	cmp	r2, r3
 8002042:	dbf0      	blt.n	8002026 <_read+0x12>
  }

  return len;
 8002044:	687b      	ldr	r3, [r7, #4]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <_close>:
  }
  return len;
}

int _close(int file)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295
}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002076:	605a      	str	r2, [r3, #4]
  return 0;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <_isatty>:

int _isatty(int file)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800208e:	2301      	movs	r3, #1
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c0:	4a14      	ldr	r2, [pc, #80]	; (8002114 <_sbrk+0x5c>)
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <_sbrk+0x60>)
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020cc:	4b13      	ldr	r3, [pc, #76]	; (800211c <_sbrk+0x64>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d102      	bne.n	80020da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <_sbrk+0x64>)
 80020d6:	4a12      	ldr	r2, [pc, #72]	; (8002120 <_sbrk+0x68>)
 80020d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <_sbrk+0x64>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d207      	bcs.n	80020f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e8:	f003 fd8e 	bl	8005c08 <__errno>
 80020ec:	4603      	mov	r3, r0
 80020ee:	220c      	movs	r2, #12
 80020f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
 80020f6:	e009      	b.n	800210c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f8:	4b08      	ldr	r3, [pc, #32]	; (800211c <_sbrk+0x64>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020fe:	4b07      	ldr	r3, [pc, #28]	; (800211c <_sbrk+0x64>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	4a05      	ldr	r2, [pc, #20]	; (800211c <_sbrk+0x64>)
 8002108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800210a:	68fb      	ldr	r3, [r7, #12]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20018000 	.word	0x20018000
 8002118:	00000400 	.word	0x00000400
 800211c:	2000029c 	.word	0x2000029c
 8002120:	200003f0 	.word	0x200003f0

08002124 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <SystemInit+0x20>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212e:	4a05      	ldr	r2, [pc, #20]	; (8002144 <SystemInit+0x20>)
 8002130:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002134:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002148:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002180 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800214c:	480d      	ldr	r0, [pc, #52]	; (8002184 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800214e:	490e      	ldr	r1, [pc, #56]	; (8002188 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002150:	4a0e      	ldr	r2, [pc, #56]	; (800218c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002154:	e002      	b.n	800215c <LoopCopyDataInit>

08002156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800215a:	3304      	adds	r3, #4

0800215c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800215c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800215e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002160:	d3f9      	bcc.n	8002156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002162:	4a0b      	ldr	r2, [pc, #44]	; (8002190 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002164:	4c0b      	ldr	r4, [pc, #44]	; (8002194 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002168:	e001      	b.n	800216e <LoopFillZerobss>

0800216a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800216a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800216c:	3204      	adds	r2, #4

0800216e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800216e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002170:	d3fb      	bcc.n	800216a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002172:	f7ff ffd7 	bl	8002124 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002176:	f003 fd4d 	bl	8005c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800217a:	f7ff fadb 	bl	8001734 <main>
  bx  lr    
 800217e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002180:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002188:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800218c:	08007ce4 	.word	0x08007ce4
  ldr r2, =_sbss
 8002190:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002194:	200003f0 	.word	0x200003f0

08002198 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002198:	e7fe      	b.n	8002198 <ADC_IRQHandler>
	...

0800219c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <HAL_Init+0x40>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0d      	ldr	r2, [pc, #52]	; (80021dc <HAL_Init+0x40>)
 80021a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_Init+0x40>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <HAL_Init+0x40>)
 80021b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_Init+0x40>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a07      	ldr	r2, [pc, #28]	; (80021dc <HAL_Init+0x40>)
 80021be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c4:	2003      	movs	r0, #3
 80021c6:	f000 f94f 	bl	8002468 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ca:	2000      	movs	r0, #0
 80021cc:	f000 f808 	bl	80021e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d0:	f7ff fdce 	bl	8001d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40023c00 	.word	0x40023c00

080021e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021e8:	4b12      	ldr	r3, [pc, #72]	; (8002234 <HAL_InitTick+0x54>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b12      	ldr	r3, [pc, #72]	; (8002238 <HAL_InitTick+0x58>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4619      	mov	r1, r3
 80021f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 f967 	bl	80024d2 <HAL_SYSTICK_Config>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e00e      	b.n	800222c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b0f      	cmp	r3, #15
 8002212:	d80a      	bhi.n	800222a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002214:	2200      	movs	r2, #0
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	f04f 30ff 	mov.w	r0, #4294967295
 800221c:	f000 f92f 	bl	800247e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002220:	4a06      	ldr	r2, [pc, #24]	; (800223c <HAL_InitTick+0x5c>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	e000      	b.n	800222c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000000 	.word	0x20000000
 8002238:	20000008 	.word	0x20000008
 800223c:	20000004 	.word	0x20000004

08002240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_IncTick+0x20>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_IncTick+0x24>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4413      	add	r3, r2
 8002250:	4a04      	ldr	r2, [pc, #16]	; (8002264 <HAL_IncTick+0x24>)
 8002252:	6013      	str	r3, [r2, #0]
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20000008 	.word	0x20000008
 8002264:	200002a0 	.word	0x200002a0

08002268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return uwTick;
 800226c:	4b03      	ldr	r3, [pc, #12]	; (800227c <HAL_GetTick+0x14>)
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	200002a0 	.word	0x200002a0

08002280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002288:	f7ff ffee 	bl	8002268 <HAL_GetTick>
 800228c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002298:	d005      	beq.n	80022a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <HAL_Delay+0x44>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4413      	add	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022a6:	bf00      	nop
 80022a8:	f7ff ffde 	bl	8002268 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d8f7      	bhi.n	80022a8 <HAL_Delay+0x28>
  {
  }
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000008 	.word	0x20000008

080022c8 <__NVIC_SetPriorityGrouping>:
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <__NVIC_SetPriorityGrouping+0x44>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022e4:	4013      	ands	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fa:	4a04      	ldr	r2, [pc, #16]	; (800230c <__NVIC_SetPriorityGrouping+0x44>)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	60d3      	str	r3, [r2, #12]
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <__NVIC_GetPriorityGrouping>:
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <__NVIC_GetPriorityGrouping+0x18>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	f003 0307 	and.w	r3, r3, #7
}
 800231e:	4618      	mov	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <__NVIC_EnableIRQ>:
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	2b00      	cmp	r3, #0
 800233c:	db0b      	blt.n	8002356 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	f003 021f 	and.w	r2, r3, #31
 8002344:	4907      	ldr	r1, [pc, #28]	; (8002364 <__NVIC_EnableIRQ+0x38>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	2001      	movs	r0, #1
 800234e:	fa00 f202 	lsl.w	r2, r0, r2
 8002352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000e100 	.word	0xe000e100

08002368 <__NVIC_SetPriority>:
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	6039      	str	r1, [r7, #0]
 8002372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	2b00      	cmp	r3, #0
 800237a:	db0a      	blt.n	8002392 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	b2da      	uxtb	r2, r3
 8002380:	490c      	ldr	r1, [pc, #48]	; (80023b4 <__NVIC_SetPriority+0x4c>)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	0112      	lsls	r2, r2, #4
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	440b      	add	r3, r1
 800238c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002390:	e00a      	b.n	80023a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4908      	ldr	r1, [pc, #32]	; (80023b8 <__NVIC_SetPriority+0x50>)
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	3b04      	subs	r3, #4
 80023a0:	0112      	lsls	r2, r2, #4
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	440b      	add	r3, r1
 80023a6:	761a      	strb	r2, [r3, #24]
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000e100 	.word	0xe000e100
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <NVIC_EncodePriority>:
{
 80023bc:	b480      	push	{r7}
 80023be:	b089      	sub	sp, #36	; 0x24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f1c3 0307 	rsb	r3, r3, #7
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	bf28      	it	cs
 80023da:	2304      	movcs	r3, #4
 80023dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3304      	adds	r3, #4
 80023e2:	2b06      	cmp	r3, #6
 80023e4:	d902      	bls.n	80023ec <NVIC_EncodePriority+0x30>
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3b03      	subs	r3, #3
 80023ea:	e000      	b.n	80023ee <NVIC_EncodePriority+0x32>
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f0:	f04f 32ff 	mov.w	r2, #4294967295
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43da      	mvns	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	401a      	ands	r2, r3
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002404:	f04f 31ff 	mov.w	r1, #4294967295
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	43d9      	mvns	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	4313      	orrs	r3, r2
}
 8002416:	4618      	mov	r0, r3
 8002418:	3724      	adds	r7, #36	; 0x24
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
	...

08002424 <SysTick_Config>:
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3b01      	subs	r3, #1
 8002430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002434:	d301      	bcc.n	800243a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002436:	2301      	movs	r3, #1
 8002438:	e00f      	b.n	800245a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <SysTick_Config+0x40>)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002442:	210f      	movs	r1, #15
 8002444:	f04f 30ff 	mov.w	r0, #4294967295
 8002448:	f7ff ff8e 	bl	8002368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <SysTick_Config+0x40>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <SysTick_Config+0x40>)
 8002454:	2207      	movs	r2, #7
 8002456:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	e000e010 	.word	0xe000e010

08002468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ff29 	bl	80022c8 <__NVIC_SetPriorityGrouping>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800247e:	b580      	push	{r7, lr}
 8002480:	b086      	sub	sp, #24
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002490:	f7ff ff3e 	bl	8002310 <__NVIC_GetPriorityGrouping>
 8002494:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	6978      	ldr	r0, [r7, #20]
 800249c:	f7ff ff8e 	bl	80023bc <NVIC_EncodePriority>
 80024a0:	4602      	mov	r2, r0
 80024a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff5d 	bl	8002368 <__NVIC_SetPriority>
}
 80024ae:	bf00      	nop
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	4603      	mov	r3, r0
 80024be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff31 	bl	800232c <__NVIC_EnableIRQ>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ffa2 	bl	8002424 <SysTick_Config>
 80024e0:	4603      	mov	r3, r0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b089      	sub	sp, #36	; 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024fe:	2300      	movs	r3, #0
 8002500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
 8002506:	e159      	b.n	80027bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002508:	2201      	movs	r2, #1
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	429a      	cmp	r2, r3
 8002522:	f040 8148 	bne.w	80027b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b01      	cmp	r3, #1
 8002530:	d005      	beq.n	800253e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800253a:	2b02      	cmp	r3, #2
 800253c:	d130      	bne.n	80025a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	2203      	movs	r2, #3
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002574:	2201      	movs	r2, #1
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	f003 0201 	and.w	r2, r3, #1
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d017      	beq.n	80025dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d123      	bne.n	8002630 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	08da      	lsrs	r2, r3, #3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3208      	adds	r2, #8
 80025f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	220f      	movs	r2, #15
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	08da      	lsrs	r2, r3, #3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3208      	adds	r2, #8
 800262a:	69b9      	ldr	r1, [r7, #24]
 800262c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0203 	and.w	r2, r3, #3
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80a2 	beq.w	80027b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b57      	ldr	r3, [pc, #348]	; (80027d4 <HAL_GPIO_Init+0x2e8>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	4a56      	ldr	r2, [pc, #344]	; (80027d4 <HAL_GPIO_Init+0x2e8>)
 800267c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002680:	6453      	str	r3, [r2, #68]	; 0x44
 8002682:	4b54      	ldr	r3, [pc, #336]	; (80027d4 <HAL_GPIO_Init+0x2e8>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800268e:	4a52      	ldr	r2, [pc, #328]	; (80027d8 <HAL_GPIO_Init+0x2ec>)
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	089b      	lsrs	r3, r3, #2
 8002694:	3302      	adds	r3, #2
 8002696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	220f      	movs	r2, #15
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a49      	ldr	r2, [pc, #292]	; (80027dc <HAL_GPIO_Init+0x2f0>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d019      	beq.n	80026ee <HAL_GPIO_Init+0x202>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a48      	ldr	r2, [pc, #288]	; (80027e0 <HAL_GPIO_Init+0x2f4>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_GPIO_Init+0x1fe>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a47      	ldr	r2, [pc, #284]	; (80027e4 <HAL_GPIO_Init+0x2f8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00d      	beq.n	80026e6 <HAL_GPIO_Init+0x1fa>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a46      	ldr	r2, [pc, #280]	; (80027e8 <HAL_GPIO_Init+0x2fc>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <HAL_GPIO_Init+0x1f6>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a45      	ldr	r2, [pc, #276]	; (80027ec <HAL_GPIO_Init+0x300>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_GPIO_Init+0x1f2>
 80026da:	2304      	movs	r3, #4
 80026dc:	e008      	b.n	80026f0 <HAL_GPIO_Init+0x204>
 80026de:	2307      	movs	r3, #7
 80026e0:	e006      	b.n	80026f0 <HAL_GPIO_Init+0x204>
 80026e2:	2303      	movs	r3, #3
 80026e4:	e004      	b.n	80026f0 <HAL_GPIO_Init+0x204>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e002      	b.n	80026f0 <HAL_GPIO_Init+0x204>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <HAL_GPIO_Init+0x204>
 80026ee:	2300      	movs	r3, #0
 80026f0:	69fa      	ldr	r2, [r7, #28]
 80026f2:	f002 0203 	and.w	r2, r2, #3
 80026f6:	0092      	lsls	r2, r2, #2
 80026f8:	4093      	lsls	r3, r2
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002700:	4935      	ldr	r1, [pc, #212]	; (80027d8 <HAL_GPIO_Init+0x2ec>)
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	089b      	lsrs	r3, r3, #2
 8002706:	3302      	adds	r3, #2
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800270e:	4b38      	ldr	r3, [pc, #224]	; (80027f0 <HAL_GPIO_Init+0x304>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002732:	4a2f      	ldr	r2, [pc, #188]	; (80027f0 <HAL_GPIO_Init+0x304>)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002738:	4b2d      	ldr	r3, [pc, #180]	; (80027f0 <HAL_GPIO_Init+0x304>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800275c:	4a24      	ldr	r2, [pc, #144]	; (80027f0 <HAL_GPIO_Init+0x304>)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002762:	4b23      	ldr	r3, [pc, #140]	; (80027f0 <HAL_GPIO_Init+0x304>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	43db      	mvns	r3, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4013      	ands	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002786:	4a1a      	ldr	r2, [pc, #104]	; (80027f0 <HAL_GPIO_Init+0x304>)
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800278c:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <HAL_GPIO_Init+0x304>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	43db      	mvns	r3, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4013      	ands	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027b0:	4a0f      	ldr	r2, [pc, #60]	; (80027f0 <HAL_GPIO_Init+0x304>)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	3301      	adds	r3, #1
 80027ba:	61fb      	str	r3, [r7, #28]
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	2b0f      	cmp	r3, #15
 80027c0:	f67f aea2 	bls.w	8002508 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027c4:	bf00      	nop
 80027c6:	bf00      	nop
 80027c8:	3724      	adds	r7, #36	; 0x24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40013800 	.word	0x40013800
 80027dc:	40020000 	.word	0x40020000
 80027e0:	40020400 	.word	0x40020400
 80027e4:	40020800 	.word	0x40020800
 80027e8:	40020c00 	.word	0x40020c00
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40013c00 	.word	0x40013c00

080027f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	887b      	ldrh	r3, [r7, #2]
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
 8002810:	e001      	b.n	8002816 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002812:	2300      	movs	r3, #0
 8002814:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002816:	7bfb      	ldrb	r3, [r7, #15]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	807b      	strh	r3, [r7, #2]
 8002830:	4613      	mov	r3, r2
 8002832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002834:	787b      	ldrb	r3, [r7, #1]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800283a:	887a      	ldrh	r2, [r7, #2]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002840:	e003      	b.n	800284a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002842:	887b      	ldrh	r3, [r7, #2]
 8002844:	041a      	lsls	r2, r3, #16
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	619a      	str	r2, [r3, #24]
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e267      	b.n	8002d3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d075      	beq.n	8002962 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002876:	4b88      	ldr	r3, [pc, #544]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	2b04      	cmp	r3, #4
 8002880:	d00c      	beq.n	800289c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002882:	4b85      	ldr	r3, [pc, #532]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800288a:	2b08      	cmp	r3, #8
 800288c:	d112      	bne.n	80028b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800288e:	4b82      	ldr	r3, [pc, #520]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002896:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800289a:	d10b      	bne.n	80028b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289c:	4b7e      	ldr	r3, [pc, #504]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d05b      	beq.n	8002960 <HAL_RCC_OscConfig+0x108>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d157      	bne.n	8002960 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e242      	b.n	8002d3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028bc:	d106      	bne.n	80028cc <HAL_RCC_OscConfig+0x74>
 80028be:	4b76      	ldr	r3, [pc, #472]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a75      	ldr	r2, [pc, #468]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 80028c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	e01d      	b.n	8002908 <HAL_RCC_OscConfig+0xb0>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d4:	d10c      	bne.n	80028f0 <HAL_RCC_OscConfig+0x98>
 80028d6:	4b70      	ldr	r3, [pc, #448]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a6f      	ldr	r2, [pc, #444]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 80028dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	4b6d      	ldr	r3, [pc, #436]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a6c      	ldr	r2, [pc, #432]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 80028e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e00b      	b.n	8002908 <HAL_RCC_OscConfig+0xb0>
 80028f0:	4b69      	ldr	r3, [pc, #420]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a68      	ldr	r2, [pc, #416]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 80028f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	4b66      	ldr	r3, [pc, #408]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a65      	ldr	r2, [pc, #404]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 8002902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d013      	beq.n	8002938 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002910:	f7ff fcaa 	bl	8002268 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002918:	f7ff fca6 	bl	8002268 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b64      	cmp	r3, #100	; 0x64
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e207      	b.n	8002d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292a:	4b5b      	ldr	r3, [pc, #364]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0xc0>
 8002936:	e014      	b.n	8002962 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002938:	f7ff fc96 	bl	8002268 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002940:	f7ff fc92 	bl	8002268 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	; 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e1f3      	b.n	8002d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002952:	4b51      	ldr	r3, [pc, #324]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0xe8>
 800295e:	e000      	b.n	8002962 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d063      	beq.n	8002a36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800296e:	4b4a      	ldr	r3, [pc, #296]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00b      	beq.n	8002992 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800297a:	4b47      	ldr	r3, [pc, #284]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002982:	2b08      	cmp	r3, #8
 8002984:	d11c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002986:	4b44      	ldr	r3, [pc, #272]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d116      	bne.n	80029c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002992:	4b41      	ldr	r3, [pc, #260]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d005      	beq.n	80029aa <HAL_RCC_OscConfig+0x152>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d001      	beq.n	80029aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e1c7      	b.n	8002d3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029aa:	4b3b      	ldr	r3, [pc, #236]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4937      	ldr	r1, [pc, #220]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029be:	e03a      	b.n	8002a36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d020      	beq.n	8002a0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c8:	4b34      	ldr	r3, [pc, #208]	; (8002a9c <HAL_RCC_OscConfig+0x244>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ce:	f7ff fc4b 	bl	8002268 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d6:	f7ff fc47 	bl	8002268 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e1a8      	b.n	8002d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e8:	4b2b      	ldr	r3, [pc, #172]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f4:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4925      	ldr	r1, [pc, #148]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	600b      	str	r3, [r1, #0]
 8002a08:	e015      	b.n	8002a36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a0a:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <HAL_RCC_OscConfig+0x244>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7ff fc2a 	bl	8002268 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a18:	f7ff fc26 	bl	8002268 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e187      	b.n	8002d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a2a:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d036      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d016      	beq.n	8002a78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <HAL_RCC_OscConfig+0x248>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a50:	f7ff fc0a 	bl	8002268 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a58:	f7ff fc06 	bl	8002268 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e167      	b.n	8002d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a6a:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCC_OscConfig+0x200>
 8002a76:	e01b      	b.n	8002ab0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <HAL_RCC_OscConfig+0x248>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7e:	f7ff fbf3 	bl	8002268 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a84:	e00e      	b.n	8002aa4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a86:	f7ff fbef 	bl	8002268 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d907      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e150      	b.n	8002d3a <HAL_RCC_OscConfig+0x4e2>
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	42470000 	.word	0x42470000
 8002aa0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa4:	4b88      	ldr	r3, [pc, #544]	; (8002cc8 <HAL_RCC_OscConfig+0x470>)
 8002aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1ea      	bne.n	8002a86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 8097 	beq.w	8002bec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ac2:	4b81      	ldr	r3, [pc, #516]	; (8002cc8 <HAL_RCC_OscConfig+0x470>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10f      	bne.n	8002aee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	4b7d      	ldr	r3, [pc, #500]	; (8002cc8 <HAL_RCC_OscConfig+0x470>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	4a7c      	ldr	r2, [pc, #496]	; (8002cc8 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002adc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ade:	4b7a      	ldr	r3, [pc, #488]	; (8002cc8 <HAL_RCC_OscConfig+0x470>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aea:	2301      	movs	r3, #1
 8002aec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aee:	4b77      	ldr	r3, [pc, #476]	; (8002ccc <HAL_RCC_OscConfig+0x474>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d118      	bne.n	8002b2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002afa:	4b74      	ldr	r3, [pc, #464]	; (8002ccc <HAL_RCC_OscConfig+0x474>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a73      	ldr	r2, [pc, #460]	; (8002ccc <HAL_RCC_OscConfig+0x474>)
 8002b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b06:	f7ff fbaf 	bl	8002268 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0e:	f7ff fbab 	bl	8002268 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e10c      	b.n	8002d3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b20:	4b6a      	ldr	r3, [pc, #424]	; (8002ccc <HAL_RCC_OscConfig+0x474>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0f0      	beq.n	8002b0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d106      	bne.n	8002b42 <HAL_RCC_OscConfig+0x2ea>
 8002b34:	4b64      	ldr	r3, [pc, #400]	; (8002cc8 <HAL_RCC_OscConfig+0x470>)
 8002b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b38:	4a63      	ldr	r2, [pc, #396]	; (8002cc8 <HAL_RCC_OscConfig+0x470>)
 8002b3a:	f043 0301 	orr.w	r3, r3, #1
 8002b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b40:	e01c      	b.n	8002b7c <HAL_RCC_OscConfig+0x324>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2b05      	cmp	r3, #5
 8002b48:	d10c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x30c>
 8002b4a:	4b5f      	ldr	r3, [pc, #380]	; (8002cc8 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4e:	4a5e      	ldr	r2, [pc, #376]	; (8002cc8 <HAL_RCC_OscConfig+0x470>)
 8002b50:	f043 0304 	orr.w	r3, r3, #4
 8002b54:	6713      	str	r3, [r2, #112]	; 0x70
 8002b56:	4b5c      	ldr	r3, [pc, #368]	; (8002cc8 <HAL_RCC_OscConfig+0x470>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5a:	4a5b      	ldr	r2, [pc, #364]	; (8002cc8 <HAL_RCC_OscConfig+0x470>)
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	6713      	str	r3, [r2, #112]	; 0x70
 8002b62:	e00b      	b.n	8002b7c <HAL_RCC_OscConfig+0x324>
 8002b64:	4b58      	ldr	r3, [pc, #352]	; (8002cc8 <HAL_RCC_OscConfig+0x470>)
 8002b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b68:	4a57      	ldr	r2, [pc, #348]	; (8002cc8 <HAL_RCC_OscConfig+0x470>)
 8002b6a:	f023 0301 	bic.w	r3, r3, #1
 8002b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b70:	4b55      	ldr	r3, [pc, #340]	; (8002cc8 <HAL_RCC_OscConfig+0x470>)
 8002b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b74:	4a54      	ldr	r2, [pc, #336]	; (8002cc8 <HAL_RCC_OscConfig+0x470>)
 8002b76:	f023 0304 	bic.w	r3, r3, #4
 8002b7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d015      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b84:	f7ff fb70 	bl	8002268 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b8c:	f7ff fb6c 	bl	8002268 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e0cb      	b.n	8002d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba2:	4b49      	ldr	r3, [pc, #292]	; (8002cc8 <HAL_RCC_OscConfig+0x470>)
 8002ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0ee      	beq.n	8002b8c <HAL_RCC_OscConfig+0x334>
 8002bae:	e014      	b.n	8002bda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb0:	f7ff fb5a 	bl	8002268 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb6:	e00a      	b.n	8002bce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bb8:	f7ff fb56 	bl	8002268 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e0b5      	b.n	8002d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bce:	4b3e      	ldr	r3, [pc, #248]	; (8002cc8 <HAL_RCC_OscConfig+0x470>)
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1ee      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bda:	7dfb      	ldrb	r3, [r7, #23]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d105      	bne.n	8002bec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be0:	4b39      	ldr	r3, [pc, #228]	; (8002cc8 <HAL_RCC_OscConfig+0x470>)
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	4a38      	ldr	r2, [pc, #224]	; (8002cc8 <HAL_RCC_OscConfig+0x470>)
 8002be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 80a1 	beq.w	8002d38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bf6:	4b34      	ldr	r3, [pc, #208]	; (8002cc8 <HAL_RCC_OscConfig+0x470>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d05c      	beq.n	8002cbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d141      	bne.n	8002c8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0a:	4b31      	ldr	r3, [pc, #196]	; (8002cd0 <HAL_RCC_OscConfig+0x478>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7ff fb2a 	bl	8002268 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c18:	f7ff fb26 	bl	8002268 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e087      	b.n	8002d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2a:	4b27      	ldr	r3, [pc, #156]	; (8002cc8 <HAL_RCC_OscConfig+0x470>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69da      	ldr	r2, [r3, #28]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	019b      	lsls	r3, r3, #6
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	085b      	lsrs	r3, r3, #1
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	041b      	lsls	r3, r3, #16
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	061b      	lsls	r3, r3, #24
 8002c5a:	491b      	ldr	r1, [pc, #108]	; (8002cc8 <HAL_RCC_OscConfig+0x470>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c60:	4b1b      	ldr	r3, [pc, #108]	; (8002cd0 <HAL_RCC_OscConfig+0x478>)
 8002c62:	2201      	movs	r2, #1
 8002c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c66:	f7ff faff 	bl	8002268 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c6e:	f7ff fafb 	bl	8002268 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e05c      	b.n	8002d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c80:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <HAL_RCC_OscConfig+0x470>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0f0      	beq.n	8002c6e <HAL_RCC_OscConfig+0x416>
 8002c8c:	e054      	b.n	8002d38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8e:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <HAL_RCC_OscConfig+0x478>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c94:	f7ff fae8 	bl	8002268 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c9c:	f7ff fae4 	bl	8002268 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e045      	b.n	8002d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cae:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <HAL_RCC_OscConfig+0x470>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0x444>
 8002cba:	e03d      	b.n	8002d38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d107      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e038      	b.n	8002d3a <HAL_RCC_OscConfig+0x4e2>
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	40007000 	.word	0x40007000
 8002cd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cd4:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <HAL_RCC_OscConfig+0x4ec>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d028      	beq.n	8002d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d121      	bne.n	8002d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d11a      	bne.n	8002d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d04:	4013      	ands	r3, r2
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d111      	bne.n	8002d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1a:	085b      	lsrs	r3, r3, #1
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d107      	bne.n	8002d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d001      	beq.n	8002d38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800

08002d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0cc      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d5c:	4b68      	ldr	r3, [pc, #416]	; (8002f00 <HAL_RCC_ClockConfig+0x1b8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d90c      	bls.n	8002d84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6a:	4b65      	ldr	r3, [pc, #404]	; (8002f00 <HAL_RCC_ClockConfig+0x1b8>)
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d72:	4b63      	ldr	r3, [pc, #396]	; (8002f00 <HAL_RCC_ClockConfig+0x1b8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e0b8      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d020      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d9c:	4b59      	ldr	r3, [pc, #356]	; (8002f04 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4a58      	ldr	r2, [pc, #352]	; (8002f04 <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002da6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002db4:	4b53      	ldr	r3, [pc, #332]	; (8002f04 <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	4a52      	ldr	r2, [pc, #328]	; (8002f04 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc0:	4b50      	ldr	r3, [pc, #320]	; (8002f04 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	494d      	ldr	r1, [pc, #308]	; (8002f04 <HAL_RCC_ClockConfig+0x1bc>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d044      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d107      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de6:	4b47      	ldr	r3, [pc, #284]	; (8002f04 <HAL_RCC_ClockConfig+0x1bc>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d119      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e07f      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d003      	beq.n	8002e06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d107      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e06:	4b3f      	ldr	r3, [pc, #252]	; (8002f04 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d109      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e06f      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e16:	4b3b      	ldr	r3, [pc, #236]	; (8002f04 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e067      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e26:	4b37      	ldr	r3, [pc, #220]	; (8002f04 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f023 0203 	bic.w	r2, r3, #3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	4934      	ldr	r1, [pc, #208]	; (8002f04 <HAL_RCC_ClockConfig+0x1bc>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e38:	f7ff fa16 	bl	8002268 <HAL_GetTick>
 8002e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3e:	e00a      	b.n	8002e56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e40:	f7ff fa12 	bl	8002268 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e04f      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e56:	4b2b      	ldr	r3, [pc, #172]	; (8002f04 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 020c 	and.w	r2, r3, #12
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d1eb      	bne.n	8002e40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e68:	4b25      	ldr	r3, [pc, #148]	; (8002f00 <HAL_RCC_ClockConfig+0x1b8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d20c      	bcs.n	8002e90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e76:	4b22      	ldr	r3, [pc, #136]	; (8002f00 <HAL_RCC_ClockConfig+0x1b8>)
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7e:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <HAL_RCC_ClockConfig+0x1b8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d001      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e032      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e9c:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4916      	ldr	r1, [pc, #88]	; (8002f04 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d009      	beq.n	8002ece <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eba:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	490e      	ldr	r1, [pc, #56]	; (8002f04 <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ece:	f000 f821 	bl	8002f14 <HAL_RCC_GetSysClockFreq>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	091b      	lsrs	r3, r3, #4
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	490a      	ldr	r1, [pc, #40]	; (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee0:	5ccb      	ldrb	r3, [r1, r3]
 8002ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee6:	4a09      	ldr	r2, [pc, #36]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002eea:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <HAL_RCC_ClockConfig+0x1c8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff f976 	bl	80021e0 <HAL_InitTick>

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40023c00 	.word	0x40023c00
 8002f04:	40023800 	.word	0x40023800
 8002f08:	0800794c 	.word	0x0800794c
 8002f0c:	20000000 	.word	0x20000000
 8002f10:	20000004 	.word	0x20000004

08002f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f18:	b094      	sub	sp, #80	; 0x50
 8002f1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f20:	2300      	movs	r3, #0
 8002f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f24:	2300      	movs	r3, #0
 8002f26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f2c:	4b79      	ldr	r3, [pc, #484]	; (8003114 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 030c 	and.w	r3, r3, #12
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d00d      	beq.n	8002f54 <HAL_RCC_GetSysClockFreq+0x40>
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	f200 80e1 	bhi.w	8003100 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <HAL_RCC_GetSysClockFreq+0x34>
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d003      	beq.n	8002f4e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f46:	e0db      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f48:	4b73      	ldr	r3, [pc, #460]	; (8003118 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f4c:	e0db      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f4e:	4b73      	ldr	r3, [pc, #460]	; (800311c <HAL_RCC_GetSysClockFreq+0x208>)
 8002f50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f52:	e0d8      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f54:	4b6f      	ldr	r3, [pc, #444]	; (8003114 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f5e:	4b6d      	ldr	r3, [pc, #436]	; (8003114 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d063      	beq.n	8003032 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f6a:	4b6a      	ldr	r3, [pc, #424]	; (8003114 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	099b      	lsrs	r3, r3, #6
 8002f70:	2200      	movs	r2, #0
 8002f72:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f7c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f7e:	2300      	movs	r3, #0
 8002f80:	637b      	str	r3, [r7, #52]	; 0x34
 8002f82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f86:	4622      	mov	r2, r4
 8002f88:	462b      	mov	r3, r5
 8002f8a:	f04f 0000 	mov.w	r0, #0
 8002f8e:	f04f 0100 	mov.w	r1, #0
 8002f92:	0159      	lsls	r1, r3, #5
 8002f94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f98:	0150      	lsls	r0, r2, #5
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4621      	mov	r1, r4
 8002fa0:	1a51      	subs	r1, r2, r1
 8002fa2:	6139      	str	r1, [r7, #16]
 8002fa4:	4629      	mov	r1, r5
 8002fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8002faa:	617b      	str	r3, [r7, #20]
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fb8:	4659      	mov	r1, fp
 8002fba:	018b      	lsls	r3, r1, #6
 8002fbc:	4651      	mov	r1, sl
 8002fbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fc2:	4651      	mov	r1, sl
 8002fc4:	018a      	lsls	r2, r1, #6
 8002fc6:	4651      	mov	r1, sl
 8002fc8:	ebb2 0801 	subs.w	r8, r2, r1
 8002fcc:	4659      	mov	r1, fp
 8002fce:	eb63 0901 	sbc.w	r9, r3, r1
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fe2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fe6:	4690      	mov	r8, r2
 8002fe8:	4699      	mov	r9, r3
 8002fea:	4623      	mov	r3, r4
 8002fec:	eb18 0303 	adds.w	r3, r8, r3
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	462b      	mov	r3, r5
 8002ff4:	eb49 0303 	adc.w	r3, r9, r3
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	f04f 0300 	mov.w	r3, #0
 8003002:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003006:	4629      	mov	r1, r5
 8003008:	024b      	lsls	r3, r1, #9
 800300a:	4621      	mov	r1, r4
 800300c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003010:	4621      	mov	r1, r4
 8003012:	024a      	lsls	r2, r1, #9
 8003014:	4610      	mov	r0, r2
 8003016:	4619      	mov	r1, r3
 8003018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800301a:	2200      	movs	r2, #0
 800301c:	62bb      	str	r3, [r7, #40]	; 0x28
 800301e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003020:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003024:	f7fd fe18 	bl	8000c58 <__aeabi_uldivmod>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4613      	mov	r3, r2
 800302e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003030:	e058      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003032:	4b38      	ldr	r3, [pc, #224]	; (8003114 <HAL_RCC_GetSysClockFreq+0x200>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	099b      	lsrs	r3, r3, #6
 8003038:	2200      	movs	r2, #0
 800303a:	4618      	mov	r0, r3
 800303c:	4611      	mov	r1, r2
 800303e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003042:	623b      	str	r3, [r7, #32]
 8003044:	2300      	movs	r3, #0
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
 8003048:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800304c:	4642      	mov	r2, r8
 800304e:	464b      	mov	r3, r9
 8003050:	f04f 0000 	mov.w	r0, #0
 8003054:	f04f 0100 	mov.w	r1, #0
 8003058:	0159      	lsls	r1, r3, #5
 800305a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800305e:	0150      	lsls	r0, r2, #5
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4641      	mov	r1, r8
 8003066:	ebb2 0a01 	subs.w	sl, r2, r1
 800306a:	4649      	mov	r1, r9
 800306c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800307c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003080:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003084:	ebb2 040a 	subs.w	r4, r2, sl
 8003088:	eb63 050b 	sbc.w	r5, r3, fp
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	00eb      	lsls	r3, r5, #3
 8003096:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800309a:	00e2      	lsls	r2, r4, #3
 800309c:	4614      	mov	r4, r2
 800309e:	461d      	mov	r5, r3
 80030a0:	4643      	mov	r3, r8
 80030a2:	18e3      	adds	r3, r4, r3
 80030a4:	603b      	str	r3, [r7, #0]
 80030a6:	464b      	mov	r3, r9
 80030a8:	eb45 0303 	adc.w	r3, r5, r3
 80030ac:	607b      	str	r3, [r7, #4]
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030ba:	4629      	mov	r1, r5
 80030bc:	028b      	lsls	r3, r1, #10
 80030be:	4621      	mov	r1, r4
 80030c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030c4:	4621      	mov	r1, r4
 80030c6:	028a      	lsls	r2, r1, #10
 80030c8:	4610      	mov	r0, r2
 80030ca:	4619      	mov	r1, r3
 80030cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ce:	2200      	movs	r2, #0
 80030d0:	61bb      	str	r3, [r7, #24]
 80030d2:	61fa      	str	r2, [r7, #28]
 80030d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030d8:	f7fd fdbe 	bl	8000c58 <__aeabi_uldivmod>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4613      	mov	r3, r2
 80030e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030e4:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <HAL_RCC_GetSysClockFreq+0x200>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	0c1b      	lsrs	r3, r3, #16
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	3301      	adds	r3, #1
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80030f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030fe:	e002      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <HAL_RCC_GetSysClockFreq+0x204>)
 8003102:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003108:	4618      	mov	r0, r3
 800310a:	3750      	adds	r7, #80	; 0x50
 800310c:	46bd      	mov	sp, r7
 800310e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003112:	bf00      	nop
 8003114:	40023800 	.word	0x40023800
 8003118:	00f42400 	.word	0x00f42400
 800311c:	007a1200 	.word	0x007a1200

08003120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003124:	4b03      	ldr	r3, [pc, #12]	; (8003134 <HAL_RCC_GetHCLKFreq+0x14>)
 8003126:	681b      	ldr	r3, [r3, #0]
}
 8003128:	4618      	mov	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	20000000 	.word	0x20000000

08003138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800313c:	f7ff fff0 	bl	8003120 <HAL_RCC_GetHCLKFreq>
 8003140:	4602      	mov	r2, r0
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	0a9b      	lsrs	r3, r3, #10
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	4903      	ldr	r1, [pc, #12]	; (800315c <HAL_RCC_GetPCLK1Freq+0x24>)
 800314e:	5ccb      	ldrb	r3, [r1, r3]
 8003150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003154:	4618      	mov	r0, r3
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40023800 	.word	0x40023800
 800315c:	0800795c 	.word	0x0800795c

08003160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003164:	f7ff ffdc 	bl	8003120 <HAL_RCC_GetHCLKFreq>
 8003168:	4602      	mov	r2, r0
 800316a:	4b05      	ldr	r3, [pc, #20]	; (8003180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	0b5b      	lsrs	r3, r3, #13
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	4903      	ldr	r1, [pc, #12]	; (8003184 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003176:	5ccb      	ldrb	r3, [r1, r3]
 8003178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800317c:	4618      	mov	r0, r3
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40023800 	.word	0x40023800
 8003184:	0800795c 	.word	0x0800795c

08003188 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d105      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d035      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80031b0:	4b67      	ldr	r3, [pc, #412]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031b6:	f7ff f857 	bl	8002268 <HAL_GetTick>
 80031ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031bc:	e008      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80031be:	f7ff f853 	bl	8002268 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e0ba      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031d0:	4b60      	ldr	r3, [pc, #384]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1f0      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	019a      	lsls	r2, r3, #6
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	071b      	lsls	r3, r3, #28
 80031e8:	495a      	ldr	r1, [pc, #360]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031f0:	4b57      	ldr	r3, [pc, #348]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031f6:	f7ff f837 	bl	8002268 <HAL_GetTick>
 80031fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031fc:	e008      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80031fe:	f7ff f833 	bl	8002268 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e09a      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003210:	4b50      	ldr	r3, [pc, #320]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f0      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 8083 	beq.w	8003330 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	4b49      	ldr	r3, [pc, #292]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	4a48      	ldr	r2, [pc, #288]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003238:	6413      	str	r3, [r2, #64]	; 0x40
 800323a:	4b46      	ldr	r3, [pc, #280]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003246:	4b44      	ldr	r3, [pc, #272]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a43      	ldr	r2, [pc, #268]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003250:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003252:	f7ff f809 	bl	8002268 <HAL_GetTick>
 8003256:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003258:	e008      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800325a:	f7ff f805 	bl	8002268 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e06c      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800326c:	4b3a      	ldr	r3, [pc, #232]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0f0      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003278:	4b36      	ldr	r3, [pc, #216]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800327a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003280:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d02f      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	429a      	cmp	r2, r3
 8003294:	d028      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003296:	4b2f      	ldr	r3, [pc, #188]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800329e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032a0:	4b2e      	ldr	r3, [pc, #184]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032a6:	4b2d      	ldr	r3, [pc, #180]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80032ac:	4a29      	ldr	r2, [pc, #164]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032b2:	4b28      	ldr	r3, [pc, #160]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d114      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80032be:	f7fe ffd3 	bl	8002268 <HAL_GetTick>
 80032c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c4:	e00a      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c6:	f7fe ffcf 	bl	8002268 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d901      	bls.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e034      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032dc:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0ee      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032f4:	d10d      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80032f6:	4b17      	ldr	r3, [pc, #92]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800330a:	4912      	ldr	r1, [pc, #72]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800330c:	4313      	orrs	r3, r2
 800330e:	608b      	str	r3, [r1, #8]
 8003310:	e005      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003312:	4b10      	ldr	r3, [pc, #64]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	4a0f      	ldr	r2, [pc, #60]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003318:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800331c:	6093      	str	r3, [r2, #8]
 800331e:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003320:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800332a:	490a      	ldr	r1, [pc, #40]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800332c:	4313      	orrs	r3, r2
 800332e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	7c1a      	ldrb	r2, [r3, #16]
 8003340:	4b07      	ldr	r3, [pc, #28]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003342:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	42470068 	.word	0x42470068
 8003354:	40023800 	.word	0x40023800
 8003358:	40007000 	.word	0x40007000
 800335c:	42470e40 	.word	0x42470e40
 8003360:	424711e0 	.word	0x424711e0

08003364 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e066      	b.n	8003448 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	7f5b      	ldrb	r3, [r3, #29]
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d105      	bne.n	8003390 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fe fd18 	bl	8001dc0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	22ca      	movs	r2, #202	; 0xca
 800339c:	625a      	str	r2, [r3, #36]	; 0x24
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2253      	movs	r2, #83	; 0x53
 80033a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fbd8 	bl	8003b5c <RTC_EnterInitMode>
 80033ac:	4603      	mov	r3, r0
 80033ae:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d12c      	bne.n	8003410 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80033c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033c8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6899      	ldr	r1, [r3, #8]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	68d2      	ldr	r2, [r2, #12]
 80033f0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6919      	ldr	r1, [r3, #16]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	041a      	lsls	r2, r3, #16
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fbdf 	bl	8003bca <RTC_ExitInitMode>
 800340c:	4603      	mov	r3, r0
 800340e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d113      	bne.n	800343e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003424:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699a      	ldr	r2, [r3, #24]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	22ff      	movs	r2, #255	; 0xff
 8003444:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003446:	7bfb      	ldrb	r3, [r7, #15]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003450:	b590      	push	{r4, r7, lr}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	7f1b      	ldrb	r3, [r3, #28]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_RTC_SetTime+0x1c>
 8003468:	2302      	movs	r3, #2
 800346a:	e087      	b.n	800357c <HAL_RTC_SetTime+0x12c>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2202      	movs	r2, #2
 8003476:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d126      	bne.n	80034cc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2200      	movs	r2, #0
 8003490:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fbbc 	bl	8003c14 <RTC_ByteToBcd2>
 800349c:	4603      	mov	r3, r0
 800349e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	785b      	ldrb	r3, [r3, #1]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 fbb5 	bl	8003c14 <RTC_ByteToBcd2>
 80034aa:	4603      	mov	r3, r0
 80034ac:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80034ae:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	789b      	ldrb	r3, [r3, #2]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fbad 	bl	8003c14 <RTC_ByteToBcd2>
 80034ba:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80034bc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	78db      	ldrb	r3, [r3, #3]
 80034c4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	e018      	b.n	80034fe <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d102      	bne.n	80034e0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2200      	movs	r2, #0
 80034de:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	785b      	ldrb	r3, [r3, #1]
 80034ea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80034ec:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80034f2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	78db      	ldrb	r3, [r3, #3]
 80034f8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80034fa:	4313      	orrs	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	22ca      	movs	r2, #202	; 0xca
 8003504:	625a      	str	r2, [r3, #36]	; 0x24
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2253      	movs	r2, #83	; 0x53
 800350c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 fb24 	bl	8003b5c <RTC_EnterInitMode>
 8003514:	4603      	mov	r3, r0
 8003516:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003518:	7cfb      	ldrb	r3, [r7, #19]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d120      	bne.n	8003560 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003528:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800352c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800353c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6899      	ldr	r1, [r3, #8]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	431a      	orrs	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 fb37 	bl	8003bca <RTC_ExitInitMode>
 800355c:	4603      	mov	r3, r0
 800355e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003560:	7cfb      	ldrb	r3, [r7, #19]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d102      	bne.n	800356c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	22ff      	movs	r2, #255	; 0xff
 8003572:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	771a      	strb	r2, [r3, #28]

  return status;
 800357a:	7cfb      	ldrb	r3, [r7, #19]
}
 800357c:	4618      	mov	r0, r3
 800357e:	371c      	adds	r7, #28
 8003580:	46bd      	mov	sp, r7
 8003582:	bd90      	pop	{r4, r7, pc}

08003584 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80035b6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80035ba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	0c1b      	lsrs	r3, r3, #16
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	0a1b      	lsrs	r3, r3, #8
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	0d9b      	lsrs	r3, r3, #22
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d11a      	bne.n	8003636 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fb22 	bl	8003c4e <RTC_Bcd2ToByte>
 800360a:	4603      	mov	r3, r0
 800360c:	461a      	mov	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	785b      	ldrb	r3, [r3, #1]
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fb19 	bl	8003c4e <RTC_Bcd2ToByte>
 800361c:	4603      	mov	r3, r0
 800361e:	461a      	mov	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	789b      	ldrb	r3, [r3, #2]
 8003628:	4618      	mov	r0, r3
 800362a:	f000 fb10 	bl	8003c4e <RTC_Bcd2ToByte>
 800362e:	4603      	mov	r3, r0
 8003630:	461a      	mov	r2, r3
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	7f1b      	ldrb	r3, [r3, #28]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_RTC_SetDate+0x1c>
 8003658:	2302      	movs	r3, #2
 800365a:	e071      	b.n	8003740 <HAL_RTC_SetDate+0x100>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2201      	movs	r2, #1
 8003660:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2202      	movs	r2, #2
 8003666:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10e      	bne.n	800368c <HAL_RTC_SetDate+0x4c>
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	785b      	ldrb	r3, [r3, #1]
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b00      	cmp	r3, #0
 8003678:	d008      	beq.n	800368c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	785b      	ldrb	r3, [r3, #1]
 800367e:	f023 0310 	bic.w	r3, r3, #16
 8003682:	b2db      	uxtb	r3, r3
 8003684:	330a      	adds	r3, #10
 8003686:	b2da      	uxtb	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d11c      	bne.n	80036cc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	78db      	ldrb	r3, [r3, #3]
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fabc 	bl	8003c14 <RTC_ByteToBcd2>
 800369c:	4603      	mov	r3, r0
 800369e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	785b      	ldrb	r3, [r3, #1]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fab5 	bl	8003c14 <RTC_ByteToBcd2>
 80036aa:	4603      	mov	r3, r0
 80036ac:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80036ae:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	789b      	ldrb	r3, [r3, #2]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 faad 	bl	8003c14 <RTC_ByteToBcd2>
 80036ba:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80036bc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80036c6:	4313      	orrs	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	e00e      	b.n	80036ea <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	78db      	ldrb	r3, [r3, #3]
 80036d0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	785b      	ldrb	r3, [r3, #1]
 80036d6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80036d8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80036de:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80036e6:	4313      	orrs	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	22ca      	movs	r2, #202	; 0xca
 80036f0:	625a      	str	r2, [r3, #36]	; 0x24
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2253      	movs	r2, #83	; 0x53
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 fa2e 	bl	8003b5c <RTC_EnterInitMode>
 8003700:	4603      	mov	r3, r0
 8003702:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003704:	7cfb      	ldrb	r3, [r7, #19]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10c      	bne.n	8003724 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003714:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003718:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 fa55 	bl	8003bca <RTC_ExitInitMode>
 8003720:	4603      	mov	r3, r0
 8003722:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003724:	7cfb      	ldrb	r3, [r7, #19]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d102      	bne.n	8003730 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	22ff      	movs	r2, #255	; 0xff
 8003736:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	771a      	strb	r2, [r3, #28]

  return status;
 800373e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003740:	4618      	mov	r0, r3
 8003742:	371c      	adds	r7, #28
 8003744:	46bd      	mov	sp, r7
 8003746:	bd90      	pop	{r4, r7, pc}

08003748 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003762:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003766:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	0c1b      	lsrs	r3, r3, #16
 800376c:	b2da      	uxtb	r2, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	0a1b      	lsrs	r3, r3, #8
 8003776:	b2db      	uxtb	r3, r3
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	b2da      	uxtb	r2, r3
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800378a:	b2da      	uxtb	r2, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	0b5b      	lsrs	r3, r3, #13
 8003794:	b2db      	uxtb	r3, r3
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	b2da      	uxtb	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d11a      	bne.n	80037dc <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	78db      	ldrb	r3, [r3, #3]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 fa4f 	bl	8003c4e <RTC_Bcd2ToByte>
 80037b0:	4603      	mov	r3, r0
 80037b2:	461a      	mov	r2, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	785b      	ldrb	r3, [r3, #1]
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 fa46 	bl	8003c4e <RTC_Bcd2ToByte>
 80037c2:	4603      	mov	r3, r0
 80037c4:	461a      	mov	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	789b      	ldrb	r3, [r3, #2]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 fa3d 	bl	8003c4e <RTC_Bcd2ToByte>
 80037d4:	4603      	mov	r3, r0
 80037d6:	461a      	mov	r2, r3
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80037e8:	b590      	push	{r4, r7, lr}
 80037ea:	b089      	sub	sp, #36	; 0x24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80037f4:	4b9a      	ldr	r3, [pc, #616]	; (8003a60 <HAL_RTC_SetAlarm_IT+0x278>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a9a      	ldr	r2, [pc, #616]	; (8003a64 <HAL_RTC_SetAlarm_IT+0x27c>)
 80037fa:	fba2 2303 	umull	r2, r3, r2, r3
 80037fe:	0adb      	lsrs	r3, r3, #11
 8003800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003804:	fb02 f303 	mul.w	r3, r2, r3
 8003808:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	7f1b      	ldrb	r3, [r3, #28]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_RTC_SetAlarm_IT+0x36>
 800381a:	2302      	movs	r3, #2
 800381c:	e11c      	b.n	8003a58 <HAL_RTC_SetAlarm_IT+0x270>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2202      	movs	r2, #2
 8003828:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d137      	bne.n	80038a0 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	d102      	bne.n	8003844 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2200      	movs	r2, #0
 8003842:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f000 f9e3 	bl	8003c14 <RTC_ByteToBcd2>
 800384e:	4603      	mov	r3, r0
 8003850:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	785b      	ldrb	r3, [r3, #1]
 8003856:	4618      	mov	r0, r3
 8003858:	f000 f9dc 	bl	8003c14 <RTC_ByteToBcd2>
 800385c:	4603      	mov	r3, r0
 800385e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003860:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	789b      	ldrb	r3, [r3, #2]
 8003866:	4618      	mov	r0, r3
 8003868:	f000 f9d4 	bl	8003c14 <RTC_ByteToBcd2>
 800386c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800386e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	78db      	ldrb	r3, [r3, #3]
 8003876:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003878:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003882:	4618      	mov	r0, r3
 8003884:	f000 f9c6 	bl	8003c14 <RTC_ByteToBcd2>
 8003888:	4603      	mov	r3, r0
 800388a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800388c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003894:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800389a:	4313      	orrs	r3, r2
 800389c:	61fb      	str	r3, [r7, #28]
 800389e:	e023      	b.n	80038e8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d102      	bne.n	80038b4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2200      	movs	r2, #0
 80038b2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	785b      	ldrb	r3, [r3, #1]
 80038be:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80038c0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80038c6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	78db      	ldrb	r3, [r3, #3]
 80038cc:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80038ce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038d6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80038d8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80038de:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	22ca      	movs	r2, #202	; 0xca
 80038fa:	625a      	str	r2, [r3, #36]	; 0x24
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2253      	movs	r2, #83	; 0x53
 8003902:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800390c:	d141      	bne.n	8003992 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800391c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	b2da      	uxtb	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800392e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	1e5a      	subs	r2, r3, #1
 8003934:	617a      	str	r2, [r7, #20]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10b      	bne.n	8003952 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	22ff      	movs	r2, #255	; 0xff
 8003940:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2203      	movs	r2, #3
 8003946:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e082      	b.n	8003a58 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0e7      	beq.n	8003930 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	69fa      	ldr	r2, [r7, #28]
 8003966:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800397e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800398e:	609a      	str	r2, [r3, #8]
 8003990:	e04b      	b.n	8003a2a <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039a0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f462 7220 	orn	r2, r2, #640	; 0x280
 80039b2:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80039b4:	4b2a      	ldr	r3, [pc, #168]	; (8003a60 <HAL_RTC_SetAlarm_IT+0x278>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a2a      	ldr	r2, [pc, #168]	; (8003a64 <HAL_RTC_SetAlarm_IT+0x27c>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	0adb      	lsrs	r3, r3, #11
 80039c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039c4:	fb02 f303 	mul.w	r3, r2, r3
 80039c8:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	1e5a      	subs	r2, r3, #1
 80039ce:	617a      	str	r2, [r7, #20]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10b      	bne.n	80039ec <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	22ff      	movs	r2, #255	; 0xff
 80039da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2203      	movs	r2, #3
 80039e0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e035      	b.n	8003a58 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0e7      	beq.n	80039ca <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69fa      	ldr	r2, [r7, #28]
 8003a00:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a18:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a28:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003a2a:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <HAL_RTC_SetAlarm_IT+0x280>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a0e      	ldr	r2, [pc, #56]	; (8003a68 <HAL_RTC_SetAlarm_IT+0x280>)
 8003a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a34:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003a36:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <HAL_RTC_SetAlarm_IT+0x280>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	4a0b      	ldr	r2, [pc, #44]	; (8003a68 <HAL_RTC_SetAlarm_IT+0x280>)
 8003a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a40:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	22ff      	movs	r2, #255	; 0xff
 8003a48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3724      	adds	r7, #36	; 0x24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd90      	pop	{r4, r7, pc}
 8003a60:	20000000 	.word	0x20000000
 8003a64:	10624dd3 	.word	0x10624dd3
 8003a68:	40013c00 	.word	0x40013c00

08003a6c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d012      	beq.n	8003aa8 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00b      	beq.n	8003aa8 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f831 	bl	8003af8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003aa6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d012      	beq.n	8003adc <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00b      	beq.n	8003adc <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f8de 	bl	8003c86 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003ada:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <HAL_RTC_AlarmIRQHandler+0x88>)
 8003ade:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ae2:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	775a      	strb	r2, [r3, #29]
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40013c00 	.word	0x40013c00

08003af8 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b26:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b28:	f7fe fb9e 	bl	8002268 <HAL_GetTick>
 8003b2c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b2e:	e009      	b.n	8003b44 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b30:	f7fe fb9a 	bl	8002268 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b3e:	d901      	bls.n	8003b44 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e007      	b.n	8003b54 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0ee      	beq.n	8003b30 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d122      	bne.n	8003bc0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b88:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b8a:	f7fe fb6d 	bl	8002268 <HAL_GetTick>
 8003b8e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003b90:	e00c      	b.n	8003bac <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b92:	f7fe fb69 	bl	8002268 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ba0:	d904      	bls.n	8003bac <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2204      	movs	r2, #4
 8003ba6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d102      	bne.n	8003bc0 <RTC_EnterInitMode+0x64>
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d1e8      	bne.n	8003b92 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b084      	sub	sp, #16
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003be4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10a      	bne.n	8003c0a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff ff89 	bl	8003b0c <HAL_RTC_WaitForSynchro>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d004      	beq.n	8003c0a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2204      	movs	r2, #4
 8003c04:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003c22:	e005      	b.n	8003c30 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
 8003c26:	3301      	adds	r3, #1
 8003c28:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	3b0a      	subs	r3, #10
 8003c2e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	2b09      	cmp	r3, #9
 8003c34:	d8f6      	bhi.n	8003c24 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	b2db      	uxtb	r3, r3
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b085      	sub	sp, #20
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	4603      	mov	r3, r0
 8003c56:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003c5c:	79fb      	ldrb	r3, [r7, #7]
 8003c5e:	091b      	lsrs	r3, r3, #4
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	0092      	lsls	r2, r2, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8003c6c:	79fb      	ldrb	r3, [r7, #7]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	4413      	add	r3, r2
 8003c78:	b2db      	uxtb	r3, r3
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b082      	sub	sp, #8
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e041      	b.n	8003d30 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d106      	bne.n	8003cc6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7fe f8b1 	bl	8001e28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4610      	mov	r0, r2
 8003cda:	f000 fa11 	bl	8004100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e041      	b.n	8003dce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d106      	bne.n	8003d64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f839 	bl	8003dd6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3304      	adds	r3, #4
 8003d74:	4619      	mov	r1, r3
 8003d76:	4610      	mov	r0, r2
 8003d78:	f000 f9c2 	bl	8004100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
	...

08003dec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e06:	2302      	movs	r3, #2
 8003e08:	e0ae      	b.n	8003f68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b0c      	cmp	r3, #12
 8003e16:	f200 809f 	bhi.w	8003f58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e1a:	a201      	add	r2, pc, #4	; (adr r2, 8003e20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e20:	08003e55 	.word	0x08003e55
 8003e24:	08003f59 	.word	0x08003f59
 8003e28:	08003f59 	.word	0x08003f59
 8003e2c:	08003f59 	.word	0x08003f59
 8003e30:	08003e95 	.word	0x08003e95
 8003e34:	08003f59 	.word	0x08003f59
 8003e38:	08003f59 	.word	0x08003f59
 8003e3c:	08003f59 	.word	0x08003f59
 8003e40:	08003ed7 	.word	0x08003ed7
 8003e44:	08003f59 	.word	0x08003f59
 8003e48:	08003f59 	.word	0x08003f59
 8003e4c:	08003f59 	.word	0x08003f59
 8003e50:	08003f17 	.word	0x08003f17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68b9      	ldr	r1, [r7, #8]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 f9d0 	bl	8004200 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699a      	ldr	r2, [r3, #24]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0208 	orr.w	r2, r2, #8
 8003e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699a      	ldr	r2, [r3, #24]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0204 	bic.w	r2, r2, #4
 8003e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6999      	ldr	r1, [r3, #24]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	619a      	str	r2, [r3, #24]
      break;
 8003e92:	e064      	b.n	8003f5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68b9      	ldr	r1, [r7, #8]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fa16 	bl	80042cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699a      	ldr	r2, [r3, #24]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6999      	ldr	r1, [r3, #24]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	021a      	lsls	r2, r3, #8
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	619a      	str	r2, [r3, #24]
      break;
 8003ed4:	e043      	b.n	8003f5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68b9      	ldr	r1, [r7, #8]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 fa61 	bl	80043a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	69da      	ldr	r2, [r3, #28]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 0208 	orr.w	r2, r2, #8
 8003ef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69da      	ldr	r2, [r3, #28]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0204 	bic.w	r2, r2, #4
 8003f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69d9      	ldr	r1, [r3, #28]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	61da      	str	r2, [r3, #28]
      break;
 8003f14:	e023      	b.n	8003f5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68b9      	ldr	r1, [r7, #8]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 faab 	bl	8004478 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	69da      	ldr	r2, [r3, #28]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	69d9      	ldr	r1, [r3, #28]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	021a      	lsls	r2, r3, #8
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	61da      	str	r2, [r3, #28]
      break;
 8003f56:	e002      	b.n	8003f5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d101      	bne.n	8003f8c <HAL_TIM_ConfigClockSource+0x1c>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	e0b4      	b.n	80040f6 <HAL_TIM_ConfigClockSource+0x186>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc4:	d03e      	beq.n	8004044 <HAL_TIM_ConfigClockSource+0xd4>
 8003fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fca:	f200 8087 	bhi.w	80040dc <HAL_TIM_ConfigClockSource+0x16c>
 8003fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd2:	f000 8086 	beq.w	80040e2 <HAL_TIM_ConfigClockSource+0x172>
 8003fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fda:	d87f      	bhi.n	80040dc <HAL_TIM_ConfigClockSource+0x16c>
 8003fdc:	2b70      	cmp	r3, #112	; 0x70
 8003fde:	d01a      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0xa6>
 8003fe0:	2b70      	cmp	r3, #112	; 0x70
 8003fe2:	d87b      	bhi.n	80040dc <HAL_TIM_ConfigClockSource+0x16c>
 8003fe4:	2b60      	cmp	r3, #96	; 0x60
 8003fe6:	d050      	beq.n	800408a <HAL_TIM_ConfigClockSource+0x11a>
 8003fe8:	2b60      	cmp	r3, #96	; 0x60
 8003fea:	d877      	bhi.n	80040dc <HAL_TIM_ConfigClockSource+0x16c>
 8003fec:	2b50      	cmp	r3, #80	; 0x50
 8003fee:	d03c      	beq.n	800406a <HAL_TIM_ConfigClockSource+0xfa>
 8003ff0:	2b50      	cmp	r3, #80	; 0x50
 8003ff2:	d873      	bhi.n	80040dc <HAL_TIM_ConfigClockSource+0x16c>
 8003ff4:	2b40      	cmp	r3, #64	; 0x40
 8003ff6:	d058      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0x13a>
 8003ff8:	2b40      	cmp	r3, #64	; 0x40
 8003ffa:	d86f      	bhi.n	80040dc <HAL_TIM_ConfigClockSource+0x16c>
 8003ffc:	2b30      	cmp	r3, #48	; 0x30
 8003ffe:	d064      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x15a>
 8004000:	2b30      	cmp	r3, #48	; 0x30
 8004002:	d86b      	bhi.n	80040dc <HAL_TIM_ConfigClockSource+0x16c>
 8004004:	2b20      	cmp	r3, #32
 8004006:	d060      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x15a>
 8004008:	2b20      	cmp	r3, #32
 800400a:	d867      	bhi.n	80040dc <HAL_TIM_ConfigClockSource+0x16c>
 800400c:	2b00      	cmp	r3, #0
 800400e:	d05c      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x15a>
 8004010:	2b10      	cmp	r3, #16
 8004012:	d05a      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x15a>
 8004014:	e062      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	6899      	ldr	r1, [r3, #8]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f000 faf1 	bl	800460c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004038:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	609a      	str	r2, [r3, #8]
      break;
 8004042:	e04f      	b.n	80040e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6818      	ldr	r0, [r3, #0]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	6899      	ldr	r1, [r3, #8]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f000 fada 	bl	800460c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004066:	609a      	str	r2, [r3, #8]
      break;
 8004068:	e03c      	b.n	80040e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	6859      	ldr	r1, [r3, #4]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	461a      	mov	r2, r3
 8004078:	f000 fa4e 	bl	8004518 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2150      	movs	r1, #80	; 0x50
 8004082:	4618      	mov	r0, r3
 8004084:	f000 faa7 	bl	80045d6 <TIM_ITRx_SetConfig>
      break;
 8004088:	e02c      	b.n	80040e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	6859      	ldr	r1, [r3, #4]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	461a      	mov	r2, r3
 8004098:	f000 fa6d 	bl	8004576 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2160      	movs	r1, #96	; 0x60
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fa97 	bl	80045d6 <TIM_ITRx_SetConfig>
      break;
 80040a8:	e01c      	b.n	80040e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6818      	ldr	r0, [r3, #0]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	6859      	ldr	r1, [r3, #4]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	461a      	mov	r2, r3
 80040b8:	f000 fa2e 	bl	8004518 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2140      	movs	r1, #64	; 0x40
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fa87 	bl	80045d6 <TIM_ITRx_SetConfig>
      break;
 80040c8:	e00c      	b.n	80040e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4619      	mov	r1, r3
 80040d4:	4610      	mov	r0, r2
 80040d6:	f000 fa7e 	bl	80045d6 <TIM_ITRx_SetConfig>
      break;
 80040da:	e003      	b.n	80040e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	73fb      	strb	r3, [r7, #15]
      break;
 80040e0:	e000      	b.n	80040e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a34      	ldr	r2, [pc, #208]	; (80041e4 <TIM_Base_SetConfig+0xe4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d00f      	beq.n	8004138 <TIM_Base_SetConfig+0x38>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411e:	d00b      	beq.n	8004138 <TIM_Base_SetConfig+0x38>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a31      	ldr	r2, [pc, #196]	; (80041e8 <TIM_Base_SetConfig+0xe8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d007      	beq.n	8004138 <TIM_Base_SetConfig+0x38>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a30      	ldr	r2, [pc, #192]	; (80041ec <TIM_Base_SetConfig+0xec>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d003      	beq.n	8004138 <TIM_Base_SetConfig+0x38>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a2f      	ldr	r2, [pc, #188]	; (80041f0 <TIM_Base_SetConfig+0xf0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d108      	bne.n	800414a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a25      	ldr	r2, [pc, #148]	; (80041e4 <TIM_Base_SetConfig+0xe4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d01b      	beq.n	800418a <TIM_Base_SetConfig+0x8a>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004158:	d017      	beq.n	800418a <TIM_Base_SetConfig+0x8a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a22      	ldr	r2, [pc, #136]	; (80041e8 <TIM_Base_SetConfig+0xe8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d013      	beq.n	800418a <TIM_Base_SetConfig+0x8a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a21      	ldr	r2, [pc, #132]	; (80041ec <TIM_Base_SetConfig+0xec>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d00f      	beq.n	800418a <TIM_Base_SetConfig+0x8a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a20      	ldr	r2, [pc, #128]	; (80041f0 <TIM_Base_SetConfig+0xf0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d00b      	beq.n	800418a <TIM_Base_SetConfig+0x8a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a1f      	ldr	r2, [pc, #124]	; (80041f4 <TIM_Base_SetConfig+0xf4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d007      	beq.n	800418a <TIM_Base_SetConfig+0x8a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a1e      	ldr	r2, [pc, #120]	; (80041f8 <TIM_Base_SetConfig+0xf8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d003      	beq.n	800418a <TIM_Base_SetConfig+0x8a>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a1d      	ldr	r2, [pc, #116]	; (80041fc <TIM_Base_SetConfig+0xfc>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d108      	bne.n	800419c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4313      	orrs	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a08      	ldr	r2, [pc, #32]	; (80041e4 <TIM_Base_SetConfig+0xe4>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d103      	bne.n	80041d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	615a      	str	r2, [r3, #20]
}
 80041d6:	bf00      	nop
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40010000 	.word	0x40010000
 80041e8:	40000400 	.word	0x40000400
 80041ec:	40000800 	.word	0x40000800
 80041f0:	40000c00 	.word	0x40000c00
 80041f4:	40014000 	.word	0x40014000
 80041f8:	40014400 	.word	0x40014400
 80041fc:	40014800 	.word	0x40014800

08004200 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	f023 0201 	bic.w	r2, r3, #1
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0303 	bic.w	r3, r3, #3
 8004236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f023 0302 	bic.w	r3, r3, #2
 8004248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a1c      	ldr	r2, [pc, #112]	; (80042c8 <TIM_OC1_SetConfig+0xc8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d10c      	bne.n	8004276 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f023 0308 	bic.w	r3, r3, #8
 8004262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	4313      	orrs	r3, r2
 800426c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f023 0304 	bic.w	r3, r3, #4
 8004274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a13      	ldr	r2, [pc, #76]	; (80042c8 <TIM_OC1_SetConfig+0xc8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d111      	bne.n	80042a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800428c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	621a      	str	r2, [r3, #32]
}
 80042bc:	bf00      	nop
 80042be:	371c      	adds	r7, #28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	40010000 	.word	0x40010000

080042cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	f023 0210 	bic.w	r2, r3, #16
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	021b      	lsls	r3, r3, #8
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	4313      	orrs	r3, r2
 800430e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f023 0320 	bic.w	r3, r3, #32
 8004316:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	4313      	orrs	r3, r2
 8004322:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a1e      	ldr	r2, [pc, #120]	; (80043a0 <TIM_OC2_SetConfig+0xd4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d10d      	bne.n	8004348 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4313      	orrs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004346:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a15      	ldr	r2, [pc, #84]	; (80043a0 <TIM_OC2_SetConfig+0xd4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d113      	bne.n	8004378 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004356:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800435e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	621a      	str	r2, [r3, #32]
}
 8004392:	bf00      	nop
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40010000 	.word	0x40010000

080043a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0303 	bic.w	r3, r3, #3
 80043da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	021b      	lsls	r3, r3, #8
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a1d      	ldr	r2, [pc, #116]	; (8004474 <TIM_OC3_SetConfig+0xd0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d10d      	bne.n	800441e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004408:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	021b      	lsls	r3, r3, #8
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	4313      	orrs	r3, r2
 8004414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800441c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a14      	ldr	r2, [pc, #80]	; (8004474 <TIM_OC3_SetConfig+0xd0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d113      	bne.n	800444e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800442c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	011b      	lsls	r3, r3, #4
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	4313      	orrs	r3, r2
 800444c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	621a      	str	r2, [r3, #32]
}
 8004468:	bf00      	nop
 800446a:	371c      	adds	r7, #28
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	40010000 	.word	0x40010000

08004478 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	021b      	lsls	r3, r3, #8
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	031b      	lsls	r3, r3, #12
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a10      	ldr	r2, [pc, #64]	; (8004514 <TIM_OC4_SetConfig+0x9c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d109      	bne.n	80044ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	019b      	lsls	r3, r3, #6
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	621a      	str	r2, [r3, #32]
}
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	40010000 	.word	0x40010000

08004518 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	f023 0201 	bic.w	r2, r3, #1
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004542:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4313      	orrs	r3, r2
 800454c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f023 030a 	bic.w	r3, r3, #10
 8004554:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	4313      	orrs	r3, r2
 800455c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	621a      	str	r2, [r3, #32]
}
 800456a:	bf00      	nop
 800456c:	371c      	adds	r7, #28
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004576:	b480      	push	{r7}
 8004578:	b087      	sub	sp, #28
 800457a:	af00      	add	r7, sp, #0
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	f023 0210 	bic.w	r2, r3, #16
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	031b      	lsls	r3, r3, #12
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	621a      	str	r2, [r3, #32]
}
 80045ca:	bf00      	nop
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b085      	sub	sp, #20
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f043 0307 	orr.w	r3, r3, #7
 80045f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	609a      	str	r2, [r3, #8]
}
 8004600:	bf00      	nop
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004626:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	021a      	lsls	r2, r3, #8
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	431a      	orrs	r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4313      	orrs	r3, r2
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	4313      	orrs	r3, r2
 8004638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	609a      	str	r2, [r3, #8]
}
 8004640:	bf00      	nop
 8004642:	371c      	adds	r7, #28
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004660:	2302      	movs	r3, #2
 8004662:	e050      	b.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a1c      	ldr	r2, [pc, #112]	; (8004714 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d018      	beq.n	80046da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b0:	d013      	beq.n	80046da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a18      	ldr	r2, [pc, #96]	; (8004718 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d00e      	beq.n	80046da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a16      	ldr	r2, [pc, #88]	; (800471c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d009      	beq.n	80046da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a15      	ldr	r2, [pc, #84]	; (8004720 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d004      	beq.n	80046da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a13      	ldr	r2, [pc, #76]	; (8004724 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d10c      	bne.n	80046f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	40010000 	.word	0x40010000
 8004718:	40000400 	.word	0x40000400
 800471c:	40000800 	.word	0x40000800
 8004720:	40000c00 	.word	0x40000c00
 8004724:	40014000 	.word	0x40014000

08004728 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e03f      	b.n	80047ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fd fbc2 	bl	8001ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2224      	movs	r2, #36	; 0x24
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800476a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f929 	bl	80049c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004780:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695a      	ldr	r2, [r3, #20]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004790:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b08a      	sub	sp, #40	; 0x28
 80047c6:	af02      	add	r7, sp, #8
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	603b      	str	r3, [r7, #0]
 80047ce:	4613      	mov	r3, r2
 80047d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d17c      	bne.n	80048dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_UART_Transmit+0x2c>
 80047e8:	88fb      	ldrh	r3, [r7, #6]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e075      	b.n	80048de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_UART_Transmit+0x3e>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e06e      	b.n	80048de <HAL_UART_Transmit+0x11c>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2221      	movs	r2, #33	; 0x21
 8004812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004816:	f7fd fd27 	bl	8002268 <HAL_GetTick>
 800481a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	88fa      	ldrh	r2, [r7, #6]
 8004820:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	88fa      	ldrh	r2, [r7, #6]
 8004826:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004830:	d108      	bne.n	8004844 <HAL_UART_Transmit+0x82>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d104      	bne.n	8004844 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800483a:	2300      	movs	r3, #0
 800483c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	e003      	b.n	800484c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004848:	2300      	movs	r3, #0
 800484a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004854:	e02a      	b.n	80048ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2200      	movs	r2, #0
 800485e:	2180      	movs	r1, #128	; 0x80
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 f840 	bl	80048e6 <UART_WaitOnFlagUntilTimeout>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e036      	b.n	80048de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10b      	bne.n	800488e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004884:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	3302      	adds	r3, #2
 800488a:	61bb      	str	r3, [r7, #24]
 800488c:	e007      	b.n	800489e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	781a      	ldrb	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	3301      	adds	r3, #1
 800489c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1cf      	bne.n	8004856 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2200      	movs	r2, #0
 80048be:	2140      	movs	r1, #64	; 0x40
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f810 	bl	80048e6 <UART_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e006      	b.n	80048de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048d8:	2300      	movs	r3, #0
 80048da:	e000      	b.n	80048de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048dc:	2302      	movs	r3, #2
  }
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3720      	adds	r7, #32
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b090      	sub	sp, #64	; 0x40
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	603b      	str	r3, [r7, #0]
 80048f2:	4613      	mov	r3, r2
 80048f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f6:	e050      	b.n	800499a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fe:	d04c      	beq.n	800499a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004902:	2b00      	cmp	r3, #0
 8004904:	d007      	beq.n	8004916 <UART_WaitOnFlagUntilTimeout+0x30>
 8004906:	f7fd fcaf 	bl	8002268 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004912:	429a      	cmp	r2, r3
 8004914:	d241      	bcs.n	800499a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	330c      	adds	r3, #12
 800491c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004920:	e853 3f00 	ldrex	r3, [r3]
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800492c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	330c      	adds	r3, #12
 8004934:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004936:	637a      	str	r2, [r7, #52]	; 0x34
 8004938:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800493c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800493e:	e841 2300 	strex	r3, r2, [r1]
 8004942:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1e5      	bne.n	8004916 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3314      	adds	r3, #20
 8004950:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	e853 3f00 	ldrex	r3, [r3]
 8004958:	613b      	str	r3, [r7, #16]
   return(result);
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f023 0301 	bic.w	r3, r3, #1
 8004960:	63bb      	str	r3, [r7, #56]	; 0x38
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	3314      	adds	r3, #20
 8004968:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800496a:	623a      	str	r2, [r7, #32]
 800496c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	69f9      	ldr	r1, [r7, #28]
 8004970:	6a3a      	ldr	r2, [r7, #32]
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	61bb      	str	r3, [r7, #24]
   return(result);
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e5      	bne.n	800494a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2220      	movs	r2, #32
 8004982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e00f      	b.n	80049ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	4013      	ands	r3, r2
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	bf0c      	ite	eq
 80049aa:	2301      	moveq	r3, #1
 80049ac:	2300      	movne	r3, #0
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	461a      	mov	r2, r3
 80049b2:	79fb      	ldrb	r3, [r7, #7]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d09f      	beq.n	80048f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3740      	adds	r7, #64	; 0x40
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c8:	b0c0      	sub	sp, #256	; 0x100
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e0:	68d9      	ldr	r1, [r3, #12]
 80049e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	ea40 0301 	orr.w	r3, r0, r1
 80049ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a1c:	f021 010c 	bic.w	r1, r1, #12
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a2a:	430b      	orrs	r3, r1
 8004a2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3e:	6999      	ldr	r1, [r3, #24]
 8004a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	ea40 0301 	orr.w	r3, r0, r1
 8004a4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	4b8f      	ldr	r3, [pc, #572]	; (8004c90 <UART_SetConfig+0x2cc>)
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d005      	beq.n	8004a64 <UART_SetConfig+0xa0>
 8004a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	4b8d      	ldr	r3, [pc, #564]	; (8004c94 <UART_SetConfig+0x2d0>)
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d104      	bne.n	8004a6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a64:	f7fe fb7c 	bl	8003160 <HAL_RCC_GetPCLK2Freq>
 8004a68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a6c:	e003      	b.n	8004a76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a6e:	f7fe fb63 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 8004a72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a80:	f040 810c 	bne.w	8004c9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a96:	4622      	mov	r2, r4
 8004a98:	462b      	mov	r3, r5
 8004a9a:	1891      	adds	r1, r2, r2
 8004a9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a9e:	415b      	adcs	r3, r3
 8004aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aa2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	eb12 0801 	adds.w	r8, r2, r1
 8004aac:	4629      	mov	r1, r5
 8004aae:	eb43 0901 	adc.w	r9, r3, r1
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ac6:	4690      	mov	r8, r2
 8004ac8:	4699      	mov	r9, r3
 8004aca:	4623      	mov	r3, r4
 8004acc:	eb18 0303 	adds.w	r3, r8, r3
 8004ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ad4:	462b      	mov	r3, r5
 8004ad6:	eb49 0303 	adc.w	r3, r9, r3
 8004ada:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004aea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004aee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004af2:	460b      	mov	r3, r1
 8004af4:	18db      	adds	r3, r3, r3
 8004af6:	653b      	str	r3, [r7, #80]	; 0x50
 8004af8:	4613      	mov	r3, r2
 8004afa:	eb42 0303 	adc.w	r3, r2, r3
 8004afe:	657b      	str	r3, [r7, #84]	; 0x54
 8004b00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b08:	f7fc f8a6 	bl	8000c58 <__aeabi_uldivmod>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4b61      	ldr	r3, [pc, #388]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004b12:	fba3 2302 	umull	r2, r3, r3, r2
 8004b16:	095b      	lsrs	r3, r3, #5
 8004b18:	011c      	lsls	r4, r3, #4
 8004b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	464b      	mov	r3, r9
 8004b30:	1891      	adds	r1, r2, r2
 8004b32:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b34:	415b      	adcs	r3, r3
 8004b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	eb12 0a01 	adds.w	sl, r2, r1
 8004b42:	4649      	mov	r1, r9
 8004b44:	eb43 0b01 	adc.w	fp, r3, r1
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b5c:	4692      	mov	sl, r2
 8004b5e:	469b      	mov	fp, r3
 8004b60:	4643      	mov	r3, r8
 8004b62:	eb1a 0303 	adds.w	r3, sl, r3
 8004b66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b6a:	464b      	mov	r3, r9
 8004b6c:	eb4b 0303 	adc.w	r3, fp, r3
 8004b70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	18db      	adds	r3, r3, r3
 8004b8c:	643b      	str	r3, [r7, #64]	; 0x40
 8004b8e:	4613      	mov	r3, r2
 8004b90:	eb42 0303 	adc.w	r3, r2, r3
 8004b94:	647b      	str	r3, [r7, #68]	; 0x44
 8004b96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b9e:	f7fc f85b 	bl	8000c58 <__aeabi_uldivmod>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	4b3b      	ldr	r3, [pc, #236]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004baa:	fba3 2301 	umull	r2, r3, r3, r1
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	2264      	movs	r2, #100	; 0x64
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	1acb      	subs	r3, r1, r3
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004bbe:	4b36      	ldr	r3, [pc, #216]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004bc0:	fba3 2302 	umull	r2, r3, r3, r2
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bcc:	441c      	add	r4, r3
 8004bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bd8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004bdc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004be0:	4642      	mov	r2, r8
 8004be2:	464b      	mov	r3, r9
 8004be4:	1891      	adds	r1, r2, r2
 8004be6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004be8:	415b      	adcs	r3, r3
 8004bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bf0:	4641      	mov	r1, r8
 8004bf2:	1851      	adds	r1, r2, r1
 8004bf4:	6339      	str	r1, [r7, #48]	; 0x30
 8004bf6:	4649      	mov	r1, r9
 8004bf8:	414b      	adcs	r3, r1
 8004bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c08:	4659      	mov	r1, fp
 8004c0a:	00cb      	lsls	r3, r1, #3
 8004c0c:	4651      	mov	r1, sl
 8004c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c12:	4651      	mov	r1, sl
 8004c14:	00ca      	lsls	r2, r1, #3
 8004c16:	4610      	mov	r0, r2
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	4642      	mov	r2, r8
 8004c1e:	189b      	adds	r3, r3, r2
 8004c20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c24:	464b      	mov	r3, r9
 8004c26:	460a      	mov	r2, r1
 8004c28:	eb42 0303 	adc.w	r3, r2, r3
 8004c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c44:	460b      	mov	r3, r1
 8004c46:	18db      	adds	r3, r3, r3
 8004c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	eb42 0303 	adc.w	r3, r2, r3
 8004c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c5a:	f7fb fffd 	bl	8000c58 <__aeabi_uldivmod>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004c64:	fba3 1302 	umull	r1, r3, r3, r2
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	2164      	movs	r1, #100	; 0x64
 8004c6c:	fb01 f303 	mul.w	r3, r1, r3
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	3332      	adds	r3, #50	; 0x32
 8004c76:	4a08      	ldr	r2, [pc, #32]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004c78:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	f003 0207 	and.w	r2, r3, #7
 8004c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4422      	add	r2, r4
 8004c8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c8c:	e106      	b.n	8004e9c <UART_SetConfig+0x4d8>
 8004c8e:	bf00      	nop
 8004c90:	40011000 	.word	0x40011000
 8004c94:	40011400 	.word	0x40011400
 8004c98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ca6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004caa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004cae:	4642      	mov	r2, r8
 8004cb0:	464b      	mov	r3, r9
 8004cb2:	1891      	adds	r1, r2, r2
 8004cb4:	6239      	str	r1, [r7, #32]
 8004cb6:	415b      	adcs	r3, r3
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cbe:	4641      	mov	r1, r8
 8004cc0:	1854      	adds	r4, r2, r1
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	eb43 0501 	adc.w	r5, r3, r1
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	00eb      	lsls	r3, r5, #3
 8004cd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cd6:	00e2      	lsls	r2, r4, #3
 8004cd8:	4614      	mov	r4, r2
 8004cda:	461d      	mov	r5, r3
 8004cdc:	4643      	mov	r3, r8
 8004cde:	18e3      	adds	r3, r4, r3
 8004ce0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	eb45 0303 	adc.w	r3, r5, r3
 8004cea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	008b      	lsls	r3, r1, #2
 8004d0e:	4621      	mov	r1, r4
 8004d10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d14:	4621      	mov	r1, r4
 8004d16:	008a      	lsls	r2, r1, #2
 8004d18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d1c:	f7fb ff9c 	bl	8000c58 <__aeabi_uldivmod>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4b60      	ldr	r3, [pc, #384]	; (8004ea8 <UART_SetConfig+0x4e4>)
 8004d26:	fba3 2302 	umull	r2, r3, r3, r2
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	011c      	lsls	r4, r3, #4
 8004d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d40:	4642      	mov	r2, r8
 8004d42:	464b      	mov	r3, r9
 8004d44:	1891      	adds	r1, r2, r2
 8004d46:	61b9      	str	r1, [r7, #24]
 8004d48:	415b      	adcs	r3, r3
 8004d4a:	61fb      	str	r3, [r7, #28]
 8004d4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d50:	4641      	mov	r1, r8
 8004d52:	1851      	adds	r1, r2, r1
 8004d54:	6139      	str	r1, [r7, #16]
 8004d56:	4649      	mov	r1, r9
 8004d58:	414b      	adcs	r3, r1
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d68:	4659      	mov	r1, fp
 8004d6a:	00cb      	lsls	r3, r1, #3
 8004d6c:	4651      	mov	r1, sl
 8004d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d72:	4651      	mov	r1, sl
 8004d74:	00ca      	lsls	r2, r1, #3
 8004d76:	4610      	mov	r0, r2
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4642      	mov	r2, r8
 8004d7e:	189b      	adds	r3, r3, r2
 8004d80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d84:	464b      	mov	r3, r9
 8004d86:	460a      	mov	r2, r1
 8004d88:	eb42 0303 	adc.w	r3, r2, r3
 8004d8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004da8:	4649      	mov	r1, r9
 8004daa:	008b      	lsls	r3, r1, #2
 8004dac:	4641      	mov	r1, r8
 8004dae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004db2:	4641      	mov	r1, r8
 8004db4:	008a      	lsls	r2, r1, #2
 8004db6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004dba:	f7fb ff4d 	bl	8000c58 <__aeabi_uldivmod>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4611      	mov	r1, r2
 8004dc4:	4b38      	ldr	r3, [pc, #224]	; (8004ea8 <UART_SetConfig+0x4e4>)
 8004dc6:	fba3 2301 	umull	r2, r3, r3, r1
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	2264      	movs	r2, #100	; 0x64
 8004dce:	fb02 f303 	mul.w	r3, r2, r3
 8004dd2:	1acb      	subs	r3, r1, r3
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	3332      	adds	r3, #50	; 0x32
 8004dd8:	4a33      	ldr	r2, [pc, #204]	; (8004ea8 <UART_SetConfig+0x4e4>)
 8004dda:	fba2 2303 	umull	r2, r3, r2, r3
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004de4:	441c      	add	r4, r3
 8004de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dea:	2200      	movs	r2, #0
 8004dec:	673b      	str	r3, [r7, #112]	; 0x70
 8004dee:	677a      	str	r2, [r7, #116]	; 0x74
 8004df0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004df4:	4642      	mov	r2, r8
 8004df6:	464b      	mov	r3, r9
 8004df8:	1891      	adds	r1, r2, r2
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	415b      	adcs	r3, r3
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e04:	4641      	mov	r1, r8
 8004e06:	1851      	adds	r1, r2, r1
 8004e08:	6039      	str	r1, [r7, #0]
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	414b      	adcs	r3, r1
 8004e0e:	607b      	str	r3, [r7, #4]
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e1c:	4659      	mov	r1, fp
 8004e1e:	00cb      	lsls	r3, r1, #3
 8004e20:	4651      	mov	r1, sl
 8004e22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e26:	4651      	mov	r1, sl
 8004e28:	00ca      	lsls	r2, r1, #3
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4603      	mov	r3, r0
 8004e30:	4642      	mov	r2, r8
 8004e32:	189b      	adds	r3, r3, r2
 8004e34:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e36:	464b      	mov	r3, r9
 8004e38:	460a      	mov	r2, r1
 8004e3a:	eb42 0303 	adc.w	r3, r2, r3
 8004e3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	663b      	str	r3, [r7, #96]	; 0x60
 8004e4a:	667a      	str	r2, [r7, #100]	; 0x64
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e58:	4649      	mov	r1, r9
 8004e5a:	008b      	lsls	r3, r1, #2
 8004e5c:	4641      	mov	r1, r8
 8004e5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e62:	4641      	mov	r1, r8
 8004e64:	008a      	lsls	r2, r1, #2
 8004e66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e6a:	f7fb fef5 	bl	8000c58 <__aeabi_uldivmod>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4b0d      	ldr	r3, [pc, #52]	; (8004ea8 <UART_SetConfig+0x4e4>)
 8004e74:	fba3 1302 	umull	r1, r3, r3, r2
 8004e78:	095b      	lsrs	r3, r3, #5
 8004e7a:	2164      	movs	r1, #100	; 0x64
 8004e7c:	fb01 f303 	mul.w	r3, r1, r3
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	3332      	adds	r3, #50	; 0x32
 8004e86:	4a08      	ldr	r2, [pc, #32]	; (8004ea8 <UART_SetConfig+0x4e4>)
 8004e88:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8c:	095b      	lsrs	r3, r3, #5
 8004e8e:	f003 020f 	and.w	r2, r3, #15
 8004e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4422      	add	r2, r4
 8004e9a:	609a      	str	r2, [r3, #8]
}
 8004e9c:	bf00      	nop
 8004e9e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ea8:	51eb851f 	.word	0x51eb851f

08004eac <__cvt>:
 8004eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb0:	ec55 4b10 	vmov	r4, r5, d0
 8004eb4:	2d00      	cmp	r5, #0
 8004eb6:	460e      	mov	r6, r1
 8004eb8:	4619      	mov	r1, r3
 8004eba:	462b      	mov	r3, r5
 8004ebc:	bfbb      	ittet	lt
 8004ebe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004ec2:	461d      	movlt	r5, r3
 8004ec4:	2300      	movge	r3, #0
 8004ec6:	232d      	movlt	r3, #45	; 0x2d
 8004ec8:	700b      	strb	r3, [r1, #0]
 8004eca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ecc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004ed0:	4691      	mov	r9, r2
 8004ed2:	f023 0820 	bic.w	r8, r3, #32
 8004ed6:	bfbc      	itt	lt
 8004ed8:	4622      	movlt	r2, r4
 8004eda:	4614      	movlt	r4, r2
 8004edc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ee0:	d005      	beq.n	8004eee <__cvt+0x42>
 8004ee2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004ee6:	d100      	bne.n	8004eea <__cvt+0x3e>
 8004ee8:	3601      	adds	r6, #1
 8004eea:	2102      	movs	r1, #2
 8004eec:	e000      	b.n	8004ef0 <__cvt+0x44>
 8004eee:	2103      	movs	r1, #3
 8004ef0:	ab03      	add	r3, sp, #12
 8004ef2:	9301      	str	r3, [sp, #4]
 8004ef4:	ab02      	add	r3, sp, #8
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	ec45 4b10 	vmov	d0, r4, r5
 8004efc:	4653      	mov	r3, sl
 8004efe:	4632      	mov	r2, r6
 8004f00:	f000 ff36 	bl	8005d70 <_dtoa_r>
 8004f04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f08:	4607      	mov	r7, r0
 8004f0a:	d102      	bne.n	8004f12 <__cvt+0x66>
 8004f0c:	f019 0f01 	tst.w	r9, #1
 8004f10:	d022      	beq.n	8004f58 <__cvt+0xac>
 8004f12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f16:	eb07 0906 	add.w	r9, r7, r6
 8004f1a:	d110      	bne.n	8004f3e <__cvt+0x92>
 8004f1c:	783b      	ldrb	r3, [r7, #0]
 8004f1e:	2b30      	cmp	r3, #48	; 0x30
 8004f20:	d10a      	bne.n	8004f38 <__cvt+0x8c>
 8004f22:	2200      	movs	r2, #0
 8004f24:	2300      	movs	r3, #0
 8004f26:	4620      	mov	r0, r4
 8004f28:	4629      	mov	r1, r5
 8004f2a:	f7fb fdd5 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f2e:	b918      	cbnz	r0, 8004f38 <__cvt+0x8c>
 8004f30:	f1c6 0601 	rsb	r6, r6, #1
 8004f34:	f8ca 6000 	str.w	r6, [sl]
 8004f38:	f8da 3000 	ldr.w	r3, [sl]
 8004f3c:	4499      	add	r9, r3
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2300      	movs	r3, #0
 8004f42:	4620      	mov	r0, r4
 8004f44:	4629      	mov	r1, r5
 8004f46:	f7fb fdc7 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f4a:	b108      	cbz	r0, 8004f50 <__cvt+0xa4>
 8004f4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f50:	2230      	movs	r2, #48	; 0x30
 8004f52:	9b03      	ldr	r3, [sp, #12]
 8004f54:	454b      	cmp	r3, r9
 8004f56:	d307      	bcc.n	8004f68 <__cvt+0xbc>
 8004f58:	9b03      	ldr	r3, [sp, #12]
 8004f5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f5c:	1bdb      	subs	r3, r3, r7
 8004f5e:	4638      	mov	r0, r7
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	b004      	add	sp, #16
 8004f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f68:	1c59      	adds	r1, r3, #1
 8004f6a:	9103      	str	r1, [sp, #12]
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	e7f0      	b.n	8004f52 <__cvt+0xa6>

08004f70 <__exponent>:
 8004f70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f72:	4603      	mov	r3, r0
 8004f74:	2900      	cmp	r1, #0
 8004f76:	bfb8      	it	lt
 8004f78:	4249      	neglt	r1, r1
 8004f7a:	f803 2b02 	strb.w	r2, [r3], #2
 8004f7e:	bfb4      	ite	lt
 8004f80:	222d      	movlt	r2, #45	; 0x2d
 8004f82:	222b      	movge	r2, #43	; 0x2b
 8004f84:	2909      	cmp	r1, #9
 8004f86:	7042      	strb	r2, [r0, #1]
 8004f88:	dd2a      	ble.n	8004fe0 <__exponent+0x70>
 8004f8a:	f10d 0207 	add.w	r2, sp, #7
 8004f8e:	4617      	mov	r7, r2
 8004f90:	260a      	movs	r6, #10
 8004f92:	4694      	mov	ip, r2
 8004f94:	fb91 f5f6 	sdiv	r5, r1, r6
 8004f98:	fb06 1415 	mls	r4, r6, r5, r1
 8004f9c:	3430      	adds	r4, #48	; 0x30
 8004f9e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004fa2:	460c      	mov	r4, r1
 8004fa4:	2c63      	cmp	r4, #99	; 0x63
 8004fa6:	f102 32ff 	add.w	r2, r2, #4294967295
 8004faa:	4629      	mov	r1, r5
 8004fac:	dcf1      	bgt.n	8004f92 <__exponent+0x22>
 8004fae:	3130      	adds	r1, #48	; 0x30
 8004fb0:	f1ac 0402 	sub.w	r4, ip, #2
 8004fb4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004fb8:	1c41      	adds	r1, r0, #1
 8004fba:	4622      	mov	r2, r4
 8004fbc:	42ba      	cmp	r2, r7
 8004fbe:	d30a      	bcc.n	8004fd6 <__exponent+0x66>
 8004fc0:	f10d 0209 	add.w	r2, sp, #9
 8004fc4:	eba2 020c 	sub.w	r2, r2, ip
 8004fc8:	42bc      	cmp	r4, r7
 8004fca:	bf88      	it	hi
 8004fcc:	2200      	movhi	r2, #0
 8004fce:	4413      	add	r3, r2
 8004fd0:	1a18      	subs	r0, r3, r0
 8004fd2:	b003      	add	sp, #12
 8004fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fd6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004fda:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004fde:	e7ed      	b.n	8004fbc <__exponent+0x4c>
 8004fe0:	2330      	movs	r3, #48	; 0x30
 8004fe2:	3130      	adds	r1, #48	; 0x30
 8004fe4:	7083      	strb	r3, [r0, #2]
 8004fe6:	70c1      	strb	r1, [r0, #3]
 8004fe8:	1d03      	adds	r3, r0, #4
 8004fea:	e7f1      	b.n	8004fd0 <__exponent+0x60>

08004fec <_printf_float>:
 8004fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff0:	ed2d 8b02 	vpush	{d8}
 8004ff4:	b08d      	sub	sp, #52	; 0x34
 8004ff6:	460c      	mov	r4, r1
 8004ff8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004ffc:	4616      	mov	r6, r2
 8004ffe:	461f      	mov	r7, r3
 8005000:	4605      	mov	r5, r0
 8005002:	f000 fdb7 	bl	8005b74 <_localeconv_r>
 8005006:	f8d0 a000 	ldr.w	sl, [r0]
 800500a:	4650      	mov	r0, sl
 800500c:	f7fb f938 	bl	8000280 <strlen>
 8005010:	2300      	movs	r3, #0
 8005012:	930a      	str	r3, [sp, #40]	; 0x28
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	9305      	str	r3, [sp, #20]
 8005018:	f8d8 3000 	ldr.w	r3, [r8]
 800501c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005020:	3307      	adds	r3, #7
 8005022:	f023 0307 	bic.w	r3, r3, #7
 8005026:	f103 0208 	add.w	r2, r3, #8
 800502a:	f8c8 2000 	str.w	r2, [r8]
 800502e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005032:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005036:	9307      	str	r3, [sp, #28]
 8005038:	f8cd 8018 	str.w	r8, [sp, #24]
 800503c:	ee08 0a10 	vmov	s16, r0
 8005040:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005044:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005048:	4b9e      	ldr	r3, [pc, #632]	; (80052c4 <_printf_float+0x2d8>)
 800504a:	f04f 32ff 	mov.w	r2, #4294967295
 800504e:	f7fb fd75 	bl	8000b3c <__aeabi_dcmpun>
 8005052:	bb88      	cbnz	r0, 80050b8 <_printf_float+0xcc>
 8005054:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005058:	4b9a      	ldr	r3, [pc, #616]	; (80052c4 <_printf_float+0x2d8>)
 800505a:	f04f 32ff 	mov.w	r2, #4294967295
 800505e:	f7fb fd4f 	bl	8000b00 <__aeabi_dcmple>
 8005062:	bb48      	cbnz	r0, 80050b8 <_printf_float+0xcc>
 8005064:	2200      	movs	r2, #0
 8005066:	2300      	movs	r3, #0
 8005068:	4640      	mov	r0, r8
 800506a:	4649      	mov	r1, r9
 800506c:	f7fb fd3e 	bl	8000aec <__aeabi_dcmplt>
 8005070:	b110      	cbz	r0, 8005078 <_printf_float+0x8c>
 8005072:	232d      	movs	r3, #45	; 0x2d
 8005074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005078:	4a93      	ldr	r2, [pc, #588]	; (80052c8 <_printf_float+0x2dc>)
 800507a:	4b94      	ldr	r3, [pc, #592]	; (80052cc <_printf_float+0x2e0>)
 800507c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005080:	bf94      	ite	ls
 8005082:	4690      	movls	r8, r2
 8005084:	4698      	movhi	r8, r3
 8005086:	2303      	movs	r3, #3
 8005088:	6123      	str	r3, [r4, #16]
 800508a:	9b05      	ldr	r3, [sp, #20]
 800508c:	f023 0304 	bic.w	r3, r3, #4
 8005090:	6023      	str	r3, [r4, #0]
 8005092:	f04f 0900 	mov.w	r9, #0
 8005096:	9700      	str	r7, [sp, #0]
 8005098:	4633      	mov	r3, r6
 800509a:	aa0b      	add	r2, sp, #44	; 0x2c
 800509c:	4621      	mov	r1, r4
 800509e:	4628      	mov	r0, r5
 80050a0:	f000 f9da 	bl	8005458 <_printf_common>
 80050a4:	3001      	adds	r0, #1
 80050a6:	f040 8090 	bne.w	80051ca <_printf_float+0x1de>
 80050aa:	f04f 30ff 	mov.w	r0, #4294967295
 80050ae:	b00d      	add	sp, #52	; 0x34
 80050b0:	ecbd 8b02 	vpop	{d8}
 80050b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b8:	4642      	mov	r2, r8
 80050ba:	464b      	mov	r3, r9
 80050bc:	4640      	mov	r0, r8
 80050be:	4649      	mov	r1, r9
 80050c0:	f7fb fd3c 	bl	8000b3c <__aeabi_dcmpun>
 80050c4:	b140      	cbz	r0, 80050d8 <_printf_float+0xec>
 80050c6:	464b      	mov	r3, r9
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	bfbc      	itt	lt
 80050cc:	232d      	movlt	r3, #45	; 0x2d
 80050ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80050d2:	4a7f      	ldr	r2, [pc, #508]	; (80052d0 <_printf_float+0x2e4>)
 80050d4:	4b7f      	ldr	r3, [pc, #508]	; (80052d4 <_printf_float+0x2e8>)
 80050d6:	e7d1      	b.n	800507c <_printf_float+0x90>
 80050d8:	6863      	ldr	r3, [r4, #4]
 80050da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80050de:	9206      	str	r2, [sp, #24]
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	d13f      	bne.n	8005164 <_printf_float+0x178>
 80050e4:	2306      	movs	r3, #6
 80050e6:	6063      	str	r3, [r4, #4]
 80050e8:	9b05      	ldr	r3, [sp, #20]
 80050ea:	6861      	ldr	r1, [r4, #4]
 80050ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80050f0:	2300      	movs	r3, #0
 80050f2:	9303      	str	r3, [sp, #12]
 80050f4:	ab0a      	add	r3, sp, #40	; 0x28
 80050f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80050fa:	ab09      	add	r3, sp, #36	; 0x24
 80050fc:	ec49 8b10 	vmov	d0, r8, r9
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	6022      	str	r2, [r4, #0]
 8005104:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005108:	4628      	mov	r0, r5
 800510a:	f7ff fecf 	bl	8004eac <__cvt>
 800510e:	9b06      	ldr	r3, [sp, #24]
 8005110:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005112:	2b47      	cmp	r3, #71	; 0x47
 8005114:	4680      	mov	r8, r0
 8005116:	d108      	bne.n	800512a <_printf_float+0x13e>
 8005118:	1cc8      	adds	r0, r1, #3
 800511a:	db02      	blt.n	8005122 <_printf_float+0x136>
 800511c:	6863      	ldr	r3, [r4, #4]
 800511e:	4299      	cmp	r1, r3
 8005120:	dd41      	ble.n	80051a6 <_printf_float+0x1ba>
 8005122:	f1ab 0302 	sub.w	r3, fp, #2
 8005126:	fa5f fb83 	uxtb.w	fp, r3
 800512a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800512e:	d820      	bhi.n	8005172 <_printf_float+0x186>
 8005130:	3901      	subs	r1, #1
 8005132:	465a      	mov	r2, fp
 8005134:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005138:	9109      	str	r1, [sp, #36]	; 0x24
 800513a:	f7ff ff19 	bl	8004f70 <__exponent>
 800513e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005140:	1813      	adds	r3, r2, r0
 8005142:	2a01      	cmp	r2, #1
 8005144:	4681      	mov	r9, r0
 8005146:	6123      	str	r3, [r4, #16]
 8005148:	dc02      	bgt.n	8005150 <_printf_float+0x164>
 800514a:	6822      	ldr	r2, [r4, #0]
 800514c:	07d2      	lsls	r2, r2, #31
 800514e:	d501      	bpl.n	8005154 <_printf_float+0x168>
 8005150:	3301      	adds	r3, #1
 8005152:	6123      	str	r3, [r4, #16]
 8005154:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005158:	2b00      	cmp	r3, #0
 800515a:	d09c      	beq.n	8005096 <_printf_float+0xaa>
 800515c:	232d      	movs	r3, #45	; 0x2d
 800515e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005162:	e798      	b.n	8005096 <_printf_float+0xaa>
 8005164:	9a06      	ldr	r2, [sp, #24]
 8005166:	2a47      	cmp	r2, #71	; 0x47
 8005168:	d1be      	bne.n	80050e8 <_printf_float+0xfc>
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1bc      	bne.n	80050e8 <_printf_float+0xfc>
 800516e:	2301      	movs	r3, #1
 8005170:	e7b9      	b.n	80050e6 <_printf_float+0xfa>
 8005172:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005176:	d118      	bne.n	80051aa <_printf_float+0x1be>
 8005178:	2900      	cmp	r1, #0
 800517a:	6863      	ldr	r3, [r4, #4]
 800517c:	dd0b      	ble.n	8005196 <_printf_float+0x1aa>
 800517e:	6121      	str	r1, [r4, #16]
 8005180:	b913      	cbnz	r3, 8005188 <_printf_float+0x19c>
 8005182:	6822      	ldr	r2, [r4, #0]
 8005184:	07d0      	lsls	r0, r2, #31
 8005186:	d502      	bpl.n	800518e <_printf_float+0x1a2>
 8005188:	3301      	adds	r3, #1
 800518a:	440b      	add	r3, r1
 800518c:	6123      	str	r3, [r4, #16]
 800518e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005190:	f04f 0900 	mov.w	r9, #0
 8005194:	e7de      	b.n	8005154 <_printf_float+0x168>
 8005196:	b913      	cbnz	r3, 800519e <_printf_float+0x1b2>
 8005198:	6822      	ldr	r2, [r4, #0]
 800519a:	07d2      	lsls	r2, r2, #31
 800519c:	d501      	bpl.n	80051a2 <_printf_float+0x1b6>
 800519e:	3302      	adds	r3, #2
 80051a0:	e7f4      	b.n	800518c <_printf_float+0x1a0>
 80051a2:	2301      	movs	r3, #1
 80051a4:	e7f2      	b.n	800518c <_printf_float+0x1a0>
 80051a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80051aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051ac:	4299      	cmp	r1, r3
 80051ae:	db05      	blt.n	80051bc <_printf_float+0x1d0>
 80051b0:	6823      	ldr	r3, [r4, #0]
 80051b2:	6121      	str	r1, [r4, #16]
 80051b4:	07d8      	lsls	r0, r3, #31
 80051b6:	d5ea      	bpl.n	800518e <_printf_float+0x1a2>
 80051b8:	1c4b      	adds	r3, r1, #1
 80051ba:	e7e7      	b.n	800518c <_printf_float+0x1a0>
 80051bc:	2900      	cmp	r1, #0
 80051be:	bfd4      	ite	le
 80051c0:	f1c1 0202 	rsble	r2, r1, #2
 80051c4:	2201      	movgt	r2, #1
 80051c6:	4413      	add	r3, r2
 80051c8:	e7e0      	b.n	800518c <_printf_float+0x1a0>
 80051ca:	6823      	ldr	r3, [r4, #0]
 80051cc:	055a      	lsls	r2, r3, #21
 80051ce:	d407      	bmi.n	80051e0 <_printf_float+0x1f4>
 80051d0:	6923      	ldr	r3, [r4, #16]
 80051d2:	4642      	mov	r2, r8
 80051d4:	4631      	mov	r1, r6
 80051d6:	4628      	mov	r0, r5
 80051d8:	47b8      	blx	r7
 80051da:	3001      	adds	r0, #1
 80051dc:	d12c      	bne.n	8005238 <_printf_float+0x24c>
 80051de:	e764      	b.n	80050aa <_printf_float+0xbe>
 80051e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80051e4:	f240 80e0 	bls.w	80053a8 <_printf_float+0x3bc>
 80051e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051ec:	2200      	movs	r2, #0
 80051ee:	2300      	movs	r3, #0
 80051f0:	f7fb fc72 	bl	8000ad8 <__aeabi_dcmpeq>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	d034      	beq.n	8005262 <_printf_float+0x276>
 80051f8:	4a37      	ldr	r2, [pc, #220]	; (80052d8 <_printf_float+0x2ec>)
 80051fa:	2301      	movs	r3, #1
 80051fc:	4631      	mov	r1, r6
 80051fe:	4628      	mov	r0, r5
 8005200:	47b8      	blx	r7
 8005202:	3001      	adds	r0, #1
 8005204:	f43f af51 	beq.w	80050aa <_printf_float+0xbe>
 8005208:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800520c:	429a      	cmp	r2, r3
 800520e:	db02      	blt.n	8005216 <_printf_float+0x22a>
 8005210:	6823      	ldr	r3, [r4, #0]
 8005212:	07d8      	lsls	r0, r3, #31
 8005214:	d510      	bpl.n	8005238 <_printf_float+0x24c>
 8005216:	ee18 3a10 	vmov	r3, s16
 800521a:	4652      	mov	r2, sl
 800521c:	4631      	mov	r1, r6
 800521e:	4628      	mov	r0, r5
 8005220:	47b8      	blx	r7
 8005222:	3001      	adds	r0, #1
 8005224:	f43f af41 	beq.w	80050aa <_printf_float+0xbe>
 8005228:	f04f 0800 	mov.w	r8, #0
 800522c:	f104 091a 	add.w	r9, r4, #26
 8005230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005232:	3b01      	subs	r3, #1
 8005234:	4543      	cmp	r3, r8
 8005236:	dc09      	bgt.n	800524c <_printf_float+0x260>
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	079b      	lsls	r3, r3, #30
 800523c:	f100 8107 	bmi.w	800544e <_printf_float+0x462>
 8005240:	68e0      	ldr	r0, [r4, #12]
 8005242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005244:	4298      	cmp	r0, r3
 8005246:	bfb8      	it	lt
 8005248:	4618      	movlt	r0, r3
 800524a:	e730      	b.n	80050ae <_printf_float+0xc2>
 800524c:	2301      	movs	r3, #1
 800524e:	464a      	mov	r2, r9
 8005250:	4631      	mov	r1, r6
 8005252:	4628      	mov	r0, r5
 8005254:	47b8      	blx	r7
 8005256:	3001      	adds	r0, #1
 8005258:	f43f af27 	beq.w	80050aa <_printf_float+0xbe>
 800525c:	f108 0801 	add.w	r8, r8, #1
 8005260:	e7e6      	b.n	8005230 <_printf_float+0x244>
 8005262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005264:	2b00      	cmp	r3, #0
 8005266:	dc39      	bgt.n	80052dc <_printf_float+0x2f0>
 8005268:	4a1b      	ldr	r2, [pc, #108]	; (80052d8 <_printf_float+0x2ec>)
 800526a:	2301      	movs	r3, #1
 800526c:	4631      	mov	r1, r6
 800526e:	4628      	mov	r0, r5
 8005270:	47b8      	blx	r7
 8005272:	3001      	adds	r0, #1
 8005274:	f43f af19 	beq.w	80050aa <_printf_float+0xbe>
 8005278:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800527c:	4313      	orrs	r3, r2
 800527e:	d102      	bne.n	8005286 <_printf_float+0x29a>
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	07d9      	lsls	r1, r3, #31
 8005284:	d5d8      	bpl.n	8005238 <_printf_float+0x24c>
 8005286:	ee18 3a10 	vmov	r3, s16
 800528a:	4652      	mov	r2, sl
 800528c:	4631      	mov	r1, r6
 800528e:	4628      	mov	r0, r5
 8005290:	47b8      	blx	r7
 8005292:	3001      	adds	r0, #1
 8005294:	f43f af09 	beq.w	80050aa <_printf_float+0xbe>
 8005298:	f04f 0900 	mov.w	r9, #0
 800529c:	f104 0a1a 	add.w	sl, r4, #26
 80052a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052a2:	425b      	negs	r3, r3
 80052a4:	454b      	cmp	r3, r9
 80052a6:	dc01      	bgt.n	80052ac <_printf_float+0x2c0>
 80052a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052aa:	e792      	b.n	80051d2 <_printf_float+0x1e6>
 80052ac:	2301      	movs	r3, #1
 80052ae:	4652      	mov	r2, sl
 80052b0:	4631      	mov	r1, r6
 80052b2:	4628      	mov	r0, r5
 80052b4:	47b8      	blx	r7
 80052b6:	3001      	adds	r0, #1
 80052b8:	f43f aef7 	beq.w	80050aa <_printf_float+0xbe>
 80052bc:	f109 0901 	add.w	r9, r9, #1
 80052c0:	e7ee      	b.n	80052a0 <_printf_float+0x2b4>
 80052c2:	bf00      	nop
 80052c4:	7fefffff 	.word	0x7fefffff
 80052c8:	08007964 	.word	0x08007964
 80052cc:	08007968 	.word	0x08007968
 80052d0:	0800796c 	.word	0x0800796c
 80052d4:	08007970 	.word	0x08007970
 80052d8:	08007974 	.word	0x08007974
 80052dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052e0:	429a      	cmp	r2, r3
 80052e2:	bfa8      	it	ge
 80052e4:	461a      	movge	r2, r3
 80052e6:	2a00      	cmp	r2, #0
 80052e8:	4691      	mov	r9, r2
 80052ea:	dc37      	bgt.n	800535c <_printf_float+0x370>
 80052ec:	f04f 0b00 	mov.w	fp, #0
 80052f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052f4:	f104 021a 	add.w	r2, r4, #26
 80052f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052fa:	9305      	str	r3, [sp, #20]
 80052fc:	eba3 0309 	sub.w	r3, r3, r9
 8005300:	455b      	cmp	r3, fp
 8005302:	dc33      	bgt.n	800536c <_printf_float+0x380>
 8005304:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005308:	429a      	cmp	r2, r3
 800530a:	db3b      	blt.n	8005384 <_printf_float+0x398>
 800530c:	6823      	ldr	r3, [r4, #0]
 800530e:	07da      	lsls	r2, r3, #31
 8005310:	d438      	bmi.n	8005384 <_printf_float+0x398>
 8005312:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005316:	eba2 0903 	sub.w	r9, r2, r3
 800531a:	9b05      	ldr	r3, [sp, #20]
 800531c:	1ad2      	subs	r2, r2, r3
 800531e:	4591      	cmp	r9, r2
 8005320:	bfa8      	it	ge
 8005322:	4691      	movge	r9, r2
 8005324:	f1b9 0f00 	cmp.w	r9, #0
 8005328:	dc35      	bgt.n	8005396 <_printf_float+0x3aa>
 800532a:	f04f 0800 	mov.w	r8, #0
 800532e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005332:	f104 0a1a 	add.w	sl, r4, #26
 8005336:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800533a:	1a9b      	subs	r3, r3, r2
 800533c:	eba3 0309 	sub.w	r3, r3, r9
 8005340:	4543      	cmp	r3, r8
 8005342:	f77f af79 	ble.w	8005238 <_printf_float+0x24c>
 8005346:	2301      	movs	r3, #1
 8005348:	4652      	mov	r2, sl
 800534a:	4631      	mov	r1, r6
 800534c:	4628      	mov	r0, r5
 800534e:	47b8      	blx	r7
 8005350:	3001      	adds	r0, #1
 8005352:	f43f aeaa 	beq.w	80050aa <_printf_float+0xbe>
 8005356:	f108 0801 	add.w	r8, r8, #1
 800535a:	e7ec      	b.n	8005336 <_printf_float+0x34a>
 800535c:	4613      	mov	r3, r2
 800535e:	4631      	mov	r1, r6
 8005360:	4642      	mov	r2, r8
 8005362:	4628      	mov	r0, r5
 8005364:	47b8      	blx	r7
 8005366:	3001      	adds	r0, #1
 8005368:	d1c0      	bne.n	80052ec <_printf_float+0x300>
 800536a:	e69e      	b.n	80050aa <_printf_float+0xbe>
 800536c:	2301      	movs	r3, #1
 800536e:	4631      	mov	r1, r6
 8005370:	4628      	mov	r0, r5
 8005372:	9205      	str	r2, [sp, #20]
 8005374:	47b8      	blx	r7
 8005376:	3001      	adds	r0, #1
 8005378:	f43f ae97 	beq.w	80050aa <_printf_float+0xbe>
 800537c:	9a05      	ldr	r2, [sp, #20]
 800537e:	f10b 0b01 	add.w	fp, fp, #1
 8005382:	e7b9      	b.n	80052f8 <_printf_float+0x30c>
 8005384:	ee18 3a10 	vmov	r3, s16
 8005388:	4652      	mov	r2, sl
 800538a:	4631      	mov	r1, r6
 800538c:	4628      	mov	r0, r5
 800538e:	47b8      	blx	r7
 8005390:	3001      	adds	r0, #1
 8005392:	d1be      	bne.n	8005312 <_printf_float+0x326>
 8005394:	e689      	b.n	80050aa <_printf_float+0xbe>
 8005396:	9a05      	ldr	r2, [sp, #20]
 8005398:	464b      	mov	r3, r9
 800539a:	4442      	add	r2, r8
 800539c:	4631      	mov	r1, r6
 800539e:	4628      	mov	r0, r5
 80053a0:	47b8      	blx	r7
 80053a2:	3001      	adds	r0, #1
 80053a4:	d1c1      	bne.n	800532a <_printf_float+0x33e>
 80053a6:	e680      	b.n	80050aa <_printf_float+0xbe>
 80053a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053aa:	2a01      	cmp	r2, #1
 80053ac:	dc01      	bgt.n	80053b2 <_printf_float+0x3c6>
 80053ae:	07db      	lsls	r3, r3, #31
 80053b0:	d53a      	bpl.n	8005428 <_printf_float+0x43c>
 80053b2:	2301      	movs	r3, #1
 80053b4:	4642      	mov	r2, r8
 80053b6:	4631      	mov	r1, r6
 80053b8:	4628      	mov	r0, r5
 80053ba:	47b8      	blx	r7
 80053bc:	3001      	adds	r0, #1
 80053be:	f43f ae74 	beq.w	80050aa <_printf_float+0xbe>
 80053c2:	ee18 3a10 	vmov	r3, s16
 80053c6:	4652      	mov	r2, sl
 80053c8:	4631      	mov	r1, r6
 80053ca:	4628      	mov	r0, r5
 80053cc:	47b8      	blx	r7
 80053ce:	3001      	adds	r0, #1
 80053d0:	f43f ae6b 	beq.w	80050aa <_printf_float+0xbe>
 80053d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053d8:	2200      	movs	r2, #0
 80053da:	2300      	movs	r3, #0
 80053dc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80053e0:	f7fb fb7a 	bl	8000ad8 <__aeabi_dcmpeq>
 80053e4:	b9d8      	cbnz	r0, 800541e <_printf_float+0x432>
 80053e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80053ea:	f108 0201 	add.w	r2, r8, #1
 80053ee:	4631      	mov	r1, r6
 80053f0:	4628      	mov	r0, r5
 80053f2:	47b8      	blx	r7
 80053f4:	3001      	adds	r0, #1
 80053f6:	d10e      	bne.n	8005416 <_printf_float+0x42a>
 80053f8:	e657      	b.n	80050aa <_printf_float+0xbe>
 80053fa:	2301      	movs	r3, #1
 80053fc:	4652      	mov	r2, sl
 80053fe:	4631      	mov	r1, r6
 8005400:	4628      	mov	r0, r5
 8005402:	47b8      	blx	r7
 8005404:	3001      	adds	r0, #1
 8005406:	f43f ae50 	beq.w	80050aa <_printf_float+0xbe>
 800540a:	f108 0801 	add.w	r8, r8, #1
 800540e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005410:	3b01      	subs	r3, #1
 8005412:	4543      	cmp	r3, r8
 8005414:	dcf1      	bgt.n	80053fa <_printf_float+0x40e>
 8005416:	464b      	mov	r3, r9
 8005418:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800541c:	e6da      	b.n	80051d4 <_printf_float+0x1e8>
 800541e:	f04f 0800 	mov.w	r8, #0
 8005422:	f104 0a1a 	add.w	sl, r4, #26
 8005426:	e7f2      	b.n	800540e <_printf_float+0x422>
 8005428:	2301      	movs	r3, #1
 800542a:	4642      	mov	r2, r8
 800542c:	e7df      	b.n	80053ee <_printf_float+0x402>
 800542e:	2301      	movs	r3, #1
 8005430:	464a      	mov	r2, r9
 8005432:	4631      	mov	r1, r6
 8005434:	4628      	mov	r0, r5
 8005436:	47b8      	blx	r7
 8005438:	3001      	adds	r0, #1
 800543a:	f43f ae36 	beq.w	80050aa <_printf_float+0xbe>
 800543e:	f108 0801 	add.w	r8, r8, #1
 8005442:	68e3      	ldr	r3, [r4, #12]
 8005444:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005446:	1a5b      	subs	r3, r3, r1
 8005448:	4543      	cmp	r3, r8
 800544a:	dcf0      	bgt.n	800542e <_printf_float+0x442>
 800544c:	e6f8      	b.n	8005240 <_printf_float+0x254>
 800544e:	f04f 0800 	mov.w	r8, #0
 8005452:	f104 0919 	add.w	r9, r4, #25
 8005456:	e7f4      	b.n	8005442 <_printf_float+0x456>

08005458 <_printf_common>:
 8005458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800545c:	4616      	mov	r6, r2
 800545e:	4699      	mov	r9, r3
 8005460:	688a      	ldr	r2, [r1, #8]
 8005462:	690b      	ldr	r3, [r1, #16]
 8005464:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005468:	4293      	cmp	r3, r2
 800546a:	bfb8      	it	lt
 800546c:	4613      	movlt	r3, r2
 800546e:	6033      	str	r3, [r6, #0]
 8005470:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005474:	4607      	mov	r7, r0
 8005476:	460c      	mov	r4, r1
 8005478:	b10a      	cbz	r2, 800547e <_printf_common+0x26>
 800547a:	3301      	adds	r3, #1
 800547c:	6033      	str	r3, [r6, #0]
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	0699      	lsls	r1, r3, #26
 8005482:	bf42      	ittt	mi
 8005484:	6833      	ldrmi	r3, [r6, #0]
 8005486:	3302      	addmi	r3, #2
 8005488:	6033      	strmi	r3, [r6, #0]
 800548a:	6825      	ldr	r5, [r4, #0]
 800548c:	f015 0506 	ands.w	r5, r5, #6
 8005490:	d106      	bne.n	80054a0 <_printf_common+0x48>
 8005492:	f104 0a19 	add.w	sl, r4, #25
 8005496:	68e3      	ldr	r3, [r4, #12]
 8005498:	6832      	ldr	r2, [r6, #0]
 800549a:	1a9b      	subs	r3, r3, r2
 800549c:	42ab      	cmp	r3, r5
 800549e:	dc26      	bgt.n	80054ee <_printf_common+0x96>
 80054a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054a4:	1e13      	subs	r3, r2, #0
 80054a6:	6822      	ldr	r2, [r4, #0]
 80054a8:	bf18      	it	ne
 80054aa:	2301      	movne	r3, #1
 80054ac:	0692      	lsls	r2, r2, #26
 80054ae:	d42b      	bmi.n	8005508 <_printf_common+0xb0>
 80054b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054b4:	4649      	mov	r1, r9
 80054b6:	4638      	mov	r0, r7
 80054b8:	47c0      	blx	r8
 80054ba:	3001      	adds	r0, #1
 80054bc:	d01e      	beq.n	80054fc <_printf_common+0xa4>
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	6922      	ldr	r2, [r4, #16]
 80054c2:	f003 0306 	and.w	r3, r3, #6
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	bf02      	ittt	eq
 80054ca:	68e5      	ldreq	r5, [r4, #12]
 80054cc:	6833      	ldreq	r3, [r6, #0]
 80054ce:	1aed      	subeq	r5, r5, r3
 80054d0:	68a3      	ldr	r3, [r4, #8]
 80054d2:	bf0c      	ite	eq
 80054d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054d8:	2500      	movne	r5, #0
 80054da:	4293      	cmp	r3, r2
 80054dc:	bfc4      	itt	gt
 80054de:	1a9b      	subgt	r3, r3, r2
 80054e0:	18ed      	addgt	r5, r5, r3
 80054e2:	2600      	movs	r6, #0
 80054e4:	341a      	adds	r4, #26
 80054e6:	42b5      	cmp	r5, r6
 80054e8:	d11a      	bne.n	8005520 <_printf_common+0xc8>
 80054ea:	2000      	movs	r0, #0
 80054ec:	e008      	b.n	8005500 <_printf_common+0xa8>
 80054ee:	2301      	movs	r3, #1
 80054f0:	4652      	mov	r2, sl
 80054f2:	4649      	mov	r1, r9
 80054f4:	4638      	mov	r0, r7
 80054f6:	47c0      	blx	r8
 80054f8:	3001      	adds	r0, #1
 80054fa:	d103      	bne.n	8005504 <_printf_common+0xac>
 80054fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005504:	3501      	adds	r5, #1
 8005506:	e7c6      	b.n	8005496 <_printf_common+0x3e>
 8005508:	18e1      	adds	r1, r4, r3
 800550a:	1c5a      	adds	r2, r3, #1
 800550c:	2030      	movs	r0, #48	; 0x30
 800550e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005512:	4422      	add	r2, r4
 8005514:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005518:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800551c:	3302      	adds	r3, #2
 800551e:	e7c7      	b.n	80054b0 <_printf_common+0x58>
 8005520:	2301      	movs	r3, #1
 8005522:	4622      	mov	r2, r4
 8005524:	4649      	mov	r1, r9
 8005526:	4638      	mov	r0, r7
 8005528:	47c0      	blx	r8
 800552a:	3001      	adds	r0, #1
 800552c:	d0e6      	beq.n	80054fc <_printf_common+0xa4>
 800552e:	3601      	adds	r6, #1
 8005530:	e7d9      	b.n	80054e6 <_printf_common+0x8e>
	...

08005534 <_printf_i>:
 8005534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005538:	7e0f      	ldrb	r7, [r1, #24]
 800553a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800553c:	2f78      	cmp	r7, #120	; 0x78
 800553e:	4691      	mov	r9, r2
 8005540:	4680      	mov	r8, r0
 8005542:	460c      	mov	r4, r1
 8005544:	469a      	mov	sl, r3
 8005546:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800554a:	d807      	bhi.n	800555c <_printf_i+0x28>
 800554c:	2f62      	cmp	r7, #98	; 0x62
 800554e:	d80a      	bhi.n	8005566 <_printf_i+0x32>
 8005550:	2f00      	cmp	r7, #0
 8005552:	f000 80d4 	beq.w	80056fe <_printf_i+0x1ca>
 8005556:	2f58      	cmp	r7, #88	; 0x58
 8005558:	f000 80c0 	beq.w	80056dc <_printf_i+0x1a8>
 800555c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005560:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005564:	e03a      	b.n	80055dc <_printf_i+0xa8>
 8005566:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800556a:	2b15      	cmp	r3, #21
 800556c:	d8f6      	bhi.n	800555c <_printf_i+0x28>
 800556e:	a101      	add	r1, pc, #4	; (adr r1, 8005574 <_printf_i+0x40>)
 8005570:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005574:	080055cd 	.word	0x080055cd
 8005578:	080055e1 	.word	0x080055e1
 800557c:	0800555d 	.word	0x0800555d
 8005580:	0800555d 	.word	0x0800555d
 8005584:	0800555d 	.word	0x0800555d
 8005588:	0800555d 	.word	0x0800555d
 800558c:	080055e1 	.word	0x080055e1
 8005590:	0800555d 	.word	0x0800555d
 8005594:	0800555d 	.word	0x0800555d
 8005598:	0800555d 	.word	0x0800555d
 800559c:	0800555d 	.word	0x0800555d
 80055a0:	080056e5 	.word	0x080056e5
 80055a4:	0800560d 	.word	0x0800560d
 80055a8:	0800569f 	.word	0x0800569f
 80055ac:	0800555d 	.word	0x0800555d
 80055b0:	0800555d 	.word	0x0800555d
 80055b4:	08005707 	.word	0x08005707
 80055b8:	0800555d 	.word	0x0800555d
 80055bc:	0800560d 	.word	0x0800560d
 80055c0:	0800555d 	.word	0x0800555d
 80055c4:	0800555d 	.word	0x0800555d
 80055c8:	080056a7 	.word	0x080056a7
 80055cc:	682b      	ldr	r3, [r5, #0]
 80055ce:	1d1a      	adds	r2, r3, #4
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	602a      	str	r2, [r5, #0]
 80055d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055dc:	2301      	movs	r3, #1
 80055de:	e09f      	b.n	8005720 <_printf_i+0x1ec>
 80055e0:	6820      	ldr	r0, [r4, #0]
 80055e2:	682b      	ldr	r3, [r5, #0]
 80055e4:	0607      	lsls	r7, r0, #24
 80055e6:	f103 0104 	add.w	r1, r3, #4
 80055ea:	6029      	str	r1, [r5, #0]
 80055ec:	d501      	bpl.n	80055f2 <_printf_i+0xbe>
 80055ee:	681e      	ldr	r6, [r3, #0]
 80055f0:	e003      	b.n	80055fa <_printf_i+0xc6>
 80055f2:	0646      	lsls	r6, r0, #25
 80055f4:	d5fb      	bpl.n	80055ee <_printf_i+0xba>
 80055f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80055fa:	2e00      	cmp	r6, #0
 80055fc:	da03      	bge.n	8005606 <_printf_i+0xd2>
 80055fe:	232d      	movs	r3, #45	; 0x2d
 8005600:	4276      	negs	r6, r6
 8005602:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005606:	485a      	ldr	r0, [pc, #360]	; (8005770 <_printf_i+0x23c>)
 8005608:	230a      	movs	r3, #10
 800560a:	e012      	b.n	8005632 <_printf_i+0xfe>
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	6820      	ldr	r0, [r4, #0]
 8005610:	1d19      	adds	r1, r3, #4
 8005612:	6029      	str	r1, [r5, #0]
 8005614:	0605      	lsls	r5, r0, #24
 8005616:	d501      	bpl.n	800561c <_printf_i+0xe8>
 8005618:	681e      	ldr	r6, [r3, #0]
 800561a:	e002      	b.n	8005622 <_printf_i+0xee>
 800561c:	0641      	lsls	r1, r0, #25
 800561e:	d5fb      	bpl.n	8005618 <_printf_i+0xe4>
 8005620:	881e      	ldrh	r6, [r3, #0]
 8005622:	4853      	ldr	r0, [pc, #332]	; (8005770 <_printf_i+0x23c>)
 8005624:	2f6f      	cmp	r7, #111	; 0x6f
 8005626:	bf0c      	ite	eq
 8005628:	2308      	moveq	r3, #8
 800562a:	230a      	movne	r3, #10
 800562c:	2100      	movs	r1, #0
 800562e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005632:	6865      	ldr	r5, [r4, #4]
 8005634:	60a5      	str	r5, [r4, #8]
 8005636:	2d00      	cmp	r5, #0
 8005638:	bfa2      	ittt	ge
 800563a:	6821      	ldrge	r1, [r4, #0]
 800563c:	f021 0104 	bicge.w	r1, r1, #4
 8005640:	6021      	strge	r1, [r4, #0]
 8005642:	b90e      	cbnz	r6, 8005648 <_printf_i+0x114>
 8005644:	2d00      	cmp	r5, #0
 8005646:	d04b      	beq.n	80056e0 <_printf_i+0x1ac>
 8005648:	4615      	mov	r5, r2
 800564a:	fbb6 f1f3 	udiv	r1, r6, r3
 800564e:	fb03 6711 	mls	r7, r3, r1, r6
 8005652:	5dc7      	ldrb	r7, [r0, r7]
 8005654:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005658:	4637      	mov	r7, r6
 800565a:	42bb      	cmp	r3, r7
 800565c:	460e      	mov	r6, r1
 800565e:	d9f4      	bls.n	800564a <_printf_i+0x116>
 8005660:	2b08      	cmp	r3, #8
 8005662:	d10b      	bne.n	800567c <_printf_i+0x148>
 8005664:	6823      	ldr	r3, [r4, #0]
 8005666:	07de      	lsls	r6, r3, #31
 8005668:	d508      	bpl.n	800567c <_printf_i+0x148>
 800566a:	6923      	ldr	r3, [r4, #16]
 800566c:	6861      	ldr	r1, [r4, #4]
 800566e:	4299      	cmp	r1, r3
 8005670:	bfde      	ittt	le
 8005672:	2330      	movle	r3, #48	; 0x30
 8005674:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005678:	f105 35ff 	addle.w	r5, r5, #4294967295
 800567c:	1b52      	subs	r2, r2, r5
 800567e:	6122      	str	r2, [r4, #16]
 8005680:	f8cd a000 	str.w	sl, [sp]
 8005684:	464b      	mov	r3, r9
 8005686:	aa03      	add	r2, sp, #12
 8005688:	4621      	mov	r1, r4
 800568a:	4640      	mov	r0, r8
 800568c:	f7ff fee4 	bl	8005458 <_printf_common>
 8005690:	3001      	adds	r0, #1
 8005692:	d14a      	bne.n	800572a <_printf_i+0x1f6>
 8005694:	f04f 30ff 	mov.w	r0, #4294967295
 8005698:	b004      	add	sp, #16
 800569a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	f043 0320 	orr.w	r3, r3, #32
 80056a4:	6023      	str	r3, [r4, #0]
 80056a6:	4833      	ldr	r0, [pc, #204]	; (8005774 <_printf_i+0x240>)
 80056a8:	2778      	movs	r7, #120	; 0x78
 80056aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	6829      	ldr	r1, [r5, #0]
 80056b2:	061f      	lsls	r7, r3, #24
 80056b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80056b8:	d402      	bmi.n	80056c0 <_printf_i+0x18c>
 80056ba:	065f      	lsls	r7, r3, #25
 80056bc:	bf48      	it	mi
 80056be:	b2b6      	uxthmi	r6, r6
 80056c0:	07df      	lsls	r7, r3, #31
 80056c2:	bf48      	it	mi
 80056c4:	f043 0320 	orrmi.w	r3, r3, #32
 80056c8:	6029      	str	r1, [r5, #0]
 80056ca:	bf48      	it	mi
 80056cc:	6023      	strmi	r3, [r4, #0]
 80056ce:	b91e      	cbnz	r6, 80056d8 <_printf_i+0x1a4>
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	f023 0320 	bic.w	r3, r3, #32
 80056d6:	6023      	str	r3, [r4, #0]
 80056d8:	2310      	movs	r3, #16
 80056da:	e7a7      	b.n	800562c <_printf_i+0xf8>
 80056dc:	4824      	ldr	r0, [pc, #144]	; (8005770 <_printf_i+0x23c>)
 80056de:	e7e4      	b.n	80056aa <_printf_i+0x176>
 80056e0:	4615      	mov	r5, r2
 80056e2:	e7bd      	b.n	8005660 <_printf_i+0x12c>
 80056e4:	682b      	ldr	r3, [r5, #0]
 80056e6:	6826      	ldr	r6, [r4, #0]
 80056e8:	6961      	ldr	r1, [r4, #20]
 80056ea:	1d18      	adds	r0, r3, #4
 80056ec:	6028      	str	r0, [r5, #0]
 80056ee:	0635      	lsls	r5, r6, #24
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	d501      	bpl.n	80056f8 <_printf_i+0x1c4>
 80056f4:	6019      	str	r1, [r3, #0]
 80056f6:	e002      	b.n	80056fe <_printf_i+0x1ca>
 80056f8:	0670      	lsls	r0, r6, #25
 80056fa:	d5fb      	bpl.n	80056f4 <_printf_i+0x1c0>
 80056fc:	8019      	strh	r1, [r3, #0]
 80056fe:	2300      	movs	r3, #0
 8005700:	6123      	str	r3, [r4, #16]
 8005702:	4615      	mov	r5, r2
 8005704:	e7bc      	b.n	8005680 <_printf_i+0x14c>
 8005706:	682b      	ldr	r3, [r5, #0]
 8005708:	1d1a      	adds	r2, r3, #4
 800570a:	602a      	str	r2, [r5, #0]
 800570c:	681d      	ldr	r5, [r3, #0]
 800570e:	6862      	ldr	r2, [r4, #4]
 8005710:	2100      	movs	r1, #0
 8005712:	4628      	mov	r0, r5
 8005714:	f7fa fd64 	bl	80001e0 <memchr>
 8005718:	b108      	cbz	r0, 800571e <_printf_i+0x1ea>
 800571a:	1b40      	subs	r0, r0, r5
 800571c:	6060      	str	r0, [r4, #4]
 800571e:	6863      	ldr	r3, [r4, #4]
 8005720:	6123      	str	r3, [r4, #16]
 8005722:	2300      	movs	r3, #0
 8005724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005728:	e7aa      	b.n	8005680 <_printf_i+0x14c>
 800572a:	6923      	ldr	r3, [r4, #16]
 800572c:	462a      	mov	r2, r5
 800572e:	4649      	mov	r1, r9
 8005730:	4640      	mov	r0, r8
 8005732:	47d0      	blx	sl
 8005734:	3001      	adds	r0, #1
 8005736:	d0ad      	beq.n	8005694 <_printf_i+0x160>
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	079b      	lsls	r3, r3, #30
 800573c:	d413      	bmi.n	8005766 <_printf_i+0x232>
 800573e:	68e0      	ldr	r0, [r4, #12]
 8005740:	9b03      	ldr	r3, [sp, #12]
 8005742:	4298      	cmp	r0, r3
 8005744:	bfb8      	it	lt
 8005746:	4618      	movlt	r0, r3
 8005748:	e7a6      	b.n	8005698 <_printf_i+0x164>
 800574a:	2301      	movs	r3, #1
 800574c:	4632      	mov	r2, r6
 800574e:	4649      	mov	r1, r9
 8005750:	4640      	mov	r0, r8
 8005752:	47d0      	blx	sl
 8005754:	3001      	adds	r0, #1
 8005756:	d09d      	beq.n	8005694 <_printf_i+0x160>
 8005758:	3501      	adds	r5, #1
 800575a:	68e3      	ldr	r3, [r4, #12]
 800575c:	9903      	ldr	r1, [sp, #12]
 800575e:	1a5b      	subs	r3, r3, r1
 8005760:	42ab      	cmp	r3, r5
 8005762:	dcf2      	bgt.n	800574a <_printf_i+0x216>
 8005764:	e7eb      	b.n	800573e <_printf_i+0x20a>
 8005766:	2500      	movs	r5, #0
 8005768:	f104 0619 	add.w	r6, r4, #25
 800576c:	e7f5      	b.n	800575a <_printf_i+0x226>
 800576e:	bf00      	nop
 8005770:	08007976 	.word	0x08007976
 8005774:	08007987 	.word	0x08007987

08005778 <std>:
 8005778:	2300      	movs	r3, #0
 800577a:	b510      	push	{r4, lr}
 800577c:	4604      	mov	r4, r0
 800577e:	e9c0 3300 	strd	r3, r3, [r0]
 8005782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005786:	6083      	str	r3, [r0, #8]
 8005788:	8181      	strh	r1, [r0, #12]
 800578a:	6643      	str	r3, [r0, #100]	; 0x64
 800578c:	81c2      	strh	r2, [r0, #14]
 800578e:	6183      	str	r3, [r0, #24]
 8005790:	4619      	mov	r1, r3
 8005792:	2208      	movs	r2, #8
 8005794:	305c      	adds	r0, #92	; 0x5c
 8005796:	f000 f9e5 	bl	8005b64 <memset>
 800579a:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <std+0x38>)
 800579c:	6263      	str	r3, [r4, #36]	; 0x24
 800579e:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <std+0x3c>)
 80057a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80057a2:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <std+0x40>)
 80057a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057a6:	4b05      	ldr	r3, [pc, #20]	; (80057bc <std+0x44>)
 80057a8:	6224      	str	r4, [r4, #32]
 80057aa:	6323      	str	r3, [r4, #48]	; 0x30
 80057ac:	bd10      	pop	{r4, pc}
 80057ae:	bf00      	nop
 80057b0:	080059b5 	.word	0x080059b5
 80057b4:	080059d7 	.word	0x080059d7
 80057b8:	08005a0f 	.word	0x08005a0f
 80057bc:	08005a33 	.word	0x08005a33

080057c0 <stdio_exit_handler>:
 80057c0:	4a02      	ldr	r2, [pc, #8]	; (80057cc <stdio_exit_handler+0xc>)
 80057c2:	4903      	ldr	r1, [pc, #12]	; (80057d0 <stdio_exit_handler+0x10>)
 80057c4:	4803      	ldr	r0, [pc, #12]	; (80057d4 <stdio_exit_handler+0x14>)
 80057c6:	f000 b869 	b.w	800589c <_fwalk_sglue>
 80057ca:	bf00      	nop
 80057cc:	2000000c 	.word	0x2000000c
 80057d0:	080075e1 	.word	0x080075e1
 80057d4:	20000018 	.word	0x20000018

080057d8 <cleanup_stdio>:
 80057d8:	6841      	ldr	r1, [r0, #4]
 80057da:	4b0c      	ldr	r3, [pc, #48]	; (800580c <cleanup_stdio+0x34>)
 80057dc:	4299      	cmp	r1, r3
 80057de:	b510      	push	{r4, lr}
 80057e0:	4604      	mov	r4, r0
 80057e2:	d001      	beq.n	80057e8 <cleanup_stdio+0x10>
 80057e4:	f001 fefc 	bl	80075e0 <_fflush_r>
 80057e8:	68a1      	ldr	r1, [r4, #8]
 80057ea:	4b09      	ldr	r3, [pc, #36]	; (8005810 <cleanup_stdio+0x38>)
 80057ec:	4299      	cmp	r1, r3
 80057ee:	d002      	beq.n	80057f6 <cleanup_stdio+0x1e>
 80057f0:	4620      	mov	r0, r4
 80057f2:	f001 fef5 	bl	80075e0 <_fflush_r>
 80057f6:	68e1      	ldr	r1, [r4, #12]
 80057f8:	4b06      	ldr	r3, [pc, #24]	; (8005814 <cleanup_stdio+0x3c>)
 80057fa:	4299      	cmp	r1, r3
 80057fc:	d004      	beq.n	8005808 <cleanup_stdio+0x30>
 80057fe:	4620      	mov	r0, r4
 8005800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005804:	f001 beec 	b.w	80075e0 <_fflush_r>
 8005808:	bd10      	pop	{r4, pc}
 800580a:	bf00      	nop
 800580c:	200002a4 	.word	0x200002a4
 8005810:	2000030c 	.word	0x2000030c
 8005814:	20000374 	.word	0x20000374

08005818 <global_stdio_init.part.0>:
 8005818:	b510      	push	{r4, lr}
 800581a:	4b0b      	ldr	r3, [pc, #44]	; (8005848 <global_stdio_init.part.0+0x30>)
 800581c:	4c0b      	ldr	r4, [pc, #44]	; (800584c <global_stdio_init.part.0+0x34>)
 800581e:	4a0c      	ldr	r2, [pc, #48]	; (8005850 <global_stdio_init.part.0+0x38>)
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	4620      	mov	r0, r4
 8005824:	2200      	movs	r2, #0
 8005826:	2104      	movs	r1, #4
 8005828:	f7ff ffa6 	bl	8005778 <std>
 800582c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005830:	2201      	movs	r2, #1
 8005832:	2109      	movs	r1, #9
 8005834:	f7ff ffa0 	bl	8005778 <std>
 8005838:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800583c:	2202      	movs	r2, #2
 800583e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005842:	2112      	movs	r1, #18
 8005844:	f7ff bf98 	b.w	8005778 <std>
 8005848:	200003dc 	.word	0x200003dc
 800584c:	200002a4 	.word	0x200002a4
 8005850:	080057c1 	.word	0x080057c1

08005854 <__sfp_lock_acquire>:
 8005854:	4801      	ldr	r0, [pc, #4]	; (800585c <__sfp_lock_acquire+0x8>)
 8005856:	f000 ba01 	b.w	8005c5c <__retarget_lock_acquire_recursive>
 800585a:	bf00      	nop
 800585c:	200003e5 	.word	0x200003e5

08005860 <__sfp_lock_release>:
 8005860:	4801      	ldr	r0, [pc, #4]	; (8005868 <__sfp_lock_release+0x8>)
 8005862:	f000 b9fc 	b.w	8005c5e <__retarget_lock_release_recursive>
 8005866:	bf00      	nop
 8005868:	200003e5 	.word	0x200003e5

0800586c <__sinit>:
 800586c:	b510      	push	{r4, lr}
 800586e:	4604      	mov	r4, r0
 8005870:	f7ff fff0 	bl	8005854 <__sfp_lock_acquire>
 8005874:	6a23      	ldr	r3, [r4, #32]
 8005876:	b11b      	cbz	r3, 8005880 <__sinit+0x14>
 8005878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800587c:	f7ff bff0 	b.w	8005860 <__sfp_lock_release>
 8005880:	4b04      	ldr	r3, [pc, #16]	; (8005894 <__sinit+0x28>)
 8005882:	6223      	str	r3, [r4, #32]
 8005884:	4b04      	ldr	r3, [pc, #16]	; (8005898 <__sinit+0x2c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1f5      	bne.n	8005878 <__sinit+0xc>
 800588c:	f7ff ffc4 	bl	8005818 <global_stdio_init.part.0>
 8005890:	e7f2      	b.n	8005878 <__sinit+0xc>
 8005892:	bf00      	nop
 8005894:	080057d9 	.word	0x080057d9
 8005898:	200003dc 	.word	0x200003dc

0800589c <_fwalk_sglue>:
 800589c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058a0:	4607      	mov	r7, r0
 80058a2:	4688      	mov	r8, r1
 80058a4:	4614      	mov	r4, r2
 80058a6:	2600      	movs	r6, #0
 80058a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058ac:	f1b9 0901 	subs.w	r9, r9, #1
 80058b0:	d505      	bpl.n	80058be <_fwalk_sglue+0x22>
 80058b2:	6824      	ldr	r4, [r4, #0]
 80058b4:	2c00      	cmp	r4, #0
 80058b6:	d1f7      	bne.n	80058a8 <_fwalk_sglue+0xc>
 80058b8:	4630      	mov	r0, r6
 80058ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058be:	89ab      	ldrh	r3, [r5, #12]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d907      	bls.n	80058d4 <_fwalk_sglue+0x38>
 80058c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058c8:	3301      	adds	r3, #1
 80058ca:	d003      	beq.n	80058d4 <_fwalk_sglue+0x38>
 80058cc:	4629      	mov	r1, r5
 80058ce:	4638      	mov	r0, r7
 80058d0:	47c0      	blx	r8
 80058d2:	4306      	orrs	r6, r0
 80058d4:	3568      	adds	r5, #104	; 0x68
 80058d6:	e7e9      	b.n	80058ac <_fwalk_sglue+0x10>

080058d8 <iprintf>:
 80058d8:	b40f      	push	{r0, r1, r2, r3}
 80058da:	b507      	push	{r0, r1, r2, lr}
 80058dc:	4906      	ldr	r1, [pc, #24]	; (80058f8 <iprintf+0x20>)
 80058de:	ab04      	add	r3, sp, #16
 80058e0:	6808      	ldr	r0, [r1, #0]
 80058e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80058e6:	6881      	ldr	r1, [r0, #8]
 80058e8:	9301      	str	r3, [sp, #4]
 80058ea:	f001 fcd9 	bl	80072a0 <_vfiprintf_r>
 80058ee:	b003      	add	sp, #12
 80058f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80058f4:	b004      	add	sp, #16
 80058f6:	4770      	bx	lr
 80058f8:	20000064 	.word	0x20000064

080058fc <_puts_r>:
 80058fc:	6a03      	ldr	r3, [r0, #32]
 80058fe:	b570      	push	{r4, r5, r6, lr}
 8005900:	6884      	ldr	r4, [r0, #8]
 8005902:	4605      	mov	r5, r0
 8005904:	460e      	mov	r6, r1
 8005906:	b90b      	cbnz	r3, 800590c <_puts_r+0x10>
 8005908:	f7ff ffb0 	bl	800586c <__sinit>
 800590c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800590e:	07db      	lsls	r3, r3, #31
 8005910:	d405      	bmi.n	800591e <_puts_r+0x22>
 8005912:	89a3      	ldrh	r3, [r4, #12]
 8005914:	0598      	lsls	r0, r3, #22
 8005916:	d402      	bmi.n	800591e <_puts_r+0x22>
 8005918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800591a:	f000 f99f 	bl	8005c5c <__retarget_lock_acquire_recursive>
 800591e:	89a3      	ldrh	r3, [r4, #12]
 8005920:	0719      	lsls	r1, r3, #28
 8005922:	d513      	bpl.n	800594c <_puts_r+0x50>
 8005924:	6923      	ldr	r3, [r4, #16]
 8005926:	b18b      	cbz	r3, 800594c <_puts_r+0x50>
 8005928:	3e01      	subs	r6, #1
 800592a:	68a3      	ldr	r3, [r4, #8]
 800592c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005930:	3b01      	subs	r3, #1
 8005932:	60a3      	str	r3, [r4, #8]
 8005934:	b9e9      	cbnz	r1, 8005972 <_puts_r+0x76>
 8005936:	2b00      	cmp	r3, #0
 8005938:	da2e      	bge.n	8005998 <_puts_r+0x9c>
 800593a:	4622      	mov	r2, r4
 800593c:	210a      	movs	r1, #10
 800593e:	4628      	mov	r0, r5
 8005940:	f000 f87b 	bl	8005a3a <__swbuf_r>
 8005944:	3001      	adds	r0, #1
 8005946:	d007      	beq.n	8005958 <_puts_r+0x5c>
 8005948:	250a      	movs	r5, #10
 800594a:	e007      	b.n	800595c <_puts_r+0x60>
 800594c:	4621      	mov	r1, r4
 800594e:	4628      	mov	r0, r5
 8005950:	f000 f8b0 	bl	8005ab4 <__swsetup_r>
 8005954:	2800      	cmp	r0, #0
 8005956:	d0e7      	beq.n	8005928 <_puts_r+0x2c>
 8005958:	f04f 35ff 	mov.w	r5, #4294967295
 800595c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800595e:	07da      	lsls	r2, r3, #31
 8005960:	d405      	bmi.n	800596e <_puts_r+0x72>
 8005962:	89a3      	ldrh	r3, [r4, #12]
 8005964:	059b      	lsls	r3, r3, #22
 8005966:	d402      	bmi.n	800596e <_puts_r+0x72>
 8005968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800596a:	f000 f978 	bl	8005c5e <__retarget_lock_release_recursive>
 800596e:	4628      	mov	r0, r5
 8005970:	bd70      	pop	{r4, r5, r6, pc}
 8005972:	2b00      	cmp	r3, #0
 8005974:	da04      	bge.n	8005980 <_puts_r+0x84>
 8005976:	69a2      	ldr	r2, [r4, #24]
 8005978:	429a      	cmp	r2, r3
 800597a:	dc06      	bgt.n	800598a <_puts_r+0x8e>
 800597c:	290a      	cmp	r1, #10
 800597e:	d004      	beq.n	800598a <_puts_r+0x8e>
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	1c5a      	adds	r2, r3, #1
 8005984:	6022      	str	r2, [r4, #0]
 8005986:	7019      	strb	r1, [r3, #0]
 8005988:	e7cf      	b.n	800592a <_puts_r+0x2e>
 800598a:	4622      	mov	r2, r4
 800598c:	4628      	mov	r0, r5
 800598e:	f000 f854 	bl	8005a3a <__swbuf_r>
 8005992:	3001      	adds	r0, #1
 8005994:	d1c9      	bne.n	800592a <_puts_r+0x2e>
 8005996:	e7df      	b.n	8005958 <_puts_r+0x5c>
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	250a      	movs	r5, #10
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	6022      	str	r2, [r4, #0]
 80059a0:	701d      	strb	r5, [r3, #0]
 80059a2:	e7db      	b.n	800595c <_puts_r+0x60>

080059a4 <puts>:
 80059a4:	4b02      	ldr	r3, [pc, #8]	; (80059b0 <puts+0xc>)
 80059a6:	4601      	mov	r1, r0
 80059a8:	6818      	ldr	r0, [r3, #0]
 80059aa:	f7ff bfa7 	b.w	80058fc <_puts_r>
 80059ae:	bf00      	nop
 80059b0:	20000064 	.word	0x20000064

080059b4 <__sread>:
 80059b4:	b510      	push	{r4, lr}
 80059b6:	460c      	mov	r4, r1
 80059b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059bc:	f000 f900 	bl	8005bc0 <_read_r>
 80059c0:	2800      	cmp	r0, #0
 80059c2:	bfab      	itete	ge
 80059c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059c6:	89a3      	ldrhlt	r3, [r4, #12]
 80059c8:	181b      	addge	r3, r3, r0
 80059ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059ce:	bfac      	ite	ge
 80059d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80059d2:	81a3      	strhlt	r3, [r4, #12]
 80059d4:	bd10      	pop	{r4, pc}

080059d6 <__swrite>:
 80059d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059da:	461f      	mov	r7, r3
 80059dc:	898b      	ldrh	r3, [r1, #12]
 80059de:	05db      	lsls	r3, r3, #23
 80059e0:	4605      	mov	r5, r0
 80059e2:	460c      	mov	r4, r1
 80059e4:	4616      	mov	r6, r2
 80059e6:	d505      	bpl.n	80059f4 <__swrite+0x1e>
 80059e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ec:	2302      	movs	r3, #2
 80059ee:	2200      	movs	r2, #0
 80059f0:	f000 f8d4 	bl	8005b9c <_lseek_r>
 80059f4:	89a3      	ldrh	r3, [r4, #12]
 80059f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059fe:	81a3      	strh	r3, [r4, #12]
 8005a00:	4632      	mov	r2, r6
 8005a02:	463b      	mov	r3, r7
 8005a04:	4628      	mov	r0, r5
 8005a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0a:	f000 b8eb 	b.w	8005be4 <_write_r>

08005a0e <__sseek>:
 8005a0e:	b510      	push	{r4, lr}
 8005a10:	460c      	mov	r4, r1
 8005a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a16:	f000 f8c1 	bl	8005b9c <_lseek_r>
 8005a1a:	1c43      	adds	r3, r0, #1
 8005a1c:	89a3      	ldrh	r3, [r4, #12]
 8005a1e:	bf15      	itete	ne
 8005a20:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a2a:	81a3      	strheq	r3, [r4, #12]
 8005a2c:	bf18      	it	ne
 8005a2e:	81a3      	strhne	r3, [r4, #12]
 8005a30:	bd10      	pop	{r4, pc}

08005a32 <__sclose>:
 8005a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a36:	f000 b8a1 	b.w	8005b7c <_close_r>

08005a3a <__swbuf_r>:
 8005a3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3c:	460e      	mov	r6, r1
 8005a3e:	4614      	mov	r4, r2
 8005a40:	4605      	mov	r5, r0
 8005a42:	b118      	cbz	r0, 8005a4c <__swbuf_r+0x12>
 8005a44:	6a03      	ldr	r3, [r0, #32]
 8005a46:	b90b      	cbnz	r3, 8005a4c <__swbuf_r+0x12>
 8005a48:	f7ff ff10 	bl	800586c <__sinit>
 8005a4c:	69a3      	ldr	r3, [r4, #24]
 8005a4e:	60a3      	str	r3, [r4, #8]
 8005a50:	89a3      	ldrh	r3, [r4, #12]
 8005a52:	071a      	lsls	r2, r3, #28
 8005a54:	d525      	bpl.n	8005aa2 <__swbuf_r+0x68>
 8005a56:	6923      	ldr	r3, [r4, #16]
 8005a58:	b31b      	cbz	r3, 8005aa2 <__swbuf_r+0x68>
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	6922      	ldr	r2, [r4, #16]
 8005a5e:	1a98      	subs	r0, r3, r2
 8005a60:	6963      	ldr	r3, [r4, #20]
 8005a62:	b2f6      	uxtb	r6, r6
 8005a64:	4283      	cmp	r3, r0
 8005a66:	4637      	mov	r7, r6
 8005a68:	dc04      	bgt.n	8005a74 <__swbuf_r+0x3a>
 8005a6a:	4621      	mov	r1, r4
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	f001 fdb7 	bl	80075e0 <_fflush_r>
 8005a72:	b9e0      	cbnz	r0, 8005aae <__swbuf_r+0x74>
 8005a74:	68a3      	ldr	r3, [r4, #8]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	60a3      	str	r3, [r4, #8]
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	6022      	str	r2, [r4, #0]
 8005a80:	701e      	strb	r6, [r3, #0]
 8005a82:	6962      	ldr	r2, [r4, #20]
 8005a84:	1c43      	adds	r3, r0, #1
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d004      	beq.n	8005a94 <__swbuf_r+0x5a>
 8005a8a:	89a3      	ldrh	r3, [r4, #12]
 8005a8c:	07db      	lsls	r3, r3, #31
 8005a8e:	d506      	bpl.n	8005a9e <__swbuf_r+0x64>
 8005a90:	2e0a      	cmp	r6, #10
 8005a92:	d104      	bne.n	8005a9e <__swbuf_r+0x64>
 8005a94:	4621      	mov	r1, r4
 8005a96:	4628      	mov	r0, r5
 8005a98:	f001 fda2 	bl	80075e0 <_fflush_r>
 8005a9c:	b938      	cbnz	r0, 8005aae <__swbuf_r+0x74>
 8005a9e:	4638      	mov	r0, r7
 8005aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aa2:	4621      	mov	r1, r4
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	f000 f805 	bl	8005ab4 <__swsetup_r>
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	d0d5      	beq.n	8005a5a <__swbuf_r+0x20>
 8005aae:	f04f 37ff 	mov.w	r7, #4294967295
 8005ab2:	e7f4      	b.n	8005a9e <__swbuf_r+0x64>

08005ab4 <__swsetup_r>:
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	4b2a      	ldr	r3, [pc, #168]	; (8005b60 <__swsetup_r+0xac>)
 8005ab8:	4605      	mov	r5, r0
 8005aba:	6818      	ldr	r0, [r3, #0]
 8005abc:	460c      	mov	r4, r1
 8005abe:	b118      	cbz	r0, 8005ac8 <__swsetup_r+0x14>
 8005ac0:	6a03      	ldr	r3, [r0, #32]
 8005ac2:	b90b      	cbnz	r3, 8005ac8 <__swsetup_r+0x14>
 8005ac4:	f7ff fed2 	bl	800586c <__sinit>
 8005ac8:	89a3      	ldrh	r3, [r4, #12]
 8005aca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ace:	0718      	lsls	r0, r3, #28
 8005ad0:	d422      	bmi.n	8005b18 <__swsetup_r+0x64>
 8005ad2:	06d9      	lsls	r1, r3, #27
 8005ad4:	d407      	bmi.n	8005ae6 <__swsetup_r+0x32>
 8005ad6:	2309      	movs	r3, #9
 8005ad8:	602b      	str	r3, [r5, #0]
 8005ada:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ade:	81a3      	strh	r3, [r4, #12]
 8005ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae4:	e034      	b.n	8005b50 <__swsetup_r+0x9c>
 8005ae6:	0758      	lsls	r0, r3, #29
 8005ae8:	d512      	bpl.n	8005b10 <__swsetup_r+0x5c>
 8005aea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005aec:	b141      	cbz	r1, 8005b00 <__swsetup_r+0x4c>
 8005aee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005af2:	4299      	cmp	r1, r3
 8005af4:	d002      	beq.n	8005afc <__swsetup_r+0x48>
 8005af6:	4628      	mov	r0, r5
 8005af8:	f000 ff2c 	bl	8006954 <_free_r>
 8005afc:	2300      	movs	r3, #0
 8005afe:	6363      	str	r3, [r4, #52]	; 0x34
 8005b00:	89a3      	ldrh	r3, [r4, #12]
 8005b02:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b06:	81a3      	strh	r3, [r4, #12]
 8005b08:	2300      	movs	r3, #0
 8005b0a:	6063      	str	r3, [r4, #4]
 8005b0c:	6923      	ldr	r3, [r4, #16]
 8005b0e:	6023      	str	r3, [r4, #0]
 8005b10:	89a3      	ldrh	r3, [r4, #12]
 8005b12:	f043 0308 	orr.w	r3, r3, #8
 8005b16:	81a3      	strh	r3, [r4, #12]
 8005b18:	6923      	ldr	r3, [r4, #16]
 8005b1a:	b94b      	cbnz	r3, 8005b30 <__swsetup_r+0x7c>
 8005b1c:	89a3      	ldrh	r3, [r4, #12]
 8005b1e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b26:	d003      	beq.n	8005b30 <__swsetup_r+0x7c>
 8005b28:	4621      	mov	r1, r4
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	f001 fda6 	bl	800767c <__smakebuf_r>
 8005b30:	89a0      	ldrh	r0, [r4, #12]
 8005b32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b36:	f010 0301 	ands.w	r3, r0, #1
 8005b3a:	d00a      	beq.n	8005b52 <__swsetup_r+0x9e>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	60a3      	str	r3, [r4, #8]
 8005b40:	6963      	ldr	r3, [r4, #20]
 8005b42:	425b      	negs	r3, r3
 8005b44:	61a3      	str	r3, [r4, #24]
 8005b46:	6923      	ldr	r3, [r4, #16]
 8005b48:	b943      	cbnz	r3, 8005b5c <__swsetup_r+0xa8>
 8005b4a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b4e:	d1c4      	bne.n	8005ada <__swsetup_r+0x26>
 8005b50:	bd38      	pop	{r3, r4, r5, pc}
 8005b52:	0781      	lsls	r1, r0, #30
 8005b54:	bf58      	it	pl
 8005b56:	6963      	ldrpl	r3, [r4, #20]
 8005b58:	60a3      	str	r3, [r4, #8]
 8005b5a:	e7f4      	b.n	8005b46 <__swsetup_r+0x92>
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	e7f7      	b.n	8005b50 <__swsetup_r+0x9c>
 8005b60:	20000064 	.word	0x20000064

08005b64 <memset>:
 8005b64:	4402      	add	r2, r0
 8005b66:	4603      	mov	r3, r0
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d100      	bne.n	8005b6e <memset+0xa>
 8005b6c:	4770      	bx	lr
 8005b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b72:	e7f9      	b.n	8005b68 <memset+0x4>

08005b74 <_localeconv_r>:
 8005b74:	4800      	ldr	r0, [pc, #0]	; (8005b78 <_localeconv_r+0x4>)
 8005b76:	4770      	bx	lr
 8005b78:	20000158 	.word	0x20000158

08005b7c <_close_r>:
 8005b7c:	b538      	push	{r3, r4, r5, lr}
 8005b7e:	4d06      	ldr	r5, [pc, #24]	; (8005b98 <_close_r+0x1c>)
 8005b80:	2300      	movs	r3, #0
 8005b82:	4604      	mov	r4, r0
 8005b84:	4608      	mov	r0, r1
 8005b86:	602b      	str	r3, [r5, #0]
 8005b88:	f7fc fa61 	bl	800204e <_close>
 8005b8c:	1c43      	adds	r3, r0, #1
 8005b8e:	d102      	bne.n	8005b96 <_close_r+0x1a>
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	b103      	cbz	r3, 8005b96 <_close_r+0x1a>
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	bd38      	pop	{r3, r4, r5, pc}
 8005b98:	200003e0 	.word	0x200003e0

08005b9c <_lseek_r>:
 8005b9c:	b538      	push	{r3, r4, r5, lr}
 8005b9e:	4d07      	ldr	r5, [pc, #28]	; (8005bbc <_lseek_r+0x20>)
 8005ba0:	4604      	mov	r4, r0
 8005ba2:	4608      	mov	r0, r1
 8005ba4:	4611      	mov	r1, r2
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	602a      	str	r2, [r5, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	f7fc fa76 	bl	800209c <_lseek>
 8005bb0:	1c43      	adds	r3, r0, #1
 8005bb2:	d102      	bne.n	8005bba <_lseek_r+0x1e>
 8005bb4:	682b      	ldr	r3, [r5, #0]
 8005bb6:	b103      	cbz	r3, 8005bba <_lseek_r+0x1e>
 8005bb8:	6023      	str	r3, [r4, #0]
 8005bba:	bd38      	pop	{r3, r4, r5, pc}
 8005bbc:	200003e0 	.word	0x200003e0

08005bc0 <_read_r>:
 8005bc0:	b538      	push	{r3, r4, r5, lr}
 8005bc2:	4d07      	ldr	r5, [pc, #28]	; (8005be0 <_read_r+0x20>)
 8005bc4:	4604      	mov	r4, r0
 8005bc6:	4608      	mov	r0, r1
 8005bc8:	4611      	mov	r1, r2
 8005bca:	2200      	movs	r2, #0
 8005bcc:	602a      	str	r2, [r5, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f7fc fa20 	bl	8002014 <_read>
 8005bd4:	1c43      	adds	r3, r0, #1
 8005bd6:	d102      	bne.n	8005bde <_read_r+0x1e>
 8005bd8:	682b      	ldr	r3, [r5, #0]
 8005bda:	b103      	cbz	r3, 8005bde <_read_r+0x1e>
 8005bdc:	6023      	str	r3, [r4, #0]
 8005bde:	bd38      	pop	{r3, r4, r5, pc}
 8005be0:	200003e0 	.word	0x200003e0

08005be4 <_write_r>:
 8005be4:	b538      	push	{r3, r4, r5, lr}
 8005be6:	4d07      	ldr	r5, [pc, #28]	; (8005c04 <_write_r+0x20>)
 8005be8:	4604      	mov	r4, r0
 8005bea:	4608      	mov	r0, r1
 8005bec:	4611      	mov	r1, r2
 8005bee:	2200      	movs	r2, #0
 8005bf0:	602a      	str	r2, [r5, #0]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	f7fb fcaa 	bl	800154c <_write>
 8005bf8:	1c43      	adds	r3, r0, #1
 8005bfa:	d102      	bne.n	8005c02 <_write_r+0x1e>
 8005bfc:	682b      	ldr	r3, [r5, #0]
 8005bfe:	b103      	cbz	r3, 8005c02 <_write_r+0x1e>
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	bd38      	pop	{r3, r4, r5, pc}
 8005c04:	200003e0 	.word	0x200003e0

08005c08 <__errno>:
 8005c08:	4b01      	ldr	r3, [pc, #4]	; (8005c10 <__errno+0x8>)
 8005c0a:	6818      	ldr	r0, [r3, #0]
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	20000064 	.word	0x20000064

08005c14 <__libc_init_array>:
 8005c14:	b570      	push	{r4, r5, r6, lr}
 8005c16:	4d0d      	ldr	r5, [pc, #52]	; (8005c4c <__libc_init_array+0x38>)
 8005c18:	4c0d      	ldr	r4, [pc, #52]	; (8005c50 <__libc_init_array+0x3c>)
 8005c1a:	1b64      	subs	r4, r4, r5
 8005c1c:	10a4      	asrs	r4, r4, #2
 8005c1e:	2600      	movs	r6, #0
 8005c20:	42a6      	cmp	r6, r4
 8005c22:	d109      	bne.n	8005c38 <__libc_init_array+0x24>
 8005c24:	4d0b      	ldr	r5, [pc, #44]	; (8005c54 <__libc_init_array+0x40>)
 8005c26:	4c0c      	ldr	r4, [pc, #48]	; (8005c58 <__libc_init_array+0x44>)
 8005c28:	f001 fe56 	bl	80078d8 <_init>
 8005c2c:	1b64      	subs	r4, r4, r5
 8005c2e:	10a4      	asrs	r4, r4, #2
 8005c30:	2600      	movs	r6, #0
 8005c32:	42a6      	cmp	r6, r4
 8005c34:	d105      	bne.n	8005c42 <__libc_init_array+0x2e>
 8005c36:	bd70      	pop	{r4, r5, r6, pc}
 8005c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c3c:	4798      	blx	r3
 8005c3e:	3601      	adds	r6, #1
 8005c40:	e7ee      	b.n	8005c20 <__libc_init_array+0xc>
 8005c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c46:	4798      	blx	r3
 8005c48:	3601      	adds	r6, #1
 8005c4a:	e7f2      	b.n	8005c32 <__libc_init_array+0x1e>
 8005c4c:	08007cdc 	.word	0x08007cdc
 8005c50:	08007cdc 	.word	0x08007cdc
 8005c54:	08007cdc 	.word	0x08007cdc
 8005c58:	08007ce0 	.word	0x08007ce0

08005c5c <__retarget_lock_acquire_recursive>:
 8005c5c:	4770      	bx	lr

08005c5e <__retarget_lock_release_recursive>:
 8005c5e:	4770      	bx	lr

08005c60 <quorem>:
 8005c60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c64:	6903      	ldr	r3, [r0, #16]
 8005c66:	690c      	ldr	r4, [r1, #16]
 8005c68:	42a3      	cmp	r3, r4
 8005c6a:	4607      	mov	r7, r0
 8005c6c:	db7e      	blt.n	8005d6c <quorem+0x10c>
 8005c6e:	3c01      	subs	r4, #1
 8005c70:	f101 0814 	add.w	r8, r1, #20
 8005c74:	f100 0514 	add.w	r5, r0, #20
 8005c78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c7c:	9301      	str	r3, [sp, #4]
 8005c7e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c86:	3301      	adds	r3, #1
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c8e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c92:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c96:	d331      	bcc.n	8005cfc <quorem+0x9c>
 8005c98:	f04f 0e00 	mov.w	lr, #0
 8005c9c:	4640      	mov	r0, r8
 8005c9e:	46ac      	mov	ip, r5
 8005ca0:	46f2      	mov	sl, lr
 8005ca2:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ca6:	b293      	uxth	r3, r2
 8005ca8:	fb06 e303 	mla	r3, r6, r3, lr
 8005cac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005cb0:	0c1a      	lsrs	r2, r3, #16
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	ebaa 0303 	sub.w	r3, sl, r3
 8005cb8:	f8dc a000 	ldr.w	sl, [ip]
 8005cbc:	fa13 f38a 	uxtah	r3, r3, sl
 8005cc0:	fb06 220e 	mla	r2, r6, lr, r2
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	9b00      	ldr	r3, [sp, #0]
 8005cc8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ccc:	b292      	uxth	r2, r2
 8005cce:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005cd2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cd6:	f8bd 3000 	ldrh.w	r3, [sp]
 8005cda:	4581      	cmp	r9, r0
 8005cdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ce0:	f84c 3b04 	str.w	r3, [ip], #4
 8005ce4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005ce8:	d2db      	bcs.n	8005ca2 <quorem+0x42>
 8005cea:	f855 300b 	ldr.w	r3, [r5, fp]
 8005cee:	b92b      	cbnz	r3, 8005cfc <quorem+0x9c>
 8005cf0:	9b01      	ldr	r3, [sp, #4]
 8005cf2:	3b04      	subs	r3, #4
 8005cf4:	429d      	cmp	r5, r3
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	d32c      	bcc.n	8005d54 <quorem+0xf4>
 8005cfa:	613c      	str	r4, [r7, #16]
 8005cfc:	4638      	mov	r0, r7
 8005cfe:	f001 f9a5 	bl	800704c <__mcmp>
 8005d02:	2800      	cmp	r0, #0
 8005d04:	db22      	blt.n	8005d4c <quorem+0xec>
 8005d06:	3601      	adds	r6, #1
 8005d08:	4629      	mov	r1, r5
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d10:	f8d1 c000 	ldr.w	ip, [r1]
 8005d14:	b293      	uxth	r3, r2
 8005d16:	1ac3      	subs	r3, r0, r3
 8005d18:	0c12      	lsrs	r2, r2, #16
 8005d1a:	fa13 f38c 	uxtah	r3, r3, ip
 8005d1e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005d22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d2c:	45c1      	cmp	r9, r8
 8005d2e:	f841 3b04 	str.w	r3, [r1], #4
 8005d32:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005d36:	d2e9      	bcs.n	8005d0c <quorem+0xac>
 8005d38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d40:	b922      	cbnz	r2, 8005d4c <quorem+0xec>
 8005d42:	3b04      	subs	r3, #4
 8005d44:	429d      	cmp	r5, r3
 8005d46:	461a      	mov	r2, r3
 8005d48:	d30a      	bcc.n	8005d60 <quorem+0x100>
 8005d4a:	613c      	str	r4, [r7, #16]
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	b003      	add	sp, #12
 8005d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d54:	6812      	ldr	r2, [r2, #0]
 8005d56:	3b04      	subs	r3, #4
 8005d58:	2a00      	cmp	r2, #0
 8005d5a:	d1ce      	bne.n	8005cfa <quorem+0x9a>
 8005d5c:	3c01      	subs	r4, #1
 8005d5e:	e7c9      	b.n	8005cf4 <quorem+0x94>
 8005d60:	6812      	ldr	r2, [r2, #0]
 8005d62:	3b04      	subs	r3, #4
 8005d64:	2a00      	cmp	r2, #0
 8005d66:	d1f0      	bne.n	8005d4a <quorem+0xea>
 8005d68:	3c01      	subs	r4, #1
 8005d6a:	e7eb      	b.n	8005d44 <quorem+0xe4>
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	e7ee      	b.n	8005d4e <quorem+0xee>

08005d70 <_dtoa_r>:
 8005d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d74:	ed2d 8b04 	vpush	{d8-d9}
 8005d78:	69c5      	ldr	r5, [r0, #28]
 8005d7a:	b093      	sub	sp, #76	; 0x4c
 8005d7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005d80:	ec57 6b10 	vmov	r6, r7, d0
 8005d84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005d88:	9107      	str	r1, [sp, #28]
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	920a      	str	r2, [sp, #40]	; 0x28
 8005d8e:	930d      	str	r3, [sp, #52]	; 0x34
 8005d90:	b975      	cbnz	r5, 8005db0 <_dtoa_r+0x40>
 8005d92:	2010      	movs	r0, #16
 8005d94:	f000 fe2a 	bl	80069ec <malloc>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	61e0      	str	r0, [r4, #28]
 8005d9c:	b920      	cbnz	r0, 8005da8 <_dtoa_r+0x38>
 8005d9e:	4bae      	ldr	r3, [pc, #696]	; (8006058 <_dtoa_r+0x2e8>)
 8005da0:	21ef      	movs	r1, #239	; 0xef
 8005da2:	48ae      	ldr	r0, [pc, #696]	; (800605c <_dtoa_r+0x2ec>)
 8005da4:	f001 fce6 	bl	8007774 <__assert_func>
 8005da8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005dac:	6005      	str	r5, [r0, #0]
 8005dae:	60c5      	str	r5, [r0, #12]
 8005db0:	69e3      	ldr	r3, [r4, #28]
 8005db2:	6819      	ldr	r1, [r3, #0]
 8005db4:	b151      	cbz	r1, 8005dcc <_dtoa_r+0x5c>
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	604a      	str	r2, [r1, #4]
 8005dba:	2301      	movs	r3, #1
 8005dbc:	4093      	lsls	r3, r2
 8005dbe:	608b      	str	r3, [r1, #8]
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f000 ff07 	bl	8006bd4 <_Bfree>
 8005dc6:	69e3      	ldr	r3, [r4, #28]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	1e3b      	subs	r3, r7, #0
 8005dce:	bfbb      	ittet	lt
 8005dd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005dd4:	9303      	strlt	r3, [sp, #12]
 8005dd6:	2300      	movge	r3, #0
 8005dd8:	2201      	movlt	r2, #1
 8005dda:	bfac      	ite	ge
 8005ddc:	f8c8 3000 	strge.w	r3, [r8]
 8005de0:	f8c8 2000 	strlt.w	r2, [r8]
 8005de4:	4b9e      	ldr	r3, [pc, #632]	; (8006060 <_dtoa_r+0x2f0>)
 8005de6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005dea:	ea33 0308 	bics.w	r3, r3, r8
 8005dee:	d11b      	bne.n	8005e28 <_dtoa_r+0xb8>
 8005df0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005df2:	f242 730f 	movw	r3, #9999	; 0x270f
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005dfc:	4333      	orrs	r3, r6
 8005dfe:	f000 8593 	beq.w	8006928 <_dtoa_r+0xbb8>
 8005e02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e04:	b963      	cbnz	r3, 8005e20 <_dtoa_r+0xb0>
 8005e06:	4b97      	ldr	r3, [pc, #604]	; (8006064 <_dtoa_r+0x2f4>)
 8005e08:	e027      	b.n	8005e5a <_dtoa_r+0xea>
 8005e0a:	4b97      	ldr	r3, [pc, #604]	; (8006068 <_dtoa_r+0x2f8>)
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	3308      	adds	r3, #8
 8005e10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e12:	6013      	str	r3, [r2, #0]
 8005e14:	9800      	ldr	r0, [sp, #0]
 8005e16:	b013      	add	sp, #76	; 0x4c
 8005e18:	ecbd 8b04 	vpop	{d8-d9}
 8005e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e20:	4b90      	ldr	r3, [pc, #576]	; (8006064 <_dtoa_r+0x2f4>)
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	3303      	adds	r3, #3
 8005e26:	e7f3      	b.n	8005e10 <_dtoa_r+0xa0>
 8005e28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	ec51 0b17 	vmov	r0, r1, d7
 8005e32:	eeb0 8a47 	vmov.f32	s16, s14
 8005e36:	eef0 8a67 	vmov.f32	s17, s15
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	f7fa fe4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e40:	4681      	mov	r9, r0
 8005e42:	b160      	cbz	r0, 8005e5e <_dtoa_r+0xee>
 8005e44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e46:	2301      	movs	r3, #1
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 8568 	beq.w	8006922 <_dtoa_r+0xbb2>
 8005e52:	4b86      	ldr	r3, [pc, #536]	; (800606c <_dtoa_r+0x2fc>)
 8005e54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	e7da      	b.n	8005e14 <_dtoa_r+0xa4>
 8005e5e:	aa10      	add	r2, sp, #64	; 0x40
 8005e60:	a911      	add	r1, sp, #68	; 0x44
 8005e62:	4620      	mov	r0, r4
 8005e64:	eeb0 0a48 	vmov.f32	s0, s16
 8005e68:	eef0 0a68 	vmov.f32	s1, s17
 8005e6c:	f001 f994 	bl	8007198 <__d2b>
 8005e70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005e74:	4682      	mov	sl, r0
 8005e76:	2d00      	cmp	r5, #0
 8005e78:	d07f      	beq.n	8005f7a <_dtoa_r+0x20a>
 8005e7a:	ee18 3a90 	vmov	r3, s17
 8005e7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e82:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005e86:	ec51 0b18 	vmov	r0, r1, d8
 8005e8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005e8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005e92:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005e96:	4619      	mov	r1, r3
 8005e98:	2200      	movs	r2, #0
 8005e9a:	4b75      	ldr	r3, [pc, #468]	; (8006070 <_dtoa_r+0x300>)
 8005e9c:	f7fa f9fc 	bl	8000298 <__aeabi_dsub>
 8005ea0:	a367      	add	r3, pc, #412	; (adr r3, 8006040 <_dtoa_r+0x2d0>)
 8005ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea6:	f7fa fbaf 	bl	8000608 <__aeabi_dmul>
 8005eaa:	a367      	add	r3, pc, #412	; (adr r3, 8006048 <_dtoa_r+0x2d8>)
 8005eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb0:	f7fa f9f4 	bl	800029c <__adddf3>
 8005eb4:	4606      	mov	r6, r0
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	460f      	mov	r7, r1
 8005eba:	f7fa fb3b 	bl	8000534 <__aeabi_i2d>
 8005ebe:	a364      	add	r3, pc, #400	; (adr r3, 8006050 <_dtoa_r+0x2e0>)
 8005ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec4:	f7fa fba0 	bl	8000608 <__aeabi_dmul>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	4630      	mov	r0, r6
 8005ece:	4639      	mov	r1, r7
 8005ed0:	f7fa f9e4 	bl	800029c <__adddf3>
 8005ed4:	4606      	mov	r6, r0
 8005ed6:	460f      	mov	r7, r1
 8005ed8:	f7fa fe46 	bl	8000b68 <__aeabi_d2iz>
 8005edc:	2200      	movs	r2, #0
 8005ede:	4683      	mov	fp, r0
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	4639      	mov	r1, r7
 8005ee6:	f7fa fe01 	bl	8000aec <__aeabi_dcmplt>
 8005eea:	b148      	cbz	r0, 8005f00 <_dtoa_r+0x190>
 8005eec:	4658      	mov	r0, fp
 8005eee:	f7fa fb21 	bl	8000534 <__aeabi_i2d>
 8005ef2:	4632      	mov	r2, r6
 8005ef4:	463b      	mov	r3, r7
 8005ef6:	f7fa fdef 	bl	8000ad8 <__aeabi_dcmpeq>
 8005efa:	b908      	cbnz	r0, 8005f00 <_dtoa_r+0x190>
 8005efc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f00:	f1bb 0f16 	cmp.w	fp, #22
 8005f04:	d857      	bhi.n	8005fb6 <_dtoa_r+0x246>
 8005f06:	4b5b      	ldr	r3, [pc, #364]	; (8006074 <_dtoa_r+0x304>)
 8005f08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f10:	ec51 0b18 	vmov	r0, r1, d8
 8005f14:	f7fa fdea 	bl	8000aec <__aeabi_dcmplt>
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	d04e      	beq.n	8005fba <_dtoa_r+0x24a>
 8005f1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f20:	2300      	movs	r3, #0
 8005f22:	930c      	str	r3, [sp, #48]	; 0x30
 8005f24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f26:	1b5b      	subs	r3, r3, r5
 8005f28:	1e5a      	subs	r2, r3, #1
 8005f2a:	bf45      	ittet	mi
 8005f2c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005f30:	9305      	strmi	r3, [sp, #20]
 8005f32:	2300      	movpl	r3, #0
 8005f34:	2300      	movmi	r3, #0
 8005f36:	9206      	str	r2, [sp, #24]
 8005f38:	bf54      	ite	pl
 8005f3a:	9305      	strpl	r3, [sp, #20]
 8005f3c:	9306      	strmi	r3, [sp, #24]
 8005f3e:	f1bb 0f00 	cmp.w	fp, #0
 8005f42:	db3c      	blt.n	8005fbe <_dtoa_r+0x24e>
 8005f44:	9b06      	ldr	r3, [sp, #24]
 8005f46:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005f4a:	445b      	add	r3, fp
 8005f4c:	9306      	str	r3, [sp, #24]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	9308      	str	r3, [sp, #32]
 8005f52:	9b07      	ldr	r3, [sp, #28]
 8005f54:	2b09      	cmp	r3, #9
 8005f56:	d868      	bhi.n	800602a <_dtoa_r+0x2ba>
 8005f58:	2b05      	cmp	r3, #5
 8005f5a:	bfc4      	itt	gt
 8005f5c:	3b04      	subgt	r3, #4
 8005f5e:	9307      	strgt	r3, [sp, #28]
 8005f60:	9b07      	ldr	r3, [sp, #28]
 8005f62:	f1a3 0302 	sub.w	r3, r3, #2
 8005f66:	bfcc      	ite	gt
 8005f68:	2500      	movgt	r5, #0
 8005f6a:	2501      	movle	r5, #1
 8005f6c:	2b03      	cmp	r3, #3
 8005f6e:	f200 8085 	bhi.w	800607c <_dtoa_r+0x30c>
 8005f72:	e8df f003 	tbb	[pc, r3]
 8005f76:	3b2e      	.short	0x3b2e
 8005f78:	5839      	.short	0x5839
 8005f7a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005f7e:	441d      	add	r5, r3
 8005f80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	bfc1      	itttt	gt
 8005f88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f8c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005f90:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005f94:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005f98:	bfd6      	itet	le
 8005f9a:	f1c3 0320 	rsble	r3, r3, #32
 8005f9e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005fa2:	fa06 f003 	lslle.w	r0, r6, r3
 8005fa6:	f7fa fab5 	bl	8000514 <__aeabi_ui2d>
 8005faa:	2201      	movs	r2, #1
 8005fac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005fb0:	3d01      	subs	r5, #1
 8005fb2:	920e      	str	r2, [sp, #56]	; 0x38
 8005fb4:	e76f      	b.n	8005e96 <_dtoa_r+0x126>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e7b3      	b.n	8005f22 <_dtoa_r+0x1b2>
 8005fba:	900c      	str	r0, [sp, #48]	; 0x30
 8005fbc:	e7b2      	b.n	8005f24 <_dtoa_r+0x1b4>
 8005fbe:	9b05      	ldr	r3, [sp, #20]
 8005fc0:	eba3 030b 	sub.w	r3, r3, fp
 8005fc4:	9305      	str	r3, [sp, #20]
 8005fc6:	f1cb 0300 	rsb	r3, fp, #0
 8005fca:	9308      	str	r3, [sp, #32]
 8005fcc:	2300      	movs	r3, #0
 8005fce:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fd0:	e7bf      	b.n	8005f52 <_dtoa_r+0x1e2>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8005fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	dc52      	bgt.n	8006082 <_dtoa_r+0x312>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	9301      	str	r3, [sp, #4]
 8005fe0:	9304      	str	r3, [sp, #16]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	920a      	str	r2, [sp, #40]	; 0x28
 8005fe6:	e00b      	b.n	8006000 <_dtoa_r+0x290>
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e7f3      	b.n	8005fd4 <_dtoa_r+0x264>
 8005fec:	2300      	movs	r3, #0
 8005fee:	9309      	str	r3, [sp, #36]	; 0x24
 8005ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ff2:	445b      	add	r3, fp
 8005ff4:	9301      	str	r3, [sp, #4]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	9304      	str	r3, [sp, #16]
 8005ffc:	bfb8      	it	lt
 8005ffe:	2301      	movlt	r3, #1
 8006000:	69e0      	ldr	r0, [r4, #28]
 8006002:	2100      	movs	r1, #0
 8006004:	2204      	movs	r2, #4
 8006006:	f102 0614 	add.w	r6, r2, #20
 800600a:	429e      	cmp	r6, r3
 800600c:	d93d      	bls.n	800608a <_dtoa_r+0x31a>
 800600e:	6041      	str	r1, [r0, #4]
 8006010:	4620      	mov	r0, r4
 8006012:	f000 fd9f 	bl	8006b54 <_Balloc>
 8006016:	9000      	str	r0, [sp, #0]
 8006018:	2800      	cmp	r0, #0
 800601a:	d139      	bne.n	8006090 <_dtoa_r+0x320>
 800601c:	4b16      	ldr	r3, [pc, #88]	; (8006078 <_dtoa_r+0x308>)
 800601e:	4602      	mov	r2, r0
 8006020:	f240 11af 	movw	r1, #431	; 0x1af
 8006024:	e6bd      	b.n	8005da2 <_dtoa_r+0x32>
 8006026:	2301      	movs	r3, #1
 8006028:	e7e1      	b.n	8005fee <_dtoa_r+0x27e>
 800602a:	2501      	movs	r5, #1
 800602c:	2300      	movs	r3, #0
 800602e:	9307      	str	r3, [sp, #28]
 8006030:	9509      	str	r5, [sp, #36]	; 0x24
 8006032:	f04f 33ff 	mov.w	r3, #4294967295
 8006036:	9301      	str	r3, [sp, #4]
 8006038:	9304      	str	r3, [sp, #16]
 800603a:	2200      	movs	r2, #0
 800603c:	2312      	movs	r3, #18
 800603e:	e7d1      	b.n	8005fe4 <_dtoa_r+0x274>
 8006040:	636f4361 	.word	0x636f4361
 8006044:	3fd287a7 	.word	0x3fd287a7
 8006048:	8b60c8b3 	.word	0x8b60c8b3
 800604c:	3fc68a28 	.word	0x3fc68a28
 8006050:	509f79fb 	.word	0x509f79fb
 8006054:	3fd34413 	.word	0x3fd34413
 8006058:	080079a5 	.word	0x080079a5
 800605c:	080079bc 	.word	0x080079bc
 8006060:	7ff00000 	.word	0x7ff00000
 8006064:	080079a1 	.word	0x080079a1
 8006068:	08007998 	.word	0x08007998
 800606c:	08007975 	.word	0x08007975
 8006070:	3ff80000 	.word	0x3ff80000
 8006074:	08007aa8 	.word	0x08007aa8
 8006078:	08007a14 	.word	0x08007a14
 800607c:	2301      	movs	r3, #1
 800607e:	9309      	str	r3, [sp, #36]	; 0x24
 8006080:	e7d7      	b.n	8006032 <_dtoa_r+0x2c2>
 8006082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006084:	9301      	str	r3, [sp, #4]
 8006086:	9304      	str	r3, [sp, #16]
 8006088:	e7ba      	b.n	8006000 <_dtoa_r+0x290>
 800608a:	3101      	adds	r1, #1
 800608c:	0052      	lsls	r2, r2, #1
 800608e:	e7ba      	b.n	8006006 <_dtoa_r+0x296>
 8006090:	69e3      	ldr	r3, [r4, #28]
 8006092:	9a00      	ldr	r2, [sp, #0]
 8006094:	601a      	str	r2, [r3, #0]
 8006096:	9b04      	ldr	r3, [sp, #16]
 8006098:	2b0e      	cmp	r3, #14
 800609a:	f200 80a8 	bhi.w	80061ee <_dtoa_r+0x47e>
 800609e:	2d00      	cmp	r5, #0
 80060a0:	f000 80a5 	beq.w	80061ee <_dtoa_r+0x47e>
 80060a4:	f1bb 0f00 	cmp.w	fp, #0
 80060a8:	dd38      	ble.n	800611c <_dtoa_r+0x3ac>
 80060aa:	4bc0      	ldr	r3, [pc, #768]	; (80063ac <_dtoa_r+0x63c>)
 80060ac:	f00b 020f 	and.w	r2, fp, #15
 80060b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80060b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80060bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80060c0:	d019      	beq.n	80060f6 <_dtoa_r+0x386>
 80060c2:	4bbb      	ldr	r3, [pc, #748]	; (80063b0 <_dtoa_r+0x640>)
 80060c4:	ec51 0b18 	vmov	r0, r1, d8
 80060c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060cc:	f7fa fbc6 	bl	800085c <__aeabi_ddiv>
 80060d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060d4:	f008 080f 	and.w	r8, r8, #15
 80060d8:	2503      	movs	r5, #3
 80060da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80063b0 <_dtoa_r+0x640>
 80060de:	f1b8 0f00 	cmp.w	r8, #0
 80060e2:	d10a      	bne.n	80060fa <_dtoa_r+0x38a>
 80060e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060e8:	4632      	mov	r2, r6
 80060ea:	463b      	mov	r3, r7
 80060ec:	f7fa fbb6 	bl	800085c <__aeabi_ddiv>
 80060f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060f4:	e02b      	b.n	800614e <_dtoa_r+0x3de>
 80060f6:	2502      	movs	r5, #2
 80060f8:	e7ef      	b.n	80060da <_dtoa_r+0x36a>
 80060fa:	f018 0f01 	tst.w	r8, #1
 80060fe:	d008      	beq.n	8006112 <_dtoa_r+0x3a2>
 8006100:	4630      	mov	r0, r6
 8006102:	4639      	mov	r1, r7
 8006104:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006108:	f7fa fa7e 	bl	8000608 <__aeabi_dmul>
 800610c:	3501      	adds	r5, #1
 800610e:	4606      	mov	r6, r0
 8006110:	460f      	mov	r7, r1
 8006112:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006116:	f109 0908 	add.w	r9, r9, #8
 800611a:	e7e0      	b.n	80060de <_dtoa_r+0x36e>
 800611c:	f000 809f 	beq.w	800625e <_dtoa_r+0x4ee>
 8006120:	f1cb 0600 	rsb	r6, fp, #0
 8006124:	4ba1      	ldr	r3, [pc, #644]	; (80063ac <_dtoa_r+0x63c>)
 8006126:	4fa2      	ldr	r7, [pc, #648]	; (80063b0 <_dtoa_r+0x640>)
 8006128:	f006 020f 	and.w	r2, r6, #15
 800612c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	ec51 0b18 	vmov	r0, r1, d8
 8006138:	f7fa fa66 	bl	8000608 <__aeabi_dmul>
 800613c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006140:	1136      	asrs	r6, r6, #4
 8006142:	2300      	movs	r3, #0
 8006144:	2502      	movs	r5, #2
 8006146:	2e00      	cmp	r6, #0
 8006148:	d17e      	bne.n	8006248 <_dtoa_r+0x4d8>
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1d0      	bne.n	80060f0 <_dtoa_r+0x380>
 800614e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006150:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 8084 	beq.w	8006262 <_dtoa_r+0x4f2>
 800615a:	4b96      	ldr	r3, [pc, #600]	; (80063b4 <_dtoa_r+0x644>)
 800615c:	2200      	movs	r2, #0
 800615e:	4640      	mov	r0, r8
 8006160:	4649      	mov	r1, r9
 8006162:	f7fa fcc3 	bl	8000aec <__aeabi_dcmplt>
 8006166:	2800      	cmp	r0, #0
 8006168:	d07b      	beq.n	8006262 <_dtoa_r+0x4f2>
 800616a:	9b04      	ldr	r3, [sp, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d078      	beq.n	8006262 <_dtoa_r+0x4f2>
 8006170:	9b01      	ldr	r3, [sp, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	dd39      	ble.n	80061ea <_dtoa_r+0x47a>
 8006176:	4b90      	ldr	r3, [pc, #576]	; (80063b8 <_dtoa_r+0x648>)
 8006178:	2200      	movs	r2, #0
 800617a:	4640      	mov	r0, r8
 800617c:	4649      	mov	r1, r9
 800617e:	f7fa fa43 	bl	8000608 <__aeabi_dmul>
 8006182:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006186:	9e01      	ldr	r6, [sp, #4]
 8006188:	f10b 37ff 	add.w	r7, fp, #4294967295
 800618c:	3501      	adds	r5, #1
 800618e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006192:	4628      	mov	r0, r5
 8006194:	f7fa f9ce 	bl	8000534 <__aeabi_i2d>
 8006198:	4642      	mov	r2, r8
 800619a:	464b      	mov	r3, r9
 800619c:	f7fa fa34 	bl	8000608 <__aeabi_dmul>
 80061a0:	4b86      	ldr	r3, [pc, #536]	; (80063bc <_dtoa_r+0x64c>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	f7fa f87a 	bl	800029c <__adddf3>
 80061a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80061ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061b0:	9303      	str	r3, [sp, #12]
 80061b2:	2e00      	cmp	r6, #0
 80061b4:	d158      	bne.n	8006268 <_dtoa_r+0x4f8>
 80061b6:	4b82      	ldr	r3, [pc, #520]	; (80063c0 <_dtoa_r+0x650>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	4640      	mov	r0, r8
 80061bc:	4649      	mov	r1, r9
 80061be:	f7fa f86b 	bl	8000298 <__aeabi_dsub>
 80061c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061c6:	4680      	mov	r8, r0
 80061c8:	4689      	mov	r9, r1
 80061ca:	f7fa fcad 	bl	8000b28 <__aeabi_dcmpgt>
 80061ce:	2800      	cmp	r0, #0
 80061d0:	f040 8296 	bne.w	8006700 <_dtoa_r+0x990>
 80061d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80061d8:	4640      	mov	r0, r8
 80061da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061de:	4649      	mov	r1, r9
 80061e0:	f7fa fc84 	bl	8000aec <__aeabi_dcmplt>
 80061e4:	2800      	cmp	r0, #0
 80061e6:	f040 8289 	bne.w	80066fc <_dtoa_r+0x98c>
 80061ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80061ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f2c0 814e 	blt.w	8006492 <_dtoa_r+0x722>
 80061f6:	f1bb 0f0e 	cmp.w	fp, #14
 80061fa:	f300 814a 	bgt.w	8006492 <_dtoa_r+0x722>
 80061fe:	4b6b      	ldr	r3, [pc, #428]	; (80063ac <_dtoa_r+0x63c>)
 8006200:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006204:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800620a:	2b00      	cmp	r3, #0
 800620c:	f280 80dc 	bge.w	80063c8 <_dtoa_r+0x658>
 8006210:	9b04      	ldr	r3, [sp, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	f300 80d8 	bgt.w	80063c8 <_dtoa_r+0x658>
 8006218:	f040 826f 	bne.w	80066fa <_dtoa_r+0x98a>
 800621c:	4b68      	ldr	r3, [pc, #416]	; (80063c0 <_dtoa_r+0x650>)
 800621e:	2200      	movs	r2, #0
 8006220:	4640      	mov	r0, r8
 8006222:	4649      	mov	r1, r9
 8006224:	f7fa f9f0 	bl	8000608 <__aeabi_dmul>
 8006228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800622c:	f7fa fc72 	bl	8000b14 <__aeabi_dcmpge>
 8006230:	9e04      	ldr	r6, [sp, #16]
 8006232:	4637      	mov	r7, r6
 8006234:	2800      	cmp	r0, #0
 8006236:	f040 8245 	bne.w	80066c4 <_dtoa_r+0x954>
 800623a:	9d00      	ldr	r5, [sp, #0]
 800623c:	2331      	movs	r3, #49	; 0x31
 800623e:	f805 3b01 	strb.w	r3, [r5], #1
 8006242:	f10b 0b01 	add.w	fp, fp, #1
 8006246:	e241      	b.n	80066cc <_dtoa_r+0x95c>
 8006248:	07f2      	lsls	r2, r6, #31
 800624a:	d505      	bpl.n	8006258 <_dtoa_r+0x4e8>
 800624c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006250:	f7fa f9da 	bl	8000608 <__aeabi_dmul>
 8006254:	3501      	adds	r5, #1
 8006256:	2301      	movs	r3, #1
 8006258:	1076      	asrs	r6, r6, #1
 800625a:	3708      	adds	r7, #8
 800625c:	e773      	b.n	8006146 <_dtoa_r+0x3d6>
 800625e:	2502      	movs	r5, #2
 8006260:	e775      	b.n	800614e <_dtoa_r+0x3de>
 8006262:	9e04      	ldr	r6, [sp, #16]
 8006264:	465f      	mov	r7, fp
 8006266:	e792      	b.n	800618e <_dtoa_r+0x41e>
 8006268:	9900      	ldr	r1, [sp, #0]
 800626a:	4b50      	ldr	r3, [pc, #320]	; (80063ac <_dtoa_r+0x63c>)
 800626c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006270:	4431      	add	r1, r6
 8006272:	9102      	str	r1, [sp, #8]
 8006274:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006276:	eeb0 9a47 	vmov.f32	s18, s14
 800627a:	eef0 9a67 	vmov.f32	s19, s15
 800627e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006282:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006286:	2900      	cmp	r1, #0
 8006288:	d044      	beq.n	8006314 <_dtoa_r+0x5a4>
 800628a:	494e      	ldr	r1, [pc, #312]	; (80063c4 <_dtoa_r+0x654>)
 800628c:	2000      	movs	r0, #0
 800628e:	f7fa fae5 	bl	800085c <__aeabi_ddiv>
 8006292:	ec53 2b19 	vmov	r2, r3, d9
 8006296:	f7f9 ffff 	bl	8000298 <__aeabi_dsub>
 800629a:	9d00      	ldr	r5, [sp, #0]
 800629c:	ec41 0b19 	vmov	d9, r0, r1
 80062a0:	4649      	mov	r1, r9
 80062a2:	4640      	mov	r0, r8
 80062a4:	f7fa fc60 	bl	8000b68 <__aeabi_d2iz>
 80062a8:	4606      	mov	r6, r0
 80062aa:	f7fa f943 	bl	8000534 <__aeabi_i2d>
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	4640      	mov	r0, r8
 80062b4:	4649      	mov	r1, r9
 80062b6:	f7f9 ffef 	bl	8000298 <__aeabi_dsub>
 80062ba:	3630      	adds	r6, #48	; 0x30
 80062bc:	f805 6b01 	strb.w	r6, [r5], #1
 80062c0:	ec53 2b19 	vmov	r2, r3, d9
 80062c4:	4680      	mov	r8, r0
 80062c6:	4689      	mov	r9, r1
 80062c8:	f7fa fc10 	bl	8000aec <__aeabi_dcmplt>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d164      	bne.n	800639a <_dtoa_r+0x62a>
 80062d0:	4642      	mov	r2, r8
 80062d2:	464b      	mov	r3, r9
 80062d4:	4937      	ldr	r1, [pc, #220]	; (80063b4 <_dtoa_r+0x644>)
 80062d6:	2000      	movs	r0, #0
 80062d8:	f7f9 ffde 	bl	8000298 <__aeabi_dsub>
 80062dc:	ec53 2b19 	vmov	r2, r3, d9
 80062e0:	f7fa fc04 	bl	8000aec <__aeabi_dcmplt>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	f040 80b6 	bne.w	8006456 <_dtoa_r+0x6e6>
 80062ea:	9b02      	ldr	r3, [sp, #8]
 80062ec:	429d      	cmp	r5, r3
 80062ee:	f43f af7c 	beq.w	80061ea <_dtoa_r+0x47a>
 80062f2:	4b31      	ldr	r3, [pc, #196]	; (80063b8 <_dtoa_r+0x648>)
 80062f4:	ec51 0b19 	vmov	r0, r1, d9
 80062f8:	2200      	movs	r2, #0
 80062fa:	f7fa f985 	bl	8000608 <__aeabi_dmul>
 80062fe:	4b2e      	ldr	r3, [pc, #184]	; (80063b8 <_dtoa_r+0x648>)
 8006300:	ec41 0b19 	vmov	d9, r0, r1
 8006304:	2200      	movs	r2, #0
 8006306:	4640      	mov	r0, r8
 8006308:	4649      	mov	r1, r9
 800630a:	f7fa f97d 	bl	8000608 <__aeabi_dmul>
 800630e:	4680      	mov	r8, r0
 8006310:	4689      	mov	r9, r1
 8006312:	e7c5      	b.n	80062a0 <_dtoa_r+0x530>
 8006314:	ec51 0b17 	vmov	r0, r1, d7
 8006318:	f7fa f976 	bl	8000608 <__aeabi_dmul>
 800631c:	9b02      	ldr	r3, [sp, #8]
 800631e:	9d00      	ldr	r5, [sp, #0]
 8006320:	930f      	str	r3, [sp, #60]	; 0x3c
 8006322:	ec41 0b19 	vmov	d9, r0, r1
 8006326:	4649      	mov	r1, r9
 8006328:	4640      	mov	r0, r8
 800632a:	f7fa fc1d 	bl	8000b68 <__aeabi_d2iz>
 800632e:	4606      	mov	r6, r0
 8006330:	f7fa f900 	bl	8000534 <__aeabi_i2d>
 8006334:	3630      	adds	r6, #48	; 0x30
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	4640      	mov	r0, r8
 800633c:	4649      	mov	r1, r9
 800633e:	f7f9 ffab 	bl	8000298 <__aeabi_dsub>
 8006342:	f805 6b01 	strb.w	r6, [r5], #1
 8006346:	9b02      	ldr	r3, [sp, #8]
 8006348:	429d      	cmp	r5, r3
 800634a:	4680      	mov	r8, r0
 800634c:	4689      	mov	r9, r1
 800634e:	f04f 0200 	mov.w	r2, #0
 8006352:	d124      	bne.n	800639e <_dtoa_r+0x62e>
 8006354:	4b1b      	ldr	r3, [pc, #108]	; (80063c4 <_dtoa_r+0x654>)
 8006356:	ec51 0b19 	vmov	r0, r1, d9
 800635a:	f7f9 ff9f 	bl	800029c <__adddf3>
 800635e:	4602      	mov	r2, r0
 8006360:	460b      	mov	r3, r1
 8006362:	4640      	mov	r0, r8
 8006364:	4649      	mov	r1, r9
 8006366:	f7fa fbdf 	bl	8000b28 <__aeabi_dcmpgt>
 800636a:	2800      	cmp	r0, #0
 800636c:	d173      	bne.n	8006456 <_dtoa_r+0x6e6>
 800636e:	ec53 2b19 	vmov	r2, r3, d9
 8006372:	4914      	ldr	r1, [pc, #80]	; (80063c4 <_dtoa_r+0x654>)
 8006374:	2000      	movs	r0, #0
 8006376:	f7f9 ff8f 	bl	8000298 <__aeabi_dsub>
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	4640      	mov	r0, r8
 8006380:	4649      	mov	r1, r9
 8006382:	f7fa fbb3 	bl	8000aec <__aeabi_dcmplt>
 8006386:	2800      	cmp	r0, #0
 8006388:	f43f af2f 	beq.w	80061ea <_dtoa_r+0x47a>
 800638c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800638e:	1e6b      	subs	r3, r5, #1
 8006390:	930f      	str	r3, [sp, #60]	; 0x3c
 8006392:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006396:	2b30      	cmp	r3, #48	; 0x30
 8006398:	d0f8      	beq.n	800638c <_dtoa_r+0x61c>
 800639a:	46bb      	mov	fp, r7
 800639c:	e04a      	b.n	8006434 <_dtoa_r+0x6c4>
 800639e:	4b06      	ldr	r3, [pc, #24]	; (80063b8 <_dtoa_r+0x648>)
 80063a0:	f7fa f932 	bl	8000608 <__aeabi_dmul>
 80063a4:	4680      	mov	r8, r0
 80063a6:	4689      	mov	r9, r1
 80063a8:	e7bd      	b.n	8006326 <_dtoa_r+0x5b6>
 80063aa:	bf00      	nop
 80063ac:	08007aa8 	.word	0x08007aa8
 80063b0:	08007a80 	.word	0x08007a80
 80063b4:	3ff00000 	.word	0x3ff00000
 80063b8:	40240000 	.word	0x40240000
 80063bc:	401c0000 	.word	0x401c0000
 80063c0:	40140000 	.word	0x40140000
 80063c4:	3fe00000 	.word	0x3fe00000
 80063c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80063cc:	9d00      	ldr	r5, [sp, #0]
 80063ce:	4642      	mov	r2, r8
 80063d0:	464b      	mov	r3, r9
 80063d2:	4630      	mov	r0, r6
 80063d4:	4639      	mov	r1, r7
 80063d6:	f7fa fa41 	bl	800085c <__aeabi_ddiv>
 80063da:	f7fa fbc5 	bl	8000b68 <__aeabi_d2iz>
 80063de:	9001      	str	r0, [sp, #4]
 80063e0:	f7fa f8a8 	bl	8000534 <__aeabi_i2d>
 80063e4:	4642      	mov	r2, r8
 80063e6:	464b      	mov	r3, r9
 80063e8:	f7fa f90e 	bl	8000608 <__aeabi_dmul>
 80063ec:	4602      	mov	r2, r0
 80063ee:	460b      	mov	r3, r1
 80063f0:	4630      	mov	r0, r6
 80063f2:	4639      	mov	r1, r7
 80063f4:	f7f9 ff50 	bl	8000298 <__aeabi_dsub>
 80063f8:	9e01      	ldr	r6, [sp, #4]
 80063fa:	9f04      	ldr	r7, [sp, #16]
 80063fc:	3630      	adds	r6, #48	; 0x30
 80063fe:	f805 6b01 	strb.w	r6, [r5], #1
 8006402:	9e00      	ldr	r6, [sp, #0]
 8006404:	1bae      	subs	r6, r5, r6
 8006406:	42b7      	cmp	r7, r6
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	d134      	bne.n	8006478 <_dtoa_r+0x708>
 800640e:	f7f9 ff45 	bl	800029c <__adddf3>
 8006412:	4642      	mov	r2, r8
 8006414:	464b      	mov	r3, r9
 8006416:	4606      	mov	r6, r0
 8006418:	460f      	mov	r7, r1
 800641a:	f7fa fb85 	bl	8000b28 <__aeabi_dcmpgt>
 800641e:	b9c8      	cbnz	r0, 8006454 <_dtoa_r+0x6e4>
 8006420:	4642      	mov	r2, r8
 8006422:	464b      	mov	r3, r9
 8006424:	4630      	mov	r0, r6
 8006426:	4639      	mov	r1, r7
 8006428:	f7fa fb56 	bl	8000ad8 <__aeabi_dcmpeq>
 800642c:	b110      	cbz	r0, 8006434 <_dtoa_r+0x6c4>
 800642e:	9b01      	ldr	r3, [sp, #4]
 8006430:	07db      	lsls	r3, r3, #31
 8006432:	d40f      	bmi.n	8006454 <_dtoa_r+0x6e4>
 8006434:	4651      	mov	r1, sl
 8006436:	4620      	mov	r0, r4
 8006438:	f000 fbcc 	bl	8006bd4 <_Bfree>
 800643c:	2300      	movs	r3, #0
 800643e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006440:	702b      	strb	r3, [r5, #0]
 8006442:	f10b 0301 	add.w	r3, fp, #1
 8006446:	6013      	str	r3, [r2, #0]
 8006448:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800644a:	2b00      	cmp	r3, #0
 800644c:	f43f ace2 	beq.w	8005e14 <_dtoa_r+0xa4>
 8006450:	601d      	str	r5, [r3, #0]
 8006452:	e4df      	b.n	8005e14 <_dtoa_r+0xa4>
 8006454:	465f      	mov	r7, fp
 8006456:	462b      	mov	r3, r5
 8006458:	461d      	mov	r5, r3
 800645a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800645e:	2a39      	cmp	r2, #57	; 0x39
 8006460:	d106      	bne.n	8006470 <_dtoa_r+0x700>
 8006462:	9a00      	ldr	r2, [sp, #0]
 8006464:	429a      	cmp	r2, r3
 8006466:	d1f7      	bne.n	8006458 <_dtoa_r+0x6e8>
 8006468:	9900      	ldr	r1, [sp, #0]
 800646a:	2230      	movs	r2, #48	; 0x30
 800646c:	3701      	adds	r7, #1
 800646e:	700a      	strb	r2, [r1, #0]
 8006470:	781a      	ldrb	r2, [r3, #0]
 8006472:	3201      	adds	r2, #1
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	e790      	b.n	800639a <_dtoa_r+0x62a>
 8006478:	4ba3      	ldr	r3, [pc, #652]	; (8006708 <_dtoa_r+0x998>)
 800647a:	2200      	movs	r2, #0
 800647c:	f7fa f8c4 	bl	8000608 <__aeabi_dmul>
 8006480:	2200      	movs	r2, #0
 8006482:	2300      	movs	r3, #0
 8006484:	4606      	mov	r6, r0
 8006486:	460f      	mov	r7, r1
 8006488:	f7fa fb26 	bl	8000ad8 <__aeabi_dcmpeq>
 800648c:	2800      	cmp	r0, #0
 800648e:	d09e      	beq.n	80063ce <_dtoa_r+0x65e>
 8006490:	e7d0      	b.n	8006434 <_dtoa_r+0x6c4>
 8006492:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006494:	2a00      	cmp	r2, #0
 8006496:	f000 80ca 	beq.w	800662e <_dtoa_r+0x8be>
 800649a:	9a07      	ldr	r2, [sp, #28]
 800649c:	2a01      	cmp	r2, #1
 800649e:	f300 80ad 	bgt.w	80065fc <_dtoa_r+0x88c>
 80064a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064a4:	2a00      	cmp	r2, #0
 80064a6:	f000 80a5 	beq.w	80065f4 <_dtoa_r+0x884>
 80064aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80064ae:	9e08      	ldr	r6, [sp, #32]
 80064b0:	9d05      	ldr	r5, [sp, #20]
 80064b2:	9a05      	ldr	r2, [sp, #20]
 80064b4:	441a      	add	r2, r3
 80064b6:	9205      	str	r2, [sp, #20]
 80064b8:	9a06      	ldr	r2, [sp, #24]
 80064ba:	2101      	movs	r1, #1
 80064bc:	441a      	add	r2, r3
 80064be:	4620      	mov	r0, r4
 80064c0:	9206      	str	r2, [sp, #24]
 80064c2:	f000 fc3d 	bl	8006d40 <__i2b>
 80064c6:	4607      	mov	r7, r0
 80064c8:	b165      	cbz	r5, 80064e4 <_dtoa_r+0x774>
 80064ca:	9b06      	ldr	r3, [sp, #24]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	dd09      	ble.n	80064e4 <_dtoa_r+0x774>
 80064d0:	42ab      	cmp	r3, r5
 80064d2:	9a05      	ldr	r2, [sp, #20]
 80064d4:	bfa8      	it	ge
 80064d6:	462b      	movge	r3, r5
 80064d8:	1ad2      	subs	r2, r2, r3
 80064da:	9205      	str	r2, [sp, #20]
 80064dc:	9a06      	ldr	r2, [sp, #24]
 80064de:	1aed      	subs	r5, r5, r3
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	9306      	str	r3, [sp, #24]
 80064e4:	9b08      	ldr	r3, [sp, #32]
 80064e6:	b1f3      	cbz	r3, 8006526 <_dtoa_r+0x7b6>
 80064e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 80a3 	beq.w	8006636 <_dtoa_r+0x8c6>
 80064f0:	2e00      	cmp	r6, #0
 80064f2:	dd10      	ble.n	8006516 <_dtoa_r+0x7a6>
 80064f4:	4639      	mov	r1, r7
 80064f6:	4632      	mov	r2, r6
 80064f8:	4620      	mov	r0, r4
 80064fa:	f000 fce1 	bl	8006ec0 <__pow5mult>
 80064fe:	4652      	mov	r2, sl
 8006500:	4601      	mov	r1, r0
 8006502:	4607      	mov	r7, r0
 8006504:	4620      	mov	r0, r4
 8006506:	f000 fc31 	bl	8006d6c <__multiply>
 800650a:	4651      	mov	r1, sl
 800650c:	4680      	mov	r8, r0
 800650e:	4620      	mov	r0, r4
 8006510:	f000 fb60 	bl	8006bd4 <_Bfree>
 8006514:	46c2      	mov	sl, r8
 8006516:	9b08      	ldr	r3, [sp, #32]
 8006518:	1b9a      	subs	r2, r3, r6
 800651a:	d004      	beq.n	8006526 <_dtoa_r+0x7b6>
 800651c:	4651      	mov	r1, sl
 800651e:	4620      	mov	r0, r4
 8006520:	f000 fcce 	bl	8006ec0 <__pow5mult>
 8006524:	4682      	mov	sl, r0
 8006526:	2101      	movs	r1, #1
 8006528:	4620      	mov	r0, r4
 800652a:	f000 fc09 	bl	8006d40 <__i2b>
 800652e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006530:	2b00      	cmp	r3, #0
 8006532:	4606      	mov	r6, r0
 8006534:	f340 8081 	ble.w	800663a <_dtoa_r+0x8ca>
 8006538:	461a      	mov	r2, r3
 800653a:	4601      	mov	r1, r0
 800653c:	4620      	mov	r0, r4
 800653e:	f000 fcbf 	bl	8006ec0 <__pow5mult>
 8006542:	9b07      	ldr	r3, [sp, #28]
 8006544:	2b01      	cmp	r3, #1
 8006546:	4606      	mov	r6, r0
 8006548:	dd7a      	ble.n	8006640 <_dtoa_r+0x8d0>
 800654a:	f04f 0800 	mov.w	r8, #0
 800654e:	6933      	ldr	r3, [r6, #16]
 8006550:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006554:	6918      	ldr	r0, [r3, #16]
 8006556:	f000 fba5 	bl	8006ca4 <__hi0bits>
 800655a:	f1c0 0020 	rsb	r0, r0, #32
 800655e:	9b06      	ldr	r3, [sp, #24]
 8006560:	4418      	add	r0, r3
 8006562:	f010 001f 	ands.w	r0, r0, #31
 8006566:	f000 8094 	beq.w	8006692 <_dtoa_r+0x922>
 800656a:	f1c0 0320 	rsb	r3, r0, #32
 800656e:	2b04      	cmp	r3, #4
 8006570:	f340 8085 	ble.w	800667e <_dtoa_r+0x90e>
 8006574:	9b05      	ldr	r3, [sp, #20]
 8006576:	f1c0 001c 	rsb	r0, r0, #28
 800657a:	4403      	add	r3, r0
 800657c:	9305      	str	r3, [sp, #20]
 800657e:	9b06      	ldr	r3, [sp, #24]
 8006580:	4403      	add	r3, r0
 8006582:	4405      	add	r5, r0
 8006584:	9306      	str	r3, [sp, #24]
 8006586:	9b05      	ldr	r3, [sp, #20]
 8006588:	2b00      	cmp	r3, #0
 800658a:	dd05      	ble.n	8006598 <_dtoa_r+0x828>
 800658c:	4651      	mov	r1, sl
 800658e:	461a      	mov	r2, r3
 8006590:	4620      	mov	r0, r4
 8006592:	f000 fcef 	bl	8006f74 <__lshift>
 8006596:	4682      	mov	sl, r0
 8006598:	9b06      	ldr	r3, [sp, #24]
 800659a:	2b00      	cmp	r3, #0
 800659c:	dd05      	ble.n	80065aa <_dtoa_r+0x83a>
 800659e:	4631      	mov	r1, r6
 80065a0:	461a      	mov	r2, r3
 80065a2:	4620      	mov	r0, r4
 80065a4:	f000 fce6 	bl	8006f74 <__lshift>
 80065a8:	4606      	mov	r6, r0
 80065aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d072      	beq.n	8006696 <_dtoa_r+0x926>
 80065b0:	4631      	mov	r1, r6
 80065b2:	4650      	mov	r0, sl
 80065b4:	f000 fd4a 	bl	800704c <__mcmp>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	da6c      	bge.n	8006696 <_dtoa_r+0x926>
 80065bc:	2300      	movs	r3, #0
 80065be:	4651      	mov	r1, sl
 80065c0:	220a      	movs	r2, #10
 80065c2:	4620      	mov	r0, r4
 80065c4:	f000 fb28 	bl	8006c18 <__multadd>
 80065c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80065ce:	4682      	mov	sl, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 81b0 	beq.w	8006936 <_dtoa_r+0xbc6>
 80065d6:	2300      	movs	r3, #0
 80065d8:	4639      	mov	r1, r7
 80065da:	220a      	movs	r2, #10
 80065dc:	4620      	mov	r0, r4
 80065de:	f000 fb1b 	bl	8006c18 <__multadd>
 80065e2:	9b01      	ldr	r3, [sp, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	4607      	mov	r7, r0
 80065e8:	f300 8096 	bgt.w	8006718 <_dtoa_r+0x9a8>
 80065ec:	9b07      	ldr	r3, [sp, #28]
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	dc59      	bgt.n	80066a6 <_dtoa_r+0x936>
 80065f2:	e091      	b.n	8006718 <_dtoa_r+0x9a8>
 80065f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80065fa:	e758      	b.n	80064ae <_dtoa_r+0x73e>
 80065fc:	9b04      	ldr	r3, [sp, #16]
 80065fe:	1e5e      	subs	r6, r3, #1
 8006600:	9b08      	ldr	r3, [sp, #32]
 8006602:	42b3      	cmp	r3, r6
 8006604:	bfbf      	itttt	lt
 8006606:	9b08      	ldrlt	r3, [sp, #32]
 8006608:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800660a:	9608      	strlt	r6, [sp, #32]
 800660c:	1af3      	sublt	r3, r6, r3
 800660e:	bfb4      	ite	lt
 8006610:	18d2      	addlt	r2, r2, r3
 8006612:	1b9e      	subge	r6, r3, r6
 8006614:	9b04      	ldr	r3, [sp, #16]
 8006616:	bfbc      	itt	lt
 8006618:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800661a:	2600      	movlt	r6, #0
 800661c:	2b00      	cmp	r3, #0
 800661e:	bfb7      	itett	lt
 8006620:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006624:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006628:	1a9d      	sublt	r5, r3, r2
 800662a:	2300      	movlt	r3, #0
 800662c:	e741      	b.n	80064b2 <_dtoa_r+0x742>
 800662e:	9e08      	ldr	r6, [sp, #32]
 8006630:	9d05      	ldr	r5, [sp, #20]
 8006632:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006634:	e748      	b.n	80064c8 <_dtoa_r+0x758>
 8006636:	9a08      	ldr	r2, [sp, #32]
 8006638:	e770      	b.n	800651c <_dtoa_r+0x7ac>
 800663a:	9b07      	ldr	r3, [sp, #28]
 800663c:	2b01      	cmp	r3, #1
 800663e:	dc19      	bgt.n	8006674 <_dtoa_r+0x904>
 8006640:	9b02      	ldr	r3, [sp, #8]
 8006642:	b9bb      	cbnz	r3, 8006674 <_dtoa_r+0x904>
 8006644:	9b03      	ldr	r3, [sp, #12]
 8006646:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800664a:	b99b      	cbnz	r3, 8006674 <_dtoa_r+0x904>
 800664c:	9b03      	ldr	r3, [sp, #12]
 800664e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006652:	0d1b      	lsrs	r3, r3, #20
 8006654:	051b      	lsls	r3, r3, #20
 8006656:	b183      	cbz	r3, 800667a <_dtoa_r+0x90a>
 8006658:	9b05      	ldr	r3, [sp, #20]
 800665a:	3301      	adds	r3, #1
 800665c:	9305      	str	r3, [sp, #20]
 800665e:	9b06      	ldr	r3, [sp, #24]
 8006660:	3301      	adds	r3, #1
 8006662:	9306      	str	r3, [sp, #24]
 8006664:	f04f 0801 	mov.w	r8, #1
 8006668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800666a:	2b00      	cmp	r3, #0
 800666c:	f47f af6f 	bne.w	800654e <_dtoa_r+0x7de>
 8006670:	2001      	movs	r0, #1
 8006672:	e774      	b.n	800655e <_dtoa_r+0x7ee>
 8006674:	f04f 0800 	mov.w	r8, #0
 8006678:	e7f6      	b.n	8006668 <_dtoa_r+0x8f8>
 800667a:	4698      	mov	r8, r3
 800667c:	e7f4      	b.n	8006668 <_dtoa_r+0x8f8>
 800667e:	d082      	beq.n	8006586 <_dtoa_r+0x816>
 8006680:	9a05      	ldr	r2, [sp, #20]
 8006682:	331c      	adds	r3, #28
 8006684:	441a      	add	r2, r3
 8006686:	9205      	str	r2, [sp, #20]
 8006688:	9a06      	ldr	r2, [sp, #24]
 800668a:	441a      	add	r2, r3
 800668c:	441d      	add	r5, r3
 800668e:	9206      	str	r2, [sp, #24]
 8006690:	e779      	b.n	8006586 <_dtoa_r+0x816>
 8006692:	4603      	mov	r3, r0
 8006694:	e7f4      	b.n	8006680 <_dtoa_r+0x910>
 8006696:	9b04      	ldr	r3, [sp, #16]
 8006698:	2b00      	cmp	r3, #0
 800669a:	dc37      	bgt.n	800670c <_dtoa_r+0x99c>
 800669c:	9b07      	ldr	r3, [sp, #28]
 800669e:	2b02      	cmp	r3, #2
 80066a0:	dd34      	ble.n	800670c <_dtoa_r+0x99c>
 80066a2:	9b04      	ldr	r3, [sp, #16]
 80066a4:	9301      	str	r3, [sp, #4]
 80066a6:	9b01      	ldr	r3, [sp, #4]
 80066a8:	b963      	cbnz	r3, 80066c4 <_dtoa_r+0x954>
 80066aa:	4631      	mov	r1, r6
 80066ac:	2205      	movs	r2, #5
 80066ae:	4620      	mov	r0, r4
 80066b0:	f000 fab2 	bl	8006c18 <__multadd>
 80066b4:	4601      	mov	r1, r0
 80066b6:	4606      	mov	r6, r0
 80066b8:	4650      	mov	r0, sl
 80066ba:	f000 fcc7 	bl	800704c <__mcmp>
 80066be:	2800      	cmp	r0, #0
 80066c0:	f73f adbb 	bgt.w	800623a <_dtoa_r+0x4ca>
 80066c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066c6:	9d00      	ldr	r5, [sp, #0]
 80066c8:	ea6f 0b03 	mvn.w	fp, r3
 80066cc:	f04f 0800 	mov.w	r8, #0
 80066d0:	4631      	mov	r1, r6
 80066d2:	4620      	mov	r0, r4
 80066d4:	f000 fa7e 	bl	8006bd4 <_Bfree>
 80066d8:	2f00      	cmp	r7, #0
 80066da:	f43f aeab 	beq.w	8006434 <_dtoa_r+0x6c4>
 80066de:	f1b8 0f00 	cmp.w	r8, #0
 80066e2:	d005      	beq.n	80066f0 <_dtoa_r+0x980>
 80066e4:	45b8      	cmp	r8, r7
 80066e6:	d003      	beq.n	80066f0 <_dtoa_r+0x980>
 80066e8:	4641      	mov	r1, r8
 80066ea:	4620      	mov	r0, r4
 80066ec:	f000 fa72 	bl	8006bd4 <_Bfree>
 80066f0:	4639      	mov	r1, r7
 80066f2:	4620      	mov	r0, r4
 80066f4:	f000 fa6e 	bl	8006bd4 <_Bfree>
 80066f8:	e69c      	b.n	8006434 <_dtoa_r+0x6c4>
 80066fa:	2600      	movs	r6, #0
 80066fc:	4637      	mov	r7, r6
 80066fe:	e7e1      	b.n	80066c4 <_dtoa_r+0x954>
 8006700:	46bb      	mov	fp, r7
 8006702:	4637      	mov	r7, r6
 8006704:	e599      	b.n	800623a <_dtoa_r+0x4ca>
 8006706:	bf00      	nop
 8006708:	40240000 	.word	0x40240000
 800670c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 80c8 	beq.w	80068a4 <_dtoa_r+0xb34>
 8006714:	9b04      	ldr	r3, [sp, #16]
 8006716:	9301      	str	r3, [sp, #4]
 8006718:	2d00      	cmp	r5, #0
 800671a:	dd05      	ble.n	8006728 <_dtoa_r+0x9b8>
 800671c:	4639      	mov	r1, r7
 800671e:	462a      	mov	r2, r5
 8006720:	4620      	mov	r0, r4
 8006722:	f000 fc27 	bl	8006f74 <__lshift>
 8006726:	4607      	mov	r7, r0
 8006728:	f1b8 0f00 	cmp.w	r8, #0
 800672c:	d05b      	beq.n	80067e6 <_dtoa_r+0xa76>
 800672e:	6879      	ldr	r1, [r7, #4]
 8006730:	4620      	mov	r0, r4
 8006732:	f000 fa0f 	bl	8006b54 <_Balloc>
 8006736:	4605      	mov	r5, r0
 8006738:	b928      	cbnz	r0, 8006746 <_dtoa_r+0x9d6>
 800673a:	4b83      	ldr	r3, [pc, #524]	; (8006948 <_dtoa_r+0xbd8>)
 800673c:	4602      	mov	r2, r0
 800673e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006742:	f7ff bb2e 	b.w	8005da2 <_dtoa_r+0x32>
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	3202      	adds	r2, #2
 800674a:	0092      	lsls	r2, r2, #2
 800674c:	f107 010c 	add.w	r1, r7, #12
 8006750:	300c      	adds	r0, #12
 8006752:	f001 f801 	bl	8007758 <memcpy>
 8006756:	2201      	movs	r2, #1
 8006758:	4629      	mov	r1, r5
 800675a:	4620      	mov	r0, r4
 800675c:	f000 fc0a 	bl	8006f74 <__lshift>
 8006760:	9b00      	ldr	r3, [sp, #0]
 8006762:	3301      	adds	r3, #1
 8006764:	9304      	str	r3, [sp, #16]
 8006766:	e9dd 2300 	ldrd	r2, r3, [sp]
 800676a:	4413      	add	r3, r2
 800676c:	9308      	str	r3, [sp, #32]
 800676e:	9b02      	ldr	r3, [sp, #8]
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	46b8      	mov	r8, r7
 8006776:	9306      	str	r3, [sp, #24]
 8006778:	4607      	mov	r7, r0
 800677a:	9b04      	ldr	r3, [sp, #16]
 800677c:	4631      	mov	r1, r6
 800677e:	3b01      	subs	r3, #1
 8006780:	4650      	mov	r0, sl
 8006782:	9301      	str	r3, [sp, #4]
 8006784:	f7ff fa6c 	bl	8005c60 <quorem>
 8006788:	4641      	mov	r1, r8
 800678a:	9002      	str	r0, [sp, #8]
 800678c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006790:	4650      	mov	r0, sl
 8006792:	f000 fc5b 	bl	800704c <__mcmp>
 8006796:	463a      	mov	r2, r7
 8006798:	9005      	str	r0, [sp, #20]
 800679a:	4631      	mov	r1, r6
 800679c:	4620      	mov	r0, r4
 800679e:	f000 fc71 	bl	8007084 <__mdiff>
 80067a2:	68c2      	ldr	r2, [r0, #12]
 80067a4:	4605      	mov	r5, r0
 80067a6:	bb02      	cbnz	r2, 80067ea <_dtoa_r+0xa7a>
 80067a8:	4601      	mov	r1, r0
 80067aa:	4650      	mov	r0, sl
 80067ac:	f000 fc4e 	bl	800704c <__mcmp>
 80067b0:	4602      	mov	r2, r0
 80067b2:	4629      	mov	r1, r5
 80067b4:	4620      	mov	r0, r4
 80067b6:	9209      	str	r2, [sp, #36]	; 0x24
 80067b8:	f000 fa0c 	bl	8006bd4 <_Bfree>
 80067bc:	9b07      	ldr	r3, [sp, #28]
 80067be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067c0:	9d04      	ldr	r5, [sp, #16]
 80067c2:	ea43 0102 	orr.w	r1, r3, r2
 80067c6:	9b06      	ldr	r3, [sp, #24]
 80067c8:	4319      	orrs	r1, r3
 80067ca:	d110      	bne.n	80067ee <_dtoa_r+0xa7e>
 80067cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80067d0:	d029      	beq.n	8006826 <_dtoa_r+0xab6>
 80067d2:	9b05      	ldr	r3, [sp, #20]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	dd02      	ble.n	80067de <_dtoa_r+0xa6e>
 80067d8:	9b02      	ldr	r3, [sp, #8]
 80067da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80067de:	9b01      	ldr	r3, [sp, #4]
 80067e0:	f883 9000 	strb.w	r9, [r3]
 80067e4:	e774      	b.n	80066d0 <_dtoa_r+0x960>
 80067e6:	4638      	mov	r0, r7
 80067e8:	e7ba      	b.n	8006760 <_dtoa_r+0x9f0>
 80067ea:	2201      	movs	r2, #1
 80067ec:	e7e1      	b.n	80067b2 <_dtoa_r+0xa42>
 80067ee:	9b05      	ldr	r3, [sp, #20]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	db04      	blt.n	80067fe <_dtoa_r+0xa8e>
 80067f4:	9907      	ldr	r1, [sp, #28]
 80067f6:	430b      	orrs	r3, r1
 80067f8:	9906      	ldr	r1, [sp, #24]
 80067fa:	430b      	orrs	r3, r1
 80067fc:	d120      	bne.n	8006840 <_dtoa_r+0xad0>
 80067fe:	2a00      	cmp	r2, #0
 8006800:	dded      	ble.n	80067de <_dtoa_r+0xa6e>
 8006802:	4651      	mov	r1, sl
 8006804:	2201      	movs	r2, #1
 8006806:	4620      	mov	r0, r4
 8006808:	f000 fbb4 	bl	8006f74 <__lshift>
 800680c:	4631      	mov	r1, r6
 800680e:	4682      	mov	sl, r0
 8006810:	f000 fc1c 	bl	800704c <__mcmp>
 8006814:	2800      	cmp	r0, #0
 8006816:	dc03      	bgt.n	8006820 <_dtoa_r+0xab0>
 8006818:	d1e1      	bne.n	80067de <_dtoa_r+0xa6e>
 800681a:	f019 0f01 	tst.w	r9, #1
 800681e:	d0de      	beq.n	80067de <_dtoa_r+0xa6e>
 8006820:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006824:	d1d8      	bne.n	80067d8 <_dtoa_r+0xa68>
 8006826:	9a01      	ldr	r2, [sp, #4]
 8006828:	2339      	movs	r3, #57	; 0x39
 800682a:	7013      	strb	r3, [r2, #0]
 800682c:	462b      	mov	r3, r5
 800682e:	461d      	mov	r5, r3
 8006830:	3b01      	subs	r3, #1
 8006832:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006836:	2a39      	cmp	r2, #57	; 0x39
 8006838:	d06c      	beq.n	8006914 <_dtoa_r+0xba4>
 800683a:	3201      	adds	r2, #1
 800683c:	701a      	strb	r2, [r3, #0]
 800683e:	e747      	b.n	80066d0 <_dtoa_r+0x960>
 8006840:	2a00      	cmp	r2, #0
 8006842:	dd07      	ble.n	8006854 <_dtoa_r+0xae4>
 8006844:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006848:	d0ed      	beq.n	8006826 <_dtoa_r+0xab6>
 800684a:	9a01      	ldr	r2, [sp, #4]
 800684c:	f109 0301 	add.w	r3, r9, #1
 8006850:	7013      	strb	r3, [r2, #0]
 8006852:	e73d      	b.n	80066d0 <_dtoa_r+0x960>
 8006854:	9b04      	ldr	r3, [sp, #16]
 8006856:	9a08      	ldr	r2, [sp, #32]
 8006858:	f803 9c01 	strb.w	r9, [r3, #-1]
 800685c:	4293      	cmp	r3, r2
 800685e:	d043      	beq.n	80068e8 <_dtoa_r+0xb78>
 8006860:	4651      	mov	r1, sl
 8006862:	2300      	movs	r3, #0
 8006864:	220a      	movs	r2, #10
 8006866:	4620      	mov	r0, r4
 8006868:	f000 f9d6 	bl	8006c18 <__multadd>
 800686c:	45b8      	cmp	r8, r7
 800686e:	4682      	mov	sl, r0
 8006870:	f04f 0300 	mov.w	r3, #0
 8006874:	f04f 020a 	mov.w	r2, #10
 8006878:	4641      	mov	r1, r8
 800687a:	4620      	mov	r0, r4
 800687c:	d107      	bne.n	800688e <_dtoa_r+0xb1e>
 800687e:	f000 f9cb 	bl	8006c18 <__multadd>
 8006882:	4680      	mov	r8, r0
 8006884:	4607      	mov	r7, r0
 8006886:	9b04      	ldr	r3, [sp, #16]
 8006888:	3301      	adds	r3, #1
 800688a:	9304      	str	r3, [sp, #16]
 800688c:	e775      	b.n	800677a <_dtoa_r+0xa0a>
 800688e:	f000 f9c3 	bl	8006c18 <__multadd>
 8006892:	4639      	mov	r1, r7
 8006894:	4680      	mov	r8, r0
 8006896:	2300      	movs	r3, #0
 8006898:	220a      	movs	r2, #10
 800689a:	4620      	mov	r0, r4
 800689c:	f000 f9bc 	bl	8006c18 <__multadd>
 80068a0:	4607      	mov	r7, r0
 80068a2:	e7f0      	b.n	8006886 <_dtoa_r+0xb16>
 80068a4:	9b04      	ldr	r3, [sp, #16]
 80068a6:	9301      	str	r3, [sp, #4]
 80068a8:	9d00      	ldr	r5, [sp, #0]
 80068aa:	4631      	mov	r1, r6
 80068ac:	4650      	mov	r0, sl
 80068ae:	f7ff f9d7 	bl	8005c60 <quorem>
 80068b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80068b6:	9b00      	ldr	r3, [sp, #0]
 80068b8:	f805 9b01 	strb.w	r9, [r5], #1
 80068bc:	1aea      	subs	r2, r5, r3
 80068be:	9b01      	ldr	r3, [sp, #4]
 80068c0:	4293      	cmp	r3, r2
 80068c2:	dd07      	ble.n	80068d4 <_dtoa_r+0xb64>
 80068c4:	4651      	mov	r1, sl
 80068c6:	2300      	movs	r3, #0
 80068c8:	220a      	movs	r2, #10
 80068ca:	4620      	mov	r0, r4
 80068cc:	f000 f9a4 	bl	8006c18 <__multadd>
 80068d0:	4682      	mov	sl, r0
 80068d2:	e7ea      	b.n	80068aa <_dtoa_r+0xb3a>
 80068d4:	9b01      	ldr	r3, [sp, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	bfc8      	it	gt
 80068da:	461d      	movgt	r5, r3
 80068dc:	9b00      	ldr	r3, [sp, #0]
 80068de:	bfd8      	it	le
 80068e0:	2501      	movle	r5, #1
 80068e2:	441d      	add	r5, r3
 80068e4:	f04f 0800 	mov.w	r8, #0
 80068e8:	4651      	mov	r1, sl
 80068ea:	2201      	movs	r2, #1
 80068ec:	4620      	mov	r0, r4
 80068ee:	f000 fb41 	bl	8006f74 <__lshift>
 80068f2:	4631      	mov	r1, r6
 80068f4:	4682      	mov	sl, r0
 80068f6:	f000 fba9 	bl	800704c <__mcmp>
 80068fa:	2800      	cmp	r0, #0
 80068fc:	dc96      	bgt.n	800682c <_dtoa_r+0xabc>
 80068fe:	d102      	bne.n	8006906 <_dtoa_r+0xb96>
 8006900:	f019 0f01 	tst.w	r9, #1
 8006904:	d192      	bne.n	800682c <_dtoa_r+0xabc>
 8006906:	462b      	mov	r3, r5
 8006908:	461d      	mov	r5, r3
 800690a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800690e:	2a30      	cmp	r2, #48	; 0x30
 8006910:	d0fa      	beq.n	8006908 <_dtoa_r+0xb98>
 8006912:	e6dd      	b.n	80066d0 <_dtoa_r+0x960>
 8006914:	9a00      	ldr	r2, [sp, #0]
 8006916:	429a      	cmp	r2, r3
 8006918:	d189      	bne.n	800682e <_dtoa_r+0xabe>
 800691a:	f10b 0b01 	add.w	fp, fp, #1
 800691e:	2331      	movs	r3, #49	; 0x31
 8006920:	e796      	b.n	8006850 <_dtoa_r+0xae0>
 8006922:	4b0a      	ldr	r3, [pc, #40]	; (800694c <_dtoa_r+0xbdc>)
 8006924:	f7ff ba99 	b.w	8005e5a <_dtoa_r+0xea>
 8006928:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800692a:	2b00      	cmp	r3, #0
 800692c:	f47f aa6d 	bne.w	8005e0a <_dtoa_r+0x9a>
 8006930:	4b07      	ldr	r3, [pc, #28]	; (8006950 <_dtoa_r+0xbe0>)
 8006932:	f7ff ba92 	b.w	8005e5a <_dtoa_r+0xea>
 8006936:	9b01      	ldr	r3, [sp, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	dcb5      	bgt.n	80068a8 <_dtoa_r+0xb38>
 800693c:	9b07      	ldr	r3, [sp, #28]
 800693e:	2b02      	cmp	r3, #2
 8006940:	f73f aeb1 	bgt.w	80066a6 <_dtoa_r+0x936>
 8006944:	e7b0      	b.n	80068a8 <_dtoa_r+0xb38>
 8006946:	bf00      	nop
 8006948:	08007a14 	.word	0x08007a14
 800694c:	08007974 	.word	0x08007974
 8006950:	08007998 	.word	0x08007998

08006954 <_free_r>:
 8006954:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006956:	2900      	cmp	r1, #0
 8006958:	d044      	beq.n	80069e4 <_free_r+0x90>
 800695a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800695e:	9001      	str	r0, [sp, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	f1a1 0404 	sub.w	r4, r1, #4
 8006966:	bfb8      	it	lt
 8006968:	18e4      	addlt	r4, r4, r3
 800696a:	f000 f8e7 	bl	8006b3c <__malloc_lock>
 800696e:	4a1e      	ldr	r2, [pc, #120]	; (80069e8 <_free_r+0x94>)
 8006970:	9801      	ldr	r0, [sp, #4]
 8006972:	6813      	ldr	r3, [r2, #0]
 8006974:	b933      	cbnz	r3, 8006984 <_free_r+0x30>
 8006976:	6063      	str	r3, [r4, #4]
 8006978:	6014      	str	r4, [r2, #0]
 800697a:	b003      	add	sp, #12
 800697c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006980:	f000 b8e2 	b.w	8006b48 <__malloc_unlock>
 8006984:	42a3      	cmp	r3, r4
 8006986:	d908      	bls.n	800699a <_free_r+0x46>
 8006988:	6825      	ldr	r5, [r4, #0]
 800698a:	1961      	adds	r1, r4, r5
 800698c:	428b      	cmp	r3, r1
 800698e:	bf01      	itttt	eq
 8006990:	6819      	ldreq	r1, [r3, #0]
 8006992:	685b      	ldreq	r3, [r3, #4]
 8006994:	1949      	addeq	r1, r1, r5
 8006996:	6021      	streq	r1, [r4, #0]
 8006998:	e7ed      	b.n	8006976 <_free_r+0x22>
 800699a:	461a      	mov	r2, r3
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	b10b      	cbz	r3, 80069a4 <_free_r+0x50>
 80069a0:	42a3      	cmp	r3, r4
 80069a2:	d9fa      	bls.n	800699a <_free_r+0x46>
 80069a4:	6811      	ldr	r1, [r2, #0]
 80069a6:	1855      	adds	r5, r2, r1
 80069a8:	42a5      	cmp	r5, r4
 80069aa:	d10b      	bne.n	80069c4 <_free_r+0x70>
 80069ac:	6824      	ldr	r4, [r4, #0]
 80069ae:	4421      	add	r1, r4
 80069b0:	1854      	adds	r4, r2, r1
 80069b2:	42a3      	cmp	r3, r4
 80069b4:	6011      	str	r1, [r2, #0]
 80069b6:	d1e0      	bne.n	800697a <_free_r+0x26>
 80069b8:	681c      	ldr	r4, [r3, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	6053      	str	r3, [r2, #4]
 80069be:	440c      	add	r4, r1
 80069c0:	6014      	str	r4, [r2, #0]
 80069c2:	e7da      	b.n	800697a <_free_r+0x26>
 80069c4:	d902      	bls.n	80069cc <_free_r+0x78>
 80069c6:	230c      	movs	r3, #12
 80069c8:	6003      	str	r3, [r0, #0]
 80069ca:	e7d6      	b.n	800697a <_free_r+0x26>
 80069cc:	6825      	ldr	r5, [r4, #0]
 80069ce:	1961      	adds	r1, r4, r5
 80069d0:	428b      	cmp	r3, r1
 80069d2:	bf04      	itt	eq
 80069d4:	6819      	ldreq	r1, [r3, #0]
 80069d6:	685b      	ldreq	r3, [r3, #4]
 80069d8:	6063      	str	r3, [r4, #4]
 80069da:	bf04      	itt	eq
 80069dc:	1949      	addeq	r1, r1, r5
 80069de:	6021      	streq	r1, [r4, #0]
 80069e0:	6054      	str	r4, [r2, #4]
 80069e2:	e7ca      	b.n	800697a <_free_r+0x26>
 80069e4:	b003      	add	sp, #12
 80069e6:	bd30      	pop	{r4, r5, pc}
 80069e8:	200003e8 	.word	0x200003e8

080069ec <malloc>:
 80069ec:	4b02      	ldr	r3, [pc, #8]	; (80069f8 <malloc+0xc>)
 80069ee:	4601      	mov	r1, r0
 80069f0:	6818      	ldr	r0, [r3, #0]
 80069f2:	f000 b823 	b.w	8006a3c <_malloc_r>
 80069f6:	bf00      	nop
 80069f8:	20000064 	.word	0x20000064

080069fc <sbrk_aligned>:
 80069fc:	b570      	push	{r4, r5, r6, lr}
 80069fe:	4e0e      	ldr	r6, [pc, #56]	; (8006a38 <sbrk_aligned+0x3c>)
 8006a00:	460c      	mov	r4, r1
 8006a02:	6831      	ldr	r1, [r6, #0]
 8006a04:	4605      	mov	r5, r0
 8006a06:	b911      	cbnz	r1, 8006a0e <sbrk_aligned+0x12>
 8006a08:	f000 fe96 	bl	8007738 <_sbrk_r>
 8006a0c:	6030      	str	r0, [r6, #0]
 8006a0e:	4621      	mov	r1, r4
 8006a10:	4628      	mov	r0, r5
 8006a12:	f000 fe91 	bl	8007738 <_sbrk_r>
 8006a16:	1c43      	adds	r3, r0, #1
 8006a18:	d00a      	beq.n	8006a30 <sbrk_aligned+0x34>
 8006a1a:	1cc4      	adds	r4, r0, #3
 8006a1c:	f024 0403 	bic.w	r4, r4, #3
 8006a20:	42a0      	cmp	r0, r4
 8006a22:	d007      	beq.n	8006a34 <sbrk_aligned+0x38>
 8006a24:	1a21      	subs	r1, r4, r0
 8006a26:	4628      	mov	r0, r5
 8006a28:	f000 fe86 	bl	8007738 <_sbrk_r>
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	d101      	bne.n	8006a34 <sbrk_aligned+0x38>
 8006a30:	f04f 34ff 	mov.w	r4, #4294967295
 8006a34:	4620      	mov	r0, r4
 8006a36:	bd70      	pop	{r4, r5, r6, pc}
 8006a38:	200003ec 	.word	0x200003ec

08006a3c <_malloc_r>:
 8006a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a40:	1ccd      	adds	r5, r1, #3
 8006a42:	f025 0503 	bic.w	r5, r5, #3
 8006a46:	3508      	adds	r5, #8
 8006a48:	2d0c      	cmp	r5, #12
 8006a4a:	bf38      	it	cc
 8006a4c:	250c      	movcc	r5, #12
 8006a4e:	2d00      	cmp	r5, #0
 8006a50:	4607      	mov	r7, r0
 8006a52:	db01      	blt.n	8006a58 <_malloc_r+0x1c>
 8006a54:	42a9      	cmp	r1, r5
 8006a56:	d905      	bls.n	8006a64 <_malloc_r+0x28>
 8006a58:	230c      	movs	r3, #12
 8006a5a:	603b      	str	r3, [r7, #0]
 8006a5c:	2600      	movs	r6, #0
 8006a5e:	4630      	mov	r0, r6
 8006a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006b38 <_malloc_r+0xfc>
 8006a68:	f000 f868 	bl	8006b3c <__malloc_lock>
 8006a6c:	f8d8 3000 	ldr.w	r3, [r8]
 8006a70:	461c      	mov	r4, r3
 8006a72:	bb5c      	cbnz	r4, 8006acc <_malloc_r+0x90>
 8006a74:	4629      	mov	r1, r5
 8006a76:	4638      	mov	r0, r7
 8006a78:	f7ff ffc0 	bl	80069fc <sbrk_aligned>
 8006a7c:	1c43      	adds	r3, r0, #1
 8006a7e:	4604      	mov	r4, r0
 8006a80:	d155      	bne.n	8006b2e <_malloc_r+0xf2>
 8006a82:	f8d8 4000 	ldr.w	r4, [r8]
 8006a86:	4626      	mov	r6, r4
 8006a88:	2e00      	cmp	r6, #0
 8006a8a:	d145      	bne.n	8006b18 <_malloc_r+0xdc>
 8006a8c:	2c00      	cmp	r4, #0
 8006a8e:	d048      	beq.n	8006b22 <_malloc_r+0xe6>
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	4631      	mov	r1, r6
 8006a94:	4638      	mov	r0, r7
 8006a96:	eb04 0903 	add.w	r9, r4, r3
 8006a9a:	f000 fe4d 	bl	8007738 <_sbrk_r>
 8006a9e:	4581      	cmp	r9, r0
 8006aa0:	d13f      	bne.n	8006b22 <_malloc_r+0xe6>
 8006aa2:	6821      	ldr	r1, [r4, #0]
 8006aa4:	1a6d      	subs	r5, r5, r1
 8006aa6:	4629      	mov	r1, r5
 8006aa8:	4638      	mov	r0, r7
 8006aaa:	f7ff ffa7 	bl	80069fc <sbrk_aligned>
 8006aae:	3001      	adds	r0, #1
 8006ab0:	d037      	beq.n	8006b22 <_malloc_r+0xe6>
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	442b      	add	r3, r5
 8006ab6:	6023      	str	r3, [r4, #0]
 8006ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d038      	beq.n	8006b32 <_malloc_r+0xf6>
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	42a2      	cmp	r2, r4
 8006ac4:	d12b      	bne.n	8006b1e <_malloc_r+0xe2>
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	605a      	str	r2, [r3, #4]
 8006aca:	e00f      	b.n	8006aec <_malloc_r+0xb0>
 8006acc:	6822      	ldr	r2, [r4, #0]
 8006ace:	1b52      	subs	r2, r2, r5
 8006ad0:	d41f      	bmi.n	8006b12 <_malloc_r+0xd6>
 8006ad2:	2a0b      	cmp	r2, #11
 8006ad4:	d917      	bls.n	8006b06 <_malloc_r+0xca>
 8006ad6:	1961      	adds	r1, r4, r5
 8006ad8:	42a3      	cmp	r3, r4
 8006ada:	6025      	str	r5, [r4, #0]
 8006adc:	bf18      	it	ne
 8006ade:	6059      	strne	r1, [r3, #4]
 8006ae0:	6863      	ldr	r3, [r4, #4]
 8006ae2:	bf08      	it	eq
 8006ae4:	f8c8 1000 	streq.w	r1, [r8]
 8006ae8:	5162      	str	r2, [r4, r5]
 8006aea:	604b      	str	r3, [r1, #4]
 8006aec:	4638      	mov	r0, r7
 8006aee:	f104 060b 	add.w	r6, r4, #11
 8006af2:	f000 f829 	bl	8006b48 <__malloc_unlock>
 8006af6:	f026 0607 	bic.w	r6, r6, #7
 8006afa:	1d23      	adds	r3, r4, #4
 8006afc:	1af2      	subs	r2, r6, r3
 8006afe:	d0ae      	beq.n	8006a5e <_malloc_r+0x22>
 8006b00:	1b9b      	subs	r3, r3, r6
 8006b02:	50a3      	str	r3, [r4, r2]
 8006b04:	e7ab      	b.n	8006a5e <_malloc_r+0x22>
 8006b06:	42a3      	cmp	r3, r4
 8006b08:	6862      	ldr	r2, [r4, #4]
 8006b0a:	d1dd      	bne.n	8006ac8 <_malloc_r+0x8c>
 8006b0c:	f8c8 2000 	str.w	r2, [r8]
 8006b10:	e7ec      	b.n	8006aec <_malloc_r+0xb0>
 8006b12:	4623      	mov	r3, r4
 8006b14:	6864      	ldr	r4, [r4, #4]
 8006b16:	e7ac      	b.n	8006a72 <_malloc_r+0x36>
 8006b18:	4634      	mov	r4, r6
 8006b1a:	6876      	ldr	r6, [r6, #4]
 8006b1c:	e7b4      	b.n	8006a88 <_malloc_r+0x4c>
 8006b1e:	4613      	mov	r3, r2
 8006b20:	e7cc      	b.n	8006abc <_malloc_r+0x80>
 8006b22:	230c      	movs	r3, #12
 8006b24:	603b      	str	r3, [r7, #0]
 8006b26:	4638      	mov	r0, r7
 8006b28:	f000 f80e 	bl	8006b48 <__malloc_unlock>
 8006b2c:	e797      	b.n	8006a5e <_malloc_r+0x22>
 8006b2e:	6025      	str	r5, [r4, #0]
 8006b30:	e7dc      	b.n	8006aec <_malloc_r+0xb0>
 8006b32:	605b      	str	r3, [r3, #4]
 8006b34:	deff      	udf	#255	; 0xff
 8006b36:	bf00      	nop
 8006b38:	200003e8 	.word	0x200003e8

08006b3c <__malloc_lock>:
 8006b3c:	4801      	ldr	r0, [pc, #4]	; (8006b44 <__malloc_lock+0x8>)
 8006b3e:	f7ff b88d 	b.w	8005c5c <__retarget_lock_acquire_recursive>
 8006b42:	bf00      	nop
 8006b44:	200003e4 	.word	0x200003e4

08006b48 <__malloc_unlock>:
 8006b48:	4801      	ldr	r0, [pc, #4]	; (8006b50 <__malloc_unlock+0x8>)
 8006b4a:	f7ff b888 	b.w	8005c5e <__retarget_lock_release_recursive>
 8006b4e:	bf00      	nop
 8006b50:	200003e4 	.word	0x200003e4

08006b54 <_Balloc>:
 8006b54:	b570      	push	{r4, r5, r6, lr}
 8006b56:	69c6      	ldr	r6, [r0, #28]
 8006b58:	4604      	mov	r4, r0
 8006b5a:	460d      	mov	r5, r1
 8006b5c:	b976      	cbnz	r6, 8006b7c <_Balloc+0x28>
 8006b5e:	2010      	movs	r0, #16
 8006b60:	f7ff ff44 	bl	80069ec <malloc>
 8006b64:	4602      	mov	r2, r0
 8006b66:	61e0      	str	r0, [r4, #28]
 8006b68:	b920      	cbnz	r0, 8006b74 <_Balloc+0x20>
 8006b6a:	4b18      	ldr	r3, [pc, #96]	; (8006bcc <_Balloc+0x78>)
 8006b6c:	4818      	ldr	r0, [pc, #96]	; (8006bd0 <_Balloc+0x7c>)
 8006b6e:	216b      	movs	r1, #107	; 0x6b
 8006b70:	f000 fe00 	bl	8007774 <__assert_func>
 8006b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b78:	6006      	str	r6, [r0, #0]
 8006b7a:	60c6      	str	r6, [r0, #12]
 8006b7c:	69e6      	ldr	r6, [r4, #28]
 8006b7e:	68f3      	ldr	r3, [r6, #12]
 8006b80:	b183      	cbz	r3, 8006ba4 <_Balloc+0x50>
 8006b82:	69e3      	ldr	r3, [r4, #28]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b8a:	b9b8      	cbnz	r0, 8006bbc <_Balloc+0x68>
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	fa01 f605 	lsl.w	r6, r1, r5
 8006b92:	1d72      	adds	r2, r6, #5
 8006b94:	0092      	lsls	r2, r2, #2
 8006b96:	4620      	mov	r0, r4
 8006b98:	f000 fe0a 	bl	80077b0 <_calloc_r>
 8006b9c:	b160      	cbz	r0, 8006bb8 <_Balloc+0x64>
 8006b9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ba2:	e00e      	b.n	8006bc2 <_Balloc+0x6e>
 8006ba4:	2221      	movs	r2, #33	; 0x21
 8006ba6:	2104      	movs	r1, #4
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f000 fe01 	bl	80077b0 <_calloc_r>
 8006bae:	69e3      	ldr	r3, [r4, #28]
 8006bb0:	60f0      	str	r0, [r6, #12]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e4      	bne.n	8006b82 <_Balloc+0x2e>
 8006bb8:	2000      	movs	r0, #0
 8006bba:	bd70      	pop	{r4, r5, r6, pc}
 8006bbc:	6802      	ldr	r2, [r0, #0]
 8006bbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006bc8:	e7f7      	b.n	8006bba <_Balloc+0x66>
 8006bca:	bf00      	nop
 8006bcc:	080079a5 	.word	0x080079a5
 8006bd0:	08007a25 	.word	0x08007a25

08006bd4 <_Bfree>:
 8006bd4:	b570      	push	{r4, r5, r6, lr}
 8006bd6:	69c6      	ldr	r6, [r0, #28]
 8006bd8:	4605      	mov	r5, r0
 8006bda:	460c      	mov	r4, r1
 8006bdc:	b976      	cbnz	r6, 8006bfc <_Bfree+0x28>
 8006bde:	2010      	movs	r0, #16
 8006be0:	f7ff ff04 	bl	80069ec <malloc>
 8006be4:	4602      	mov	r2, r0
 8006be6:	61e8      	str	r0, [r5, #28]
 8006be8:	b920      	cbnz	r0, 8006bf4 <_Bfree+0x20>
 8006bea:	4b09      	ldr	r3, [pc, #36]	; (8006c10 <_Bfree+0x3c>)
 8006bec:	4809      	ldr	r0, [pc, #36]	; (8006c14 <_Bfree+0x40>)
 8006bee:	218f      	movs	r1, #143	; 0x8f
 8006bf0:	f000 fdc0 	bl	8007774 <__assert_func>
 8006bf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bf8:	6006      	str	r6, [r0, #0]
 8006bfa:	60c6      	str	r6, [r0, #12]
 8006bfc:	b13c      	cbz	r4, 8006c0e <_Bfree+0x3a>
 8006bfe:	69eb      	ldr	r3, [r5, #28]
 8006c00:	6862      	ldr	r2, [r4, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c08:	6021      	str	r1, [r4, #0]
 8006c0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c0e:	bd70      	pop	{r4, r5, r6, pc}
 8006c10:	080079a5 	.word	0x080079a5
 8006c14:	08007a25 	.word	0x08007a25

08006c18 <__multadd>:
 8006c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c1c:	690d      	ldr	r5, [r1, #16]
 8006c1e:	4607      	mov	r7, r0
 8006c20:	460c      	mov	r4, r1
 8006c22:	461e      	mov	r6, r3
 8006c24:	f101 0c14 	add.w	ip, r1, #20
 8006c28:	2000      	movs	r0, #0
 8006c2a:	f8dc 3000 	ldr.w	r3, [ip]
 8006c2e:	b299      	uxth	r1, r3
 8006c30:	fb02 6101 	mla	r1, r2, r1, r6
 8006c34:	0c1e      	lsrs	r6, r3, #16
 8006c36:	0c0b      	lsrs	r3, r1, #16
 8006c38:	fb02 3306 	mla	r3, r2, r6, r3
 8006c3c:	b289      	uxth	r1, r1
 8006c3e:	3001      	adds	r0, #1
 8006c40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c44:	4285      	cmp	r5, r0
 8006c46:	f84c 1b04 	str.w	r1, [ip], #4
 8006c4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c4e:	dcec      	bgt.n	8006c2a <__multadd+0x12>
 8006c50:	b30e      	cbz	r6, 8006c96 <__multadd+0x7e>
 8006c52:	68a3      	ldr	r3, [r4, #8]
 8006c54:	42ab      	cmp	r3, r5
 8006c56:	dc19      	bgt.n	8006c8c <__multadd+0x74>
 8006c58:	6861      	ldr	r1, [r4, #4]
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	3101      	adds	r1, #1
 8006c5e:	f7ff ff79 	bl	8006b54 <_Balloc>
 8006c62:	4680      	mov	r8, r0
 8006c64:	b928      	cbnz	r0, 8006c72 <__multadd+0x5a>
 8006c66:	4602      	mov	r2, r0
 8006c68:	4b0c      	ldr	r3, [pc, #48]	; (8006c9c <__multadd+0x84>)
 8006c6a:	480d      	ldr	r0, [pc, #52]	; (8006ca0 <__multadd+0x88>)
 8006c6c:	21ba      	movs	r1, #186	; 0xba
 8006c6e:	f000 fd81 	bl	8007774 <__assert_func>
 8006c72:	6922      	ldr	r2, [r4, #16]
 8006c74:	3202      	adds	r2, #2
 8006c76:	f104 010c 	add.w	r1, r4, #12
 8006c7a:	0092      	lsls	r2, r2, #2
 8006c7c:	300c      	adds	r0, #12
 8006c7e:	f000 fd6b 	bl	8007758 <memcpy>
 8006c82:	4621      	mov	r1, r4
 8006c84:	4638      	mov	r0, r7
 8006c86:	f7ff ffa5 	bl	8006bd4 <_Bfree>
 8006c8a:	4644      	mov	r4, r8
 8006c8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c90:	3501      	adds	r5, #1
 8006c92:	615e      	str	r6, [r3, #20]
 8006c94:	6125      	str	r5, [r4, #16]
 8006c96:	4620      	mov	r0, r4
 8006c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c9c:	08007a14 	.word	0x08007a14
 8006ca0:	08007a25 	.word	0x08007a25

08006ca4 <__hi0bits>:
 8006ca4:	0c03      	lsrs	r3, r0, #16
 8006ca6:	041b      	lsls	r3, r3, #16
 8006ca8:	b9d3      	cbnz	r3, 8006ce0 <__hi0bits+0x3c>
 8006caa:	0400      	lsls	r0, r0, #16
 8006cac:	2310      	movs	r3, #16
 8006cae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006cb2:	bf04      	itt	eq
 8006cb4:	0200      	lsleq	r0, r0, #8
 8006cb6:	3308      	addeq	r3, #8
 8006cb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006cbc:	bf04      	itt	eq
 8006cbe:	0100      	lsleq	r0, r0, #4
 8006cc0:	3304      	addeq	r3, #4
 8006cc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006cc6:	bf04      	itt	eq
 8006cc8:	0080      	lsleq	r0, r0, #2
 8006cca:	3302      	addeq	r3, #2
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	db05      	blt.n	8006cdc <__hi0bits+0x38>
 8006cd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006cd4:	f103 0301 	add.w	r3, r3, #1
 8006cd8:	bf08      	it	eq
 8006cda:	2320      	moveq	r3, #32
 8006cdc:	4618      	mov	r0, r3
 8006cde:	4770      	bx	lr
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	e7e4      	b.n	8006cae <__hi0bits+0xa>

08006ce4 <__lo0bits>:
 8006ce4:	6803      	ldr	r3, [r0, #0]
 8006ce6:	f013 0207 	ands.w	r2, r3, #7
 8006cea:	d00c      	beq.n	8006d06 <__lo0bits+0x22>
 8006cec:	07d9      	lsls	r1, r3, #31
 8006cee:	d422      	bmi.n	8006d36 <__lo0bits+0x52>
 8006cf0:	079a      	lsls	r2, r3, #30
 8006cf2:	bf49      	itett	mi
 8006cf4:	085b      	lsrmi	r3, r3, #1
 8006cf6:	089b      	lsrpl	r3, r3, #2
 8006cf8:	6003      	strmi	r3, [r0, #0]
 8006cfa:	2201      	movmi	r2, #1
 8006cfc:	bf5c      	itt	pl
 8006cfe:	6003      	strpl	r3, [r0, #0]
 8006d00:	2202      	movpl	r2, #2
 8006d02:	4610      	mov	r0, r2
 8006d04:	4770      	bx	lr
 8006d06:	b299      	uxth	r1, r3
 8006d08:	b909      	cbnz	r1, 8006d0e <__lo0bits+0x2a>
 8006d0a:	0c1b      	lsrs	r3, r3, #16
 8006d0c:	2210      	movs	r2, #16
 8006d0e:	b2d9      	uxtb	r1, r3
 8006d10:	b909      	cbnz	r1, 8006d16 <__lo0bits+0x32>
 8006d12:	3208      	adds	r2, #8
 8006d14:	0a1b      	lsrs	r3, r3, #8
 8006d16:	0719      	lsls	r1, r3, #28
 8006d18:	bf04      	itt	eq
 8006d1a:	091b      	lsreq	r3, r3, #4
 8006d1c:	3204      	addeq	r2, #4
 8006d1e:	0799      	lsls	r1, r3, #30
 8006d20:	bf04      	itt	eq
 8006d22:	089b      	lsreq	r3, r3, #2
 8006d24:	3202      	addeq	r2, #2
 8006d26:	07d9      	lsls	r1, r3, #31
 8006d28:	d403      	bmi.n	8006d32 <__lo0bits+0x4e>
 8006d2a:	085b      	lsrs	r3, r3, #1
 8006d2c:	f102 0201 	add.w	r2, r2, #1
 8006d30:	d003      	beq.n	8006d3a <__lo0bits+0x56>
 8006d32:	6003      	str	r3, [r0, #0]
 8006d34:	e7e5      	b.n	8006d02 <__lo0bits+0x1e>
 8006d36:	2200      	movs	r2, #0
 8006d38:	e7e3      	b.n	8006d02 <__lo0bits+0x1e>
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	e7e1      	b.n	8006d02 <__lo0bits+0x1e>
	...

08006d40 <__i2b>:
 8006d40:	b510      	push	{r4, lr}
 8006d42:	460c      	mov	r4, r1
 8006d44:	2101      	movs	r1, #1
 8006d46:	f7ff ff05 	bl	8006b54 <_Balloc>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	b928      	cbnz	r0, 8006d5a <__i2b+0x1a>
 8006d4e:	4b05      	ldr	r3, [pc, #20]	; (8006d64 <__i2b+0x24>)
 8006d50:	4805      	ldr	r0, [pc, #20]	; (8006d68 <__i2b+0x28>)
 8006d52:	f240 1145 	movw	r1, #325	; 0x145
 8006d56:	f000 fd0d 	bl	8007774 <__assert_func>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	6144      	str	r4, [r0, #20]
 8006d5e:	6103      	str	r3, [r0, #16]
 8006d60:	bd10      	pop	{r4, pc}
 8006d62:	bf00      	nop
 8006d64:	08007a14 	.word	0x08007a14
 8006d68:	08007a25 	.word	0x08007a25

08006d6c <__multiply>:
 8006d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d70:	4691      	mov	r9, r2
 8006d72:	690a      	ldr	r2, [r1, #16]
 8006d74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	bfb8      	it	lt
 8006d7c:	460b      	movlt	r3, r1
 8006d7e:	460c      	mov	r4, r1
 8006d80:	bfbc      	itt	lt
 8006d82:	464c      	movlt	r4, r9
 8006d84:	4699      	movlt	r9, r3
 8006d86:	6927      	ldr	r7, [r4, #16]
 8006d88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006d8c:	68a3      	ldr	r3, [r4, #8]
 8006d8e:	6861      	ldr	r1, [r4, #4]
 8006d90:	eb07 060a 	add.w	r6, r7, sl
 8006d94:	42b3      	cmp	r3, r6
 8006d96:	b085      	sub	sp, #20
 8006d98:	bfb8      	it	lt
 8006d9a:	3101      	addlt	r1, #1
 8006d9c:	f7ff feda 	bl	8006b54 <_Balloc>
 8006da0:	b930      	cbnz	r0, 8006db0 <__multiply+0x44>
 8006da2:	4602      	mov	r2, r0
 8006da4:	4b44      	ldr	r3, [pc, #272]	; (8006eb8 <__multiply+0x14c>)
 8006da6:	4845      	ldr	r0, [pc, #276]	; (8006ebc <__multiply+0x150>)
 8006da8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006dac:	f000 fce2 	bl	8007774 <__assert_func>
 8006db0:	f100 0514 	add.w	r5, r0, #20
 8006db4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006db8:	462b      	mov	r3, r5
 8006dba:	2200      	movs	r2, #0
 8006dbc:	4543      	cmp	r3, r8
 8006dbe:	d321      	bcc.n	8006e04 <__multiply+0x98>
 8006dc0:	f104 0314 	add.w	r3, r4, #20
 8006dc4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006dc8:	f109 0314 	add.w	r3, r9, #20
 8006dcc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006dd0:	9202      	str	r2, [sp, #8]
 8006dd2:	1b3a      	subs	r2, r7, r4
 8006dd4:	3a15      	subs	r2, #21
 8006dd6:	f022 0203 	bic.w	r2, r2, #3
 8006dda:	3204      	adds	r2, #4
 8006ddc:	f104 0115 	add.w	r1, r4, #21
 8006de0:	428f      	cmp	r7, r1
 8006de2:	bf38      	it	cc
 8006de4:	2204      	movcc	r2, #4
 8006de6:	9201      	str	r2, [sp, #4]
 8006de8:	9a02      	ldr	r2, [sp, #8]
 8006dea:	9303      	str	r3, [sp, #12]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d80c      	bhi.n	8006e0a <__multiply+0x9e>
 8006df0:	2e00      	cmp	r6, #0
 8006df2:	dd03      	ble.n	8006dfc <__multiply+0x90>
 8006df4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d05b      	beq.n	8006eb4 <__multiply+0x148>
 8006dfc:	6106      	str	r6, [r0, #16]
 8006dfe:	b005      	add	sp, #20
 8006e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e04:	f843 2b04 	str.w	r2, [r3], #4
 8006e08:	e7d8      	b.n	8006dbc <__multiply+0x50>
 8006e0a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e0e:	f1ba 0f00 	cmp.w	sl, #0
 8006e12:	d024      	beq.n	8006e5e <__multiply+0xf2>
 8006e14:	f104 0e14 	add.w	lr, r4, #20
 8006e18:	46a9      	mov	r9, r5
 8006e1a:	f04f 0c00 	mov.w	ip, #0
 8006e1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006e22:	f8d9 1000 	ldr.w	r1, [r9]
 8006e26:	fa1f fb82 	uxth.w	fp, r2
 8006e2a:	b289      	uxth	r1, r1
 8006e2c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006e30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006e34:	f8d9 2000 	ldr.w	r2, [r9]
 8006e38:	4461      	add	r1, ip
 8006e3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e3e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006e42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006e46:	b289      	uxth	r1, r1
 8006e48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006e4c:	4577      	cmp	r7, lr
 8006e4e:	f849 1b04 	str.w	r1, [r9], #4
 8006e52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e56:	d8e2      	bhi.n	8006e1e <__multiply+0xb2>
 8006e58:	9a01      	ldr	r2, [sp, #4]
 8006e5a:	f845 c002 	str.w	ip, [r5, r2]
 8006e5e:	9a03      	ldr	r2, [sp, #12]
 8006e60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006e64:	3304      	adds	r3, #4
 8006e66:	f1b9 0f00 	cmp.w	r9, #0
 8006e6a:	d021      	beq.n	8006eb0 <__multiply+0x144>
 8006e6c:	6829      	ldr	r1, [r5, #0]
 8006e6e:	f104 0c14 	add.w	ip, r4, #20
 8006e72:	46ae      	mov	lr, r5
 8006e74:	f04f 0a00 	mov.w	sl, #0
 8006e78:	f8bc b000 	ldrh.w	fp, [ip]
 8006e7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006e80:	fb09 220b 	mla	r2, r9, fp, r2
 8006e84:	4452      	add	r2, sl
 8006e86:	b289      	uxth	r1, r1
 8006e88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006e8c:	f84e 1b04 	str.w	r1, [lr], #4
 8006e90:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006e94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006e98:	f8be 1000 	ldrh.w	r1, [lr]
 8006e9c:	fb09 110a 	mla	r1, r9, sl, r1
 8006ea0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006ea4:	4567      	cmp	r7, ip
 8006ea6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006eaa:	d8e5      	bhi.n	8006e78 <__multiply+0x10c>
 8006eac:	9a01      	ldr	r2, [sp, #4]
 8006eae:	50a9      	str	r1, [r5, r2]
 8006eb0:	3504      	adds	r5, #4
 8006eb2:	e799      	b.n	8006de8 <__multiply+0x7c>
 8006eb4:	3e01      	subs	r6, #1
 8006eb6:	e79b      	b.n	8006df0 <__multiply+0x84>
 8006eb8:	08007a14 	.word	0x08007a14
 8006ebc:	08007a25 	.word	0x08007a25

08006ec0 <__pow5mult>:
 8006ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ec4:	4615      	mov	r5, r2
 8006ec6:	f012 0203 	ands.w	r2, r2, #3
 8006eca:	4606      	mov	r6, r0
 8006ecc:	460f      	mov	r7, r1
 8006ece:	d007      	beq.n	8006ee0 <__pow5mult+0x20>
 8006ed0:	4c25      	ldr	r4, [pc, #148]	; (8006f68 <__pow5mult+0xa8>)
 8006ed2:	3a01      	subs	r2, #1
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006eda:	f7ff fe9d 	bl	8006c18 <__multadd>
 8006ede:	4607      	mov	r7, r0
 8006ee0:	10ad      	asrs	r5, r5, #2
 8006ee2:	d03d      	beq.n	8006f60 <__pow5mult+0xa0>
 8006ee4:	69f4      	ldr	r4, [r6, #28]
 8006ee6:	b97c      	cbnz	r4, 8006f08 <__pow5mult+0x48>
 8006ee8:	2010      	movs	r0, #16
 8006eea:	f7ff fd7f 	bl	80069ec <malloc>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	61f0      	str	r0, [r6, #28]
 8006ef2:	b928      	cbnz	r0, 8006f00 <__pow5mult+0x40>
 8006ef4:	4b1d      	ldr	r3, [pc, #116]	; (8006f6c <__pow5mult+0xac>)
 8006ef6:	481e      	ldr	r0, [pc, #120]	; (8006f70 <__pow5mult+0xb0>)
 8006ef8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006efc:	f000 fc3a 	bl	8007774 <__assert_func>
 8006f00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f04:	6004      	str	r4, [r0, #0]
 8006f06:	60c4      	str	r4, [r0, #12]
 8006f08:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006f0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f10:	b94c      	cbnz	r4, 8006f26 <__pow5mult+0x66>
 8006f12:	f240 2171 	movw	r1, #625	; 0x271
 8006f16:	4630      	mov	r0, r6
 8006f18:	f7ff ff12 	bl	8006d40 <__i2b>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f22:	4604      	mov	r4, r0
 8006f24:	6003      	str	r3, [r0, #0]
 8006f26:	f04f 0900 	mov.w	r9, #0
 8006f2a:	07eb      	lsls	r3, r5, #31
 8006f2c:	d50a      	bpl.n	8006f44 <__pow5mult+0x84>
 8006f2e:	4639      	mov	r1, r7
 8006f30:	4622      	mov	r2, r4
 8006f32:	4630      	mov	r0, r6
 8006f34:	f7ff ff1a 	bl	8006d6c <__multiply>
 8006f38:	4639      	mov	r1, r7
 8006f3a:	4680      	mov	r8, r0
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	f7ff fe49 	bl	8006bd4 <_Bfree>
 8006f42:	4647      	mov	r7, r8
 8006f44:	106d      	asrs	r5, r5, #1
 8006f46:	d00b      	beq.n	8006f60 <__pow5mult+0xa0>
 8006f48:	6820      	ldr	r0, [r4, #0]
 8006f4a:	b938      	cbnz	r0, 8006f5c <__pow5mult+0x9c>
 8006f4c:	4622      	mov	r2, r4
 8006f4e:	4621      	mov	r1, r4
 8006f50:	4630      	mov	r0, r6
 8006f52:	f7ff ff0b 	bl	8006d6c <__multiply>
 8006f56:	6020      	str	r0, [r4, #0]
 8006f58:	f8c0 9000 	str.w	r9, [r0]
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	e7e4      	b.n	8006f2a <__pow5mult+0x6a>
 8006f60:	4638      	mov	r0, r7
 8006f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f66:	bf00      	nop
 8006f68:	08007b70 	.word	0x08007b70
 8006f6c:	080079a5 	.word	0x080079a5
 8006f70:	08007a25 	.word	0x08007a25

08006f74 <__lshift>:
 8006f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f78:	460c      	mov	r4, r1
 8006f7a:	6849      	ldr	r1, [r1, #4]
 8006f7c:	6923      	ldr	r3, [r4, #16]
 8006f7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f82:	68a3      	ldr	r3, [r4, #8]
 8006f84:	4607      	mov	r7, r0
 8006f86:	4691      	mov	r9, r2
 8006f88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f8c:	f108 0601 	add.w	r6, r8, #1
 8006f90:	42b3      	cmp	r3, r6
 8006f92:	db0b      	blt.n	8006fac <__lshift+0x38>
 8006f94:	4638      	mov	r0, r7
 8006f96:	f7ff fddd 	bl	8006b54 <_Balloc>
 8006f9a:	4605      	mov	r5, r0
 8006f9c:	b948      	cbnz	r0, 8006fb2 <__lshift+0x3e>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	4b28      	ldr	r3, [pc, #160]	; (8007044 <__lshift+0xd0>)
 8006fa2:	4829      	ldr	r0, [pc, #164]	; (8007048 <__lshift+0xd4>)
 8006fa4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006fa8:	f000 fbe4 	bl	8007774 <__assert_func>
 8006fac:	3101      	adds	r1, #1
 8006fae:	005b      	lsls	r3, r3, #1
 8006fb0:	e7ee      	b.n	8006f90 <__lshift+0x1c>
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	f100 0114 	add.w	r1, r0, #20
 8006fb8:	f100 0210 	add.w	r2, r0, #16
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	4553      	cmp	r3, sl
 8006fc0:	db33      	blt.n	800702a <__lshift+0xb6>
 8006fc2:	6920      	ldr	r0, [r4, #16]
 8006fc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fc8:	f104 0314 	add.w	r3, r4, #20
 8006fcc:	f019 091f 	ands.w	r9, r9, #31
 8006fd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006fd8:	d02b      	beq.n	8007032 <__lshift+0xbe>
 8006fda:	f1c9 0e20 	rsb	lr, r9, #32
 8006fde:	468a      	mov	sl, r1
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	6818      	ldr	r0, [r3, #0]
 8006fe4:	fa00 f009 	lsl.w	r0, r0, r9
 8006fe8:	4310      	orrs	r0, r2
 8006fea:	f84a 0b04 	str.w	r0, [sl], #4
 8006fee:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ff2:	459c      	cmp	ip, r3
 8006ff4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ff8:	d8f3      	bhi.n	8006fe2 <__lshift+0x6e>
 8006ffa:	ebac 0304 	sub.w	r3, ip, r4
 8006ffe:	3b15      	subs	r3, #21
 8007000:	f023 0303 	bic.w	r3, r3, #3
 8007004:	3304      	adds	r3, #4
 8007006:	f104 0015 	add.w	r0, r4, #21
 800700a:	4584      	cmp	ip, r0
 800700c:	bf38      	it	cc
 800700e:	2304      	movcc	r3, #4
 8007010:	50ca      	str	r2, [r1, r3]
 8007012:	b10a      	cbz	r2, 8007018 <__lshift+0xa4>
 8007014:	f108 0602 	add.w	r6, r8, #2
 8007018:	3e01      	subs	r6, #1
 800701a:	4638      	mov	r0, r7
 800701c:	612e      	str	r6, [r5, #16]
 800701e:	4621      	mov	r1, r4
 8007020:	f7ff fdd8 	bl	8006bd4 <_Bfree>
 8007024:	4628      	mov	r0, r5
 8007026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800702a:	f842 0f04 	str.w	r0, [r2, #4]!
 800702e:	3301      	adds	r3, #1
 8007030:	e7c5      	b.n	8006fbe <__lshift+0x4a>
 8007032:	3904      	subs	r1, #4
 8007034:	f853 2b04 	ldr.w	r2, [r3], #4
 8007038:	f841 2f04 	str.w	r2, [r1, #4]!
 800703c:	459c      	cmp	ip, r3
 800703e:	d8f9      	bhi.n	8007034 <__lshift+0xc0>
 8007040:	e7ea      	b.n	8007018 <__lshift+0xa4>
 8007042:	bf00      	nop
 8007044:	08007a14 	.word	0x08007a14
 8007048:	08007a25 	.word	0x08007a25

0800704c <__mcmp>:
 800704c:	b530      	push	{r4, r5, lr}
 800704e:	6902      	ldr	r2, [r0, #16]
 8007050:	690c      	ldr	r4, [r1, #16]
 8007052:	1b12      	subs	r2, r2, r4
 8007054:	d10e      	bne.n	8007074 <__mcmp+0x28>
 8007056:	f100 0314 	add.w	r3, r0, #20
 800705a:	3114      	adds	r1, #20
 800705c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007060:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007064:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007068:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800706c:	42a5      	cmp	r5, r4
 800706e:	d003      	beq.n	8007078 <__mcmp+0x2c>
 8007070:	d305      	bcc.n	800707e <__mcmp+0x32>
 8007072:	2201      	movs	r2, #1
 8007074:	4610      	mov	r0, r2
 8007076:	bd30      	pop	{r4, r5, pc}
 8007078:	4283      	cmp	r3, r0
 800707a:	d3f3      	bcc.n	8007064 <__mcmp+0x18>
 800707c:	e7fa      	b.n	8007074 <__mcmp+0x28>
 800707e:	f04f 32ff 	mov.w	r2, #4294967295
 8007082:	e7f7      	b.n	8007074 <__mcmp+0x28>

08007084 <__mdiff>:
 8007084:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007088:	460c      	mov	r4, r1
 800708a:	4606      	mov	r6, r0
 800708c:	4611      	mov	r1, r2
 800708e:	4620      	mov	r0, r4
 8007090:	4690      	mov	r8, r2
 8007092:	f7ff ffdb 	bl	800704c <__mcmp>
 8007096:	1e05      	subs	r5, r0, #0
 8007098:	d110      	bne.n	80070bc <__mdiff+0x38>
 800709a:	4629      	mov	r1, r5
 800709c:	4630      	mov	r0, r6
 800709e:	f7ff fd59 	bl	8006b54 <_Balloc>
 80070a2:	b930      	cbnz	r0, 80070b2 <__mdiff+0x2e>
 80070a4:	4b3a      	ldr	r3, [pc, #232]	; (8007190 <__mdiff+0x10c>)
 80070a6:	4602      	mov	r2, r0
 80070a8:	f240 2137 	movw	r1, #567	; 0x237
 80070ac:	4839      	ldr	r0, [pc, #228]	; (8007194 <__mdiff+0x110>)
 80070ae:	f000 fb61 	bl	8007774 <__assert_func>
 80070b2:	2301      	movs	r3, #1
 80070b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80070b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070bc:	bfa4      	itt	ge
 80070be:	4643      	movge	r3, r8
 80070c0:	46a0      	movge	r8, r4
 80070c2:	4630      	mov	r0, r6
 80070c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80070c8:	bfa6      	itte	ge
 80070ca:	461c      	movge	r4, r3
 80070cc:	2500      	movge	r5, #0
 80070ce:	2501      	movlt	r5, #1
 80070d0:	f7ff fd40 	bl	8006b54 <_Balloc>
 80070d4:	b920      	cbnz	r0, 80070e0 <__mdiff+0x5c>
 80070d6:	4b2e      	ldr	r3, [pc, #184]	; (8007190 <__mdiff+0x10c>)
 80070d8:	4602      	mov	r2, r0
 80070da:	f240 2145 	movw	r1, #581	; 0x245
 80070de:	e7e5      	b.n	80070ac <__mdiff+0x28>
 80070e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80070e4:	6926      	ldr	r6, [r4, #16]
 80070e6:	60c5      	str	r5, [r0, #12]
 80070e8:	f104 0914 	add.w	r9, r4, #20
 80070ec:	f108 0514 	add.w	r5, r8, #20
 80070f0:	f100 0e14 	add.w	lr, r0, #20
 80070f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80070f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80070fc:	f108 0210 	add.w	r2, r8, #16
 8007100:	46f2      	mov	sl, lr
 8007102:	2100      	movs	r1, #0
 8007104:	f859 3b04 	ldr.w	r3, [r9], #4
 8007108:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800710c:	fa11 f88b 	uxtah	r8, r1, fp
 8007110:	b299      	uxth	r1, r3
 8007112:	0c1b      	lsrs	r3, r3, #16
 8007114:	eba8 0801 	sub.w	r8, r8, r1
 8007118:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800711c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007120:	fa1f f888 	uxth.w	r8, r8
 8007124:	1419      	asrs	r1, r3, #16
 8007126:	454e      	cmp	r6, r9
 8007128:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800712c:	f84a 3b04 	str.w	r3, [sl], #4
 8007130:	d8e8      	bhi.n	8007104 <__mdiff+0x80>
 8007132:	1b33      	subs	r3, r6, r4
 8007134:	3b15      	subs	r3, #21
 8007136:	f023 0303 	bic.w	r3, r3, #3
 800713a:	3304      	adds	r3, #4
 800713c:	3415      	adds	r4, #21
 800713e:	42a6      	cmp	r6, r4
 8007140:	bf38      	it	cc
 8007142:	2304      	movcc	r3, #4
 8007144:	441d      	add	r5, r3
 8007146:	4473      	add	r3, lr
 8007148:	469e      	mov	lr, r3
 800714a:	462e      	mov	r6, r5
 800714c:	4566      	cmp	r6, ip
 800714e:	d30e      	bcc.n	800716e <__mdiff+0xea>
 8007150:	f10c 0203 	add.w	r2, ip, #3
 8007154:	1b52      	subs	r2, r2, r5
 8007156:	f022 0203 	bic.w	r2, r2, #3
 800715a:	3d03      	subs	r5, #3
 800715c:	45ac      	cmp	ip, r5
 800715e:	bf38      	it	cc
 8007160:	2200      	movcc	r2, #0
 8007162:	4413      	add	r3, r2
 8007164:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007168:	b17a      	cbz	r2, 800718a <__mdiff+0x106>
 800716a:	6107      	str	r7, [r0, #16]
 800716c:	e7a4      	b.n	80070b8 <__mdiff+0x34>
 800716e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007172:	fa11 f288 	uxtah	r2, r1, r8
 8007176:	1414      	asrs	r4, r2, #16
 8007178:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800717c:	b292      	uxth	r2, r2
 800717e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007182:	f84e 2b04 	str.w	r2, [lr], #4
 8007186:	1421      	asrs	r1, r4, #16
 8007188:	e7e0      	b.n	800714c <__mdiff+0xc8>
 800718a:	3f01      	subs	r7, #1
 800718c:	e7ea      	b.n	8007164 <__mdiff+0xe0>
 800718e:	bf00      	nop
 8007190:	08007a14 	.word	0x08007a14
 8007194:	08007a25 	.word	0x08007a25

08007198 <__d2b>:
 8007198:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800719c:	460f      	mov	r7, r1
 800719e:	2101      	movs	r1, #1
 80071a0:	ec59 8b10 	vmov	r8, r9, d0
 80071a4:	4616      	mov	r6, r2
 80071a6:	f7ff fcd5 	bl	8006b54 <_Balloc>
 80071aa:	4604      	mov	r4, r0
 80071ac:	b930      	cbnz	r0, 80071bc <__d2b+0x24>
 80071ae:	4602      	mov	r2, r0
 80071b0:	4b24      	ldr	r3, [pc, #144]	; (8007244 <__d2b+0xac>)
 80071b2:	4825      	ldr	r0, [pc, #148]	; (8007248 <__d2b+0xb0>)
 80071b4:	f240 310f 	movw	r1, #783	; 0x30f
 80071b8:	f000 fadc 	bl	8007774 <__assert_func>
 80071bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80071c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071c4:	bb2d      	cbnz	r5, 8007212 <__d2b+0x7a>
 80071c6:	9301      	str	r3, [sp, #4]
 80071c8:	f1b8 0300 	subs.w	r3, r8, #0
 80071cc:	d026      	beq.n	800721c <__d2b+0x84>
 80071ce:	4668      	mov	r0, sp
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	f7ff fd87 	bl	8006ce4 <__lo0bits>
 80071d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80071da:	b1e8      	cbz	r0, 8007218 <__d2b+0x80>
 80071dc:	f1c0 0320 	rsb	r3, r0, #32
 80071e0:	fa02 f303 	lsl.w	r3, r2, r3
 80071e4:	430b      	orrs	r3, r1
 80071e6:	40c2      	lsrs	r2, r0
 80071e8:	6163      	str	r3, [r4, #20]
 80071ea:	9201      	str	r2, [sp, #4]
 80071ec:	9b01      	ldr	r3, [sp, #4]
 80071ee:	61a3      	str	r3, [r4, #24]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	bf14      	ite	ne
 80071f4:	2202      	movne	r2, #2
 80071f6:	2201      	moveq	r2, #1
 80071f8:	6122      	str	r2, [r4, #16]
 80071fa:	b1bd      	cbz	r5, 800722c <__d2b+0x94>
 80071fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007200:	4405      	add	r5, r0
 8007202:	603d      	str	r5, [r7, #0]
 8007204:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007208:	6030      	str	r0, [r6, #0]
 800720a:	4620      	mov	r0, r4
 800720c:	b003      	add	sp, #12
 800720e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007216:	e7d6      	b.n	80071c6 <__d2b+0x2e>
 8007218:	6161      	str	r1, [r4, #20]
 800721a:	e7e7      	b.n	80071ec <__d2b+0x54>
 800721c:	a801      	add	r0, sp, #4
 800721e:	f7ff fd61 	bl	8006ce4 <__lo0bits>
 8007222:	9b01      	ldr	r3, [sp, #4]
 8007224:	6163      	str	r3, [r4, #20]
 8007226:	3020      	adds	r0, #32
 8007228:	2201      	movs	r2, #1
 800722a:	e7e5      	b.n	80071f8 <__d2b+0x60>
 800722c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007230:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007234:	6038      	str	r0, [r7, #0]
 8007236:	6918      	ldr	r0, [r3, #16]
 8007238:	f7ff fd34 	bl	8006ca4 <__hi0bits>
 800723c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007240:	e7e2      	b.n	8007208 <__d2b+0x70>
 8007242:	bf00      	nop
 8007244:	08007a14 	.word	0x08007a14
 8007248:	08007a25 	.word	0x08007a25

0800724c <__sfputc_r>:
 800724c:	6893      	ldr	r3, [r2, #8]
 800724e:	3b01      	subs	r3, #1
 8007250:	2b00      	cmp	r3, #0
 8007252:	b410      	push	{r4}
 8007254:	6093      	str	r3, [r2, #8]
 8007256:	da08      	bge.n	800726a <__sfputc_r+0x1e>
 8007258:	6994      	ldr	r4, [r2, #24]
 800725a:	42a3      	cmp	r3, r4
 800725c:	db01      	blt.n	8007262 <__sfputc_r+0x16>
 800725e:	290a      	cmp	r1, #10
 8007260:	d103      	bne.n	800726a <__sfputc_r+0x1e>
 8007262:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007266:	f7fe bbe8 	b.w	8005a3a <__swbuf_r>
 800726a:	6813      	ldr	r3, [r2, #0]
 800726c:	1c58      	adds	r0, r3, #1
 800726e:	6010      	str	r0, [r2, #0]
 8007270:	7019      	strb	r1, [r3, #0]
 8007272:	4608      	mov	r0, r1
 8007274:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007278:	4770      	bx	lr

0800727a <__sfputs_r>:
 800727a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727c:	4606      	mov	r6, r0
 800727e:	460f      	mov	r7, r1
 8007280:	4614      	mov	r4, r2
 8007282:	18d5      	adds	r5, r2, r3
 8007284:	42ac      	cmp	r4, r5
 8007286:	d101      	bne.n	800728c <__sfputs_r+0x12>
 8007288:	2000      	movs	r0, #0
 800728a:	e007      	b.n	800729c <__sfputs_r+0x22>
 800728c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007290:	463a      	mov	r2, r7
 8007292:	4630      	mov	r0, r6
 8007294:	f7ff ffda 	bl	800724c <__sfputc_r>
 8007298:	1c43      	adds	r3, r0, #1
 800729a:	d1f3      	bne.n	8007284 <__sfputs_r+0xa>
 800729c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072a0 <_vfiprintf_r>:
 80072a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a4:	460d      	mov	r5, r1
 80072a6:	b09d      	sub	sp, #116	; 0x74
 80072a8:	4614      	mov	r4, r2
 80072aa:	4698      	mov	r8, r3
 80072ac:	4606      	mov	r6, r0
 80072ae:	b118      	cbz	r0, 80072b8 <_vfiprintf_r+0x18>
 80072b0:	6a03      	ldr	r3, [r0, #32]
 80072b2:	b90b      	cbnz	r3, 80072b8 <_vfiprintf_r+0x18>
 80072b4:	f7fe fada 	bl	800586c <__sinit>
 80072b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072ba:	07d9      	lsls	r1, r3, #31
 80072bc:	d405      	bmi.n	80072ca <_vfiprintf_r+0x2a>
 80072be:	89ab      	ldrh	r3, [r5, #12]
 80072c0:	059a      	lsls	r2, r3, #22
 80072c2:	d402      	bmi.n	80072ca <_vfiprintf_r+0x2a>
 80072c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072c6:	f7fe fcc9 	bl	8005c5c <__retarget_lock_acquire_recursive>
 80072ca:	89ab      	ldrh	r3, [r5, #12]
 80072cc:	071b      	lsls	r3, r3, #28
 80072ce:	d501      	bpl.n	80072d4 <_vfiprintf_r+0x34>
 80072d0:	692b      	ldr	r3, [r5, #16]
 80072d2:	b99b      	cbnz	r3, 80072fc <_vfiprintf_r+0x5c>
 80072d4:	4629      	mov	r1, r5
 80072d6:	4630      	mov	r0, r6
 80072d8:	f7fe fbec 	bl	8005ab4 <__swsetup_r>
 80072dc:	b170      	cbz	r0, 80072fc <_vfiprintf_r+0x5c>
 80072de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072e0:	07dc      	lsls	r4, r3, #31
 80072e2:	d504      	bpl.n	80072ee <_vfiprintf_r+0x4e>
 80072e4:	f04f 30ff 	mov.w	r0, #4294967295
 80072e8:	b01d      	add	sp, #116	; 0x74
 80072ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ee:	89ab      	ldrh	r3, [r5, #12]
 80072f0:	0598      	lsls	r0, r3, #22
 80072f2:	d4f7      	bmi.n	80072e4 <_vfiprintf_r+0x44>
 80072f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072f6:	f7fe fcb2 	bl	8005c5e <__retarget_lock_release_recursive>
 80072fa:	e7f3      	b.n	80072e4 <_vfiprintf_r+0x44>
 80072fc:	2300      	movs	r3, #0
 80072fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007300:	2320      	movs	r3, #32
 8007302:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007306:	f8cd 800c 	str.w	r8, [sp, #12]
 800730a:	2330      	movs	r3, #48	; 0x30
 800730c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80074c0 <_vfiprintf_r+0x220>
 8007310:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007314:	f04f 0901 	mov.w	r9, #1
 8007318:	4623      	mov	r3, r4
 800731a:	469a      	mov	sl, r3
 800731c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007320:	b10a      	cbz	r2, 8007326 <_vfiprintf_r+0x86>
 8007322:	2a25      	cmp	r2, #37	; 0x25
 8007324:	d1f9      	bne.n	800731a <_vfiprintf_r+0x7a>
 8007326:	ebba 0b04 	subs.w	fp, sl, r4
 800732a:	d00b      	beq.n	8007344 <_vfiprintf_r+0xa4>
 800732c:	465b      	mov	r3, fp
 800732e:	4622      	mov	r2, r4
 8007330:	4629      	mov	r1, r5
 8007332:	4630      	mov	r0, r6
 8007334:	f7ff ffa1 	bl	800727a <__sfputs_r>
 8007338:	3001      	adds	r0, #1
 800733a:	f000 80a9 	beq.w	8007490 <_vfiprintf_r+0x1f0>
 800733e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007340:	445a      	add	r2, fp
 8007342:	9209      	str	r2, [sp, #36]	; 0x24
 8007344:	f89a 3000 	ldrb.w	r3, [sl]
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 80a1 	beq.w	8007490 <_vfiprintf_r+0x1f0>
 800734e:	2300      	movs	r3, #0
 8007350:	f04f 32ff 	mov.w	r2, #4294967295
 8007354:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007358:	f10a 0a01 	add.w	sl, sl, #1
 800735c:	9304      	str	r3, [sp, #16]
 800735e:	9307      	str	r3, [sp, #28]
 8007360:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007364:	931a      	str	r3, [sp, #104]	; 0x68
 8007366:	4654      	mov	r4, sl
 8007368:	2205      	movs	r2, #5
 800736a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800736e:	4854      	ldr	r0, [pc, #336]	; (80074c0 <_vfiprintf_r+0x220>)
 8007370:	f7f8 ff36 	bl	80001e0 <memchr>
 8007374:	9a04      	ldr	r2, [sp, #16]
 8007376:	b9d8      	cbnz	r0, 80073b0 <_vfiprintf_r+0x110>
 8007378:	06d1      	lsls	r1, r2, #27
 800737a:	bf44      	itt	mi
 800737c:	2320      	movmi	r3, #32
 800737e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007382:	0713      	lsls	r3, r2, #28
 8007384:	bf44      	itt	mi
 8007386:	232b      	movmi	r3, #43	; 0x2b
 8007388:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800738c:	f89a 3000 	ldrb.w	r3, [sl]
 8007390:	2b2a      	cmp	r3, #42	; 0x2a
 8007392:	d015      	beq.n	80073c0 <_vfiprintf_r+0x120>
 8007394:	9a07      	ldr	r2, [sp, #28]
 8007396:	4654      	mov	r4, sl
 8007398:	2000      	movs	r0, #0
 800739a:	f04f 0c0a 	mov.w	ip, #10
 800739e:	4621      	mov	r1, r4
 80073a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073a4:	3b30      	subs	r3, #48	; 0x30
 80073a6:	2b09      	cmp	r3, #9
 80073a8:	d94d      	bls.n	8007446 <_vfiprintf_r+0x1a6>
 80073aa:	b1b0      	cbz	r0, 80073da <_vfiprintf_r+0x13a>
 80073ac:	9207      	str	r2, [sp, #28]
 80073ae:	e014      	b.n	80073da <_vfiprintf_r+0x13a>
 80073b0:	eba0 0308 	sub.w	r3, r0, r8
 80073b4:	fa09 f303 	lsl.w	r3, r9, r3
 80073b8:	4313      	orrs	r3, r2
 80073ba:	9304      	str	r3, [sp, #16]
 80073bc:	46a2      	mov	sl, r4
 80073be:	e7d2      	b.n	8007366 <_vfiprintf_r+0xc6>
 80073c0:	9b03      	ldr	r3, [sp, #12]
 80073c2:	1d19      	adds	r1, r3, #4
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	9103      	str	r1, [sp, #12]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	bfbb      	ittet	lt
 80073cc:	425b      	neglt	r3, r3
 80073ce:	f042 0202 	orrlt.w	r2, r2, #2
 80073d2:	9307      	strge	r3, [sp, #28]
 80073d4:	9307      	strlt	r3, [sp, #28]
 80073d6:	bfb8      	it	lt
 80073d8:	9204      	strlt	r2, [sp, #16]
 80073da:	7823      	ldrb	r3, [r4, #0]
 80073dc:	2b2e      	cmp	r3, #46	; 0x2e
 80073de:	d10c      	bne.n	80073fa <_vfiprintf_r+0x15a>
 80073e0:	7863      	ldrb	r3, [r4, #1]
 80073e2:	2b2a      	cmp	r3, #42	; 0x2a
 80073e4:	d134      	bne.n	8007450 <_vfiprintf_r+0x1b0>
 80073e6:	9b03      	ldr	r3, [sp, #12]
 80073e8:	1d1a      	adds	r2, r3, #4
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	9203      	str	r2, [sp, #12]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	bfb8      	it	lt
 80073f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80073f6:	3402      	adds	r4, #2
 80073f8:	9305      	str	r3, [sp, #20]
 80073fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80074d0 <_vfiprintf_r+0x230>
 80073fe:	7821      	ldrb	r1, [r4, #0]
 8007400:	2203      	movs	r2, #3
 8007402:	4650      	mov	r0, sl
 8007404:	f7f8 feec 	bl	80001e0 <memchr>
 8007408:	b138      	cbz	r0, 800741a <_vfiprintf_r+0x17a>
 800740a:	9b04      	ldr	r3, [sp, #16]
 800740c:	eba0 000a 	sub.w	r0, r0, sl
 8007410:	2240      	movs	r2, #64	; 0x40
 8007412:	4082      	lsls	r2, r0
 8007414:	4313      	orrs	r3, r2
 8007416:	3401      	adds	r4, #1
 8007418:	9304      	str	r3, [sp, #16]
 800741a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800741e:	4829      	ldr	r0, [pc, #164]	; (80074c4 <_vfiprintf_r+0x224>)
 8007420:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007424:	2206      	movs	r2, #6
 8007426:	f7f8 fedb 	bl	80001e0 <memchr>
 800742a:	2800      	cmp	r0, #0
 800742c:	d03f      	beq.n	80074ae <_vfiprintf_r+0x20e>
 800742e:	4b26      	ldr	r3, [pc, #152]	; (80074c8 <_vfiprintf_r+0x228>)
 8007430:	bb1b      	cbnz	r3, 800747a <_vfiprintf_r+0x1da>
 8007432:	9b03      	ldr	r3, [sp, #12]
 8007434:	3307      	adds	r3, #7
 8007436:	f023 0307 	bic.w	r3, r3, #7
 800743a:	3308      	adds	r3, #8
 800743c:	9303      	str	r3, [sp, #12]
 800743e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007440:	443b      	add	r3, r7
 8007442:	9309      	str	r3, [sp, #36]	; 0x24
 8007444:	e768      	b.n	8007318 <_vfiprintf_r+0x78>
 8007446:	fb0c 3202 	mla	r2, ip, r2, r3
 800744a:	460c      	mov	r4, r1
 800744c:	2001      	movs	r0, #1
 800744e:	e7a6      	b.n	800739e <_vfiprintf_r+0xfe>
 8007450:	2300      	movs	r3, #0
 8007452:	3401      	adds	r4, #1
 8007454:	9305      	str	r3, [sp, #20]
 8007456:	4619      	mov	r1, r3
 8007458:	f04f 0c0a 	mov.w	ip, #10
 800745c:	4620      	mov	r0, r4
 800745e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007462:	3a30      	subs	r2, #48	; 0x30
 8007464:	2a09      	cmp	r2, #9
 8007466:	d903      	bls.n	8007470 <_vfiprintf_r+0x1d0>
 8007468:	2b00      	cmp	r3, #0
 800746a:	d0c6      	beq.n	80073fa <_vfiprintf_r+0x15a>
 800746c:	9105      	str	r1, [sp, #20]
 800746e:	e7c4      	b.n	80073fa <_vfiprintf_r+0x15a>
 8007470:	fb0c 2101 	mla	r1, ip, r1, r2
 8007474:	4604      	mov	r4, r0
 8007476:	2301      	movs	r3, #1
 8007478:	e7f0      	b.n	800745c <_vfiprintf_r+0x1bc>
 800747a:	ab03      	add	r3, sp, #12
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	462a      	mov	r2, r5
 8007480:	4b12      	ldr	r3, [pc, #72]	; (80074cc <_vfiprintf_r+0x22c>)
 8007482:	a904      	add	r1, sp, #16
 8007484:	4630      	mov	r0, r6
 8007486:	f7fd fdb1 	bl	8004fec <_printf_float>
 800748a:	4607      	mov	r7, r0
 800748c:	1c78      	adds	r0, r7, #1
 800748e:	d1d6      	bne.n	800743e <_vfiprintf_r+0x19e>
 8007490:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007492:	07d9      	lsls	r1, r3, #31
 8007494:	d405      	bmi.n	80074a2 <_vfiprintf_r+0x202>
 8007496:	89ab      	ldrh	r3, [r5, #12]
 8007498:	059a      	lsls	r2, r3, #22
 800749a:	d402      	bmi.n	80074a2 <_vfiprintf_r+0x202>
 800749c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800749e:	f7fe fbde 	bl	8005c5e <__retarget_lock_release_recursive>
 80074a2:	89ab      	ldrh	r3, [r5, #12]
 80074a4:	065b      	lsls	r3, r3, #25
 80074a6:	f53f af1d 	bmi.w	80072e4 <_vfiprintf_r+0x44>
 80074aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074ac:	e71c      	b.n	80072e8 <_vfiprintf_r+0x48>
 80074ae:	ab03      	add	r3, sp, #12
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	462a      	mov	r2, r5
 80074b4:	4b05      	ldr	r3, [pc, #20]	; (80074cc <_vfiprintf_r+0x22c>)
 80074b6:	a904      	add	r1, sp, #16
 80074b8:	4630      	mov	r0, r6
 80074ba:	f7fe f83b 	bl	8005534 <_printf_i>
 80074be:	e7e4      	b.n	800748a <_vfiprintf_r+0x1ea>
 80074c0:	08007b7c 	.word	0x08007b7c
 80074c4:	08007b86 	.word	0x08007b86
 80074c8:	08004fed 	.word	0x08004fed
 80074cc:	0800727b 	.word	0x0800727b
 80074d0:	08007b82 	.word	0x08007b82

080074d4 <__sflush_r>:
 80074d4:	898a      	ldrh	r2, [r1, #12]
 80074d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074da:	4605      	mov	r5, r0
 80074dc:	0710      	lsls	r0, r2, #28
 80074de:	460c      	mov	r4, r1
 80074e0:	d458      	bmi.n	8007594 <__sflush_r+0xc0>
 80074e2:	684b      	ldr	r3, [r1, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	dc05      	bgt.n	80074f4 <__sflush_r+0x20>
 80074e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	dc02      	bgt.n	80074f4 <__sflush_r+0x20>
 80074ee:	2000      	movs	r0, #0
 80074f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074f6:	2e00      	cmp	r6, #0
 80074f8:	d0f9      	beq.n	80074ee <__sflush_r+0x1a>
 80074fa:	2300      	movs	r3, #0
 80074fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007500:	682f      	ldr	r7, [r5, #0]
 8007502:	6a21      	ldr	r1, [r4, #32]
 8007504:	602b      	str	r3, [r5, #0]
 8007506:	d032      	beq.n	800756e <__sflush_r+0x9a>
 8007508:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800750a:	89a3      	ldrh	r3, [r4, #12]
 800750c:	075a      	lsls	r2, r3, #29
 800750e:	d505      	bpl.n	800751c <__sflush_r+0x48>
 8007510:	6863      	ldr	r3, [r4, #4]
 8007512:	1ac0      	subs	r0, r0, r3
 8007514:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007516:	b10b      	cbz	r3, 800751c <__sflush_r+0x48>
 8007518:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800751a:	1ac0      	subs	r0, r0, r3
 800751c:	2300      	movs	r3, #0
 800751e:	4602      	mov	r2, r0
 8007520:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007522:	6a21      	ldr	r1, [r4, #32]
 8007524:	4628      	mov	r0, r5
 8007526:	47b0      	blx	r6
 8007528:	1c43      	adds	r3, r0, #1
 800752a:	89a3      	ldrh	r3, [r4, #12]
 800752c:	d106      	bne.n	800753c <__sflush_r+0x68>
 800752e:	6829      	ldr	r1, [r5, #0]
 8007530:	291d      	cmp	r1, #29
 8007532:	d82b      	bhi.n	800758c <__sflush_r+0xb8>
 8007534:	4a29      	ldr	r2, [pc, #164]	; (80075dc <__sflush_r+0x108>)
 8007536:	410a      	asrs	r2, r1
 8007538:	07d6      	lsls	r6, r2, #31
 800753a:	d427      	bmi.n	800758c <__sflush_r+0xb8>
 800753c:	2200      	movs	r2, #0
 800753e:	6062      	str	r2, [r4, #4]
 8007540:	04d9      	lsls	r1, r3, #19
 8007542:	6922      	ldr	r2, [r4, #16]
 8007544:	6022      	str	r2, [r4, #0]
 8007546:	d504      	bpl.n	8007552 <__sflush_r+0x7e>
 8007548:	1c42      	adds	r2, r0, #1
 800754a:	d101      	bne.n	8007550 <__sflush_r+0x7c>
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	b903      	cbnz	r3, 8007552 <__sflush_r+0x7e>
 8007550:	6560      	str	r0, [r4, #84]	; 0x54
 8007552:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007554:	602f      	str	r7, [r5, #0]
 8007556:	2900      	cmp	r1, #0
 8007558:	d0c9      	beq.n	80074ee <__sflush_r+0x1a>
 800755a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800755e:	4299      	cmp	r1, r3
 8007560:	d002      	beq.n	8007568 <__sflush_r+0x94>
 8007562:	4628      	mov	r0, r5
 8007564:	f7ff f9f6 	bl	8006954 <_free_r>
 8007568:	2000      	movs	r0, #0
 800756a:	6360      	str	r0, [r4, #52]	; 0x34
 800756c:	e7c0      	b.n	80074f0 <__sflush_r+0x1c>
 800756e:	2301      	movs	r3, #1
 8007570:	4628      	mov	r0, r5
 8007572:	47b0      	blx	r6
 8007574:	1c41      	adds	r1, r0, #1
 8007576:	d1c8      	bne.n	800750a <__sflush_r+0x36>
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d0c5      	beq.n	800750a <__sflush_r+0x36>
 800757e:	2b1d      	cmp	r3, #29
 8007580:	d001      	beq.n	8007586 <__sflush_r+0xb2>
 8007582:	2b16      	cmp	r3, #22
 8007584:	d101      	bne.n	800758a <__sflush_r+0xb6>
 8007586:	602f      	str	r7, [r5, #0]
 8007588:	e7b1      	b.n	80074ee <__sflush_r+0x1a>
 800758a:	89a3      	ldrh	r3, [r4, #12]
 800758c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007590:	81a3      	strh	r3, [r4, #12]
 8007592:	e7ad      	b.n	80074f0 <__sflush_r+0x1c>
 8007594:	690f      	ldr	r7, [r1, #16]
 8007596:	2f00      	cmp	r7, #0
 8007598:	d0a9      	beq.n	80074ee <__sflush_r+0x1a>
 800759a:	0793      	lsls	r3, r2, #30
 800759c:	680e      	ldr	r6, [r1, #0]
 800759e:	bf08      	it	eq
 80075a0:	694b      	ldreq	r3, [r1, #20]
 80075a2:	600f      	str	r7, [r1, #0]
 80075a4:	bf18      	it	ne
 80075a6:	2300      	movne	r3, #0
 80075a8:	eba6 0807 	sub.w	r8, r6, r7
 80075ac:	608b      	str	r3, [r1, #8]
 80075ae:	f1b8 0f00 	cmp.w	r8, #0
 80075b2:	dd9c      	ble.n	80074ee <__sflush_r+0x1a>
 80075b4:	6a21      	ldr	r1, [r4, #32]
 80075b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80075b8:	4643      	mov	r3, r8
 80075ba:	463a      	mov	r2, r7
 80075bc:	4628      	mov	r0, r5
 80075be:	47b0      	blx	r6
 80075c0:	2800      	cmp	r0, #0
 80075c2:	dc06      	bgt.n	80075d2 <__sflush_r+0xfe>
 80075c4:	89a3      	ldrh	r3, [r4, #12]
 80075c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075ca:	81a3      	strh	r3, [r4, #12]
 80075cc:	f04f 30ff 	mov.w	r0, #4294967295
 80075d0:	e78e      	b.n	80074f0 <__sflush_r+0x1c>
 80075d2:	4407      	add	r7, r0
 80075d4:	eba8 0800 	sub.w	r8, r8, r0
 80075d8:	e7e9      	b.n	80075ae <__sflush_r+0xda>
 80075da:	bf00      	nop
 80075dc:	dfbffffe 	.word	0xdfbffffe

080075e0 <_fflush_r>:
 80075e0:	b538      	push	{r3, r4, r5, lr}
 80075e2:	690b      	ldr	r3, [r1, #16]
 80075e4:	4605      	mov	r5, r0
 80075e6:	460c      	mov	r4, r1
 80075e8:	b913      	cbnz	r3, 80075f0 <_fflush_r+0x10>
 80075ea:	2500      	movs	r5, #0
 80075ec:	4628      	mov	r0, r5
 80075ee:	bd38      	pop	{r3, r4, r5, pc}
 80075f0:	b118      	cbz	r0, 80075fa <_fflush_r+0x1a>
 80075f2:	6a03      	ldr	r3, [r0, #32]
 80075f4:	b90b      	cbnz	r3, 80075fa <_fflush_r+0x1a>
 80075f6:	f7fe f939 	bl	800586c <__sinit>
 80075fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d0f3      	beq.n	80075ea <_fflush_r+0xa>
 8007602:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007604:	07d0      	lsls	r0, r2, #31
 8007606:	d404      	bmi.n	8007612 <_fflush_r+0x32>
 8007608:	0599      	lsls	r1, r3, #22
 800760a:	d402      	bmi.n	8007612 <_fflush_r+0x32>
 800760c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800760e:	f7fe fb25 	bl	8005c5c <__retarget_lock_acquire_recursive>
 8007612:	4628      	mov	r0, r5
 8007614:	4621      	mov	r1, r4
 8007616:	f7ff ff5d 	bl	80074d4 <__sflush_r>
 800761a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800761c:	07da      	lsls	r2, r3, #31
 800761e:	4605      	mov	r5, r0
 8007620:	d4e4      	bmi.n	80075ec <_fflush_r+0xc>
 8007622:	89a3      	ldrh	r3, [r4, #12]
 8007624:	059b      	lsls	r3, r3, #22
 8007626:	d4e1      	bmi.n	80075ec <_fflush_r+0xc>
 8007628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800762a:	f7fe fb18 	bl	8005c5e <__retarget_lock_release_recursive>
 800762e:	e7dd      	b.n	80075ec <_fflush_r+0xc>

08007630 <__swhatbuf_r>:
 8007630:	b570      	push	{r4, r5, r6, lr}
 8007632:	460c      	mov	r4, r1
 8007634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007638:	2900      	cmp	r1, #0
 800763a:	b096      	sub	sp, #88	; 0x58
 800763c:	4615      	mov	r5, r2
 800763e:	461e      	mov	r6, r3
 8007640:	da0d      	bge.n	800765e <__swhatbuf_r+0x2e>
 8007642:	89a3      	ldrh	r3, [r4, #12]
 8007644:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007648:	f04f 0100 	mov.w	r1, #0
 800764c:	bf0c      	ite	eq
 800764e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007652:	2340      	movne	r3, #64	; 0x40
 8007654:	2000      	movs	r0, #0
 8007656:	6031      	str	r1, [r6, #0]
 8007658:	602b      	str	r3, [r5, #0]
 800765a:	b016      	add	sp, #88	; 0x58
 800765c:	bd70      	pop	{r4, r5, r6, pc}
 800765e:	466a      	mov	r2, sp
 8007660:	f000 f848 	bl	80076f4 <_fstat_r>
 8007664:	2800      	cmp	r0, #0
 8007666:	dbec      	blt.n	8007642 <__swhatbuf_r+0x12>
 8007668:	9901      	ldr	r1, [sp, #4]
 800766a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800766e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007672:	4259      	negs	r1, r3
 8007674:	4159      	adcs	r1, r3
 8007676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800767a:	e7eb      	b.n	8007654 <__swhatbuf_r+0x24>

0800767c <__smakebuf_r>:
 800767c:	898b      	ldrh	r3, [r1, #12]
 800767e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007680:	079d      	lsls	r5, r3, #30
 8007682:	4606      	mov	r6, r0
 8007684:	460c      	mov	r4, r1
 8007686:	d507      	bpl.n	8007698 <__smakebuf_r+0x1c>
 8007688:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800768c:	6023      	str	r3, [r4, #0]
 800768e:	6123      	str	r3, [r4, #16]
 8007690:	2301      	movs	r3, #1
 8007692:	6163      	str	r3, [r4, #20]
 8007694:	b002      	add	sp, #8
 8007696:	bd70      	pop	{r4, r5, r6, pc}
 8007698:	ab01      	add	r3, sp, #4
 800769a:	466a      	mov	r2, sp
 800769c:	f7ff ffc8 	bl	8007630 <__swhatbuf_r>
 80076a0:	9900      	ldr	r1, [sp, #0]
 80076a2:	4605      	mov	r5, r0
 80076a4:	4630      	mov	r0, r6
 80076a6:	f7ff f9c9 	bl	8006a3c <_malloc_r>
 80076aa:	b948      	cbnz	r0, 80076c0 <__smakebuf_r+0x44>
 80076ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076b0:	059a      	lsls	r2, r3, #22
 80076b2:	d4ef      	bmi.n	8007694 <__smakebuf_r+0x18>
 80076b4:	f023 0303 	bic.w	r3, r3, #3
 80076b8:	f043 0302 	orr.w	r3, r3, #2
 80076bc:	81a3      	strh	r3, [r4, #12]
 80076be:	e7e3      	b.n	8007688 <__smakebuf_r+0xc>
 80076c0:	89a3      	ldrh	r3, [r4, #12]
 80076c2:	6020      	str	r0, [r4, #0]
 80076c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c8:	81a3      	strh	r3, [r4, #12]
 80076ca:	9b00      	ldr	r3, [sp, #0]
 80076cc:	6163      	str	r3, [r4, #20]
 80076ce:	9b01      	ldr	r3, [sp, #4]
 80076d0:	6120      	str	r0, [r4, #16]
 80076d2:	b15b      	cbz	r3, 80076ec <__smakebuf_r+0x70>
 80076d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076d8:	4630      	mov	r0, r6
 80076da:	f000 f81d 	bl	8007718 <_isatty_r>
 80076de:	b128      	cbz	r0, 80076ec <__smakebuf_r+0x70>
 80076e0:	89a3      	ldrh	r3, [r4, #12]
 80076e2:	f023 0303 	bic.w	r3, r3, #3
 80076e6:	f043 0301 	orr.w	r3, r3, #1
 80076ea:	81a3      	strh	r3, [r4, #12]
 80076ec:	89a3      	ldrh	r3, [r4, #12]
 80076ee:	431d      	orrs	r5, r3
 80076f0:	81a5      	strh	r5, [r4, #12]
 80076f2:	e7cf      	b.n	8007694 <__smakebuf_r+0x18>

080076f4 <_fstat_r>:
 80076f4:	b538      	push	{r3, r4, r5, lr}
 80076f6:	4d07      	ldr	r5, [pc, #28]	; (8007714 <_fstat_r+0x20>)
 80076f8:	2300      	movs	r3, #0
 80076fa:	4604      	mov	r4, r0
 80076fc:	4608      	mov	r0, r1
 80076fe:	4611      	mov	r1, r2
 8007700:	602b      	str	r3, [r5, #0]
 8007702:	f7fa fcb0 	bl	8002066 <_fstat>
 8007706:	1c43      	adds	r3, r0, #1
 8007708:	d102      	bne.n	8007710 <_fstat_r+0x1c>
 800770a:	682b      	ldr	r3, [r5, #0]
 800770c:	b103      	cbz	r3, 8007710 <_fstat_r+0x1c>
 800770e:	6023      	str	r3, [r4, #0]
 8007710:	bd38      	pop	{r3, r4, r5, pc}
 8007712:	bf00      	nop
 8007714:	200003e0 	.word	0x200003e0

08007718 <_isatty_r>:
 8007718:	b538      	push	{r3, r4, r5, lr}
 800771a:	4d06      	ldr	r5, [pc, #24]	; (8007734 <_isatty_r+0x1c>)
 800771c:	2300      	movs	r3, #0
 800771e:	4604      	mov	r4, r0
 8007720:	4608      	mov	r0, r1
 8007722:	602b      	str	r3, [r5, #0]
 8007724:	f7fa fcaf 	bl	8002086 <_isatty>
 8007728:	1c43      	adds	r3, r0, #1
 800772a:	d102      	bne.n	8007732 <_isatty_r+0x1a>
 800772c:	682b      	ldr	r3, [r5, #0]
 800772e:	b103      	cbz	r3, 8007732 <_isatty_r+0x1a>
 8007730:	6023      	str	r3, [r4, #0]
 8007732:	bd38      	pop	{r3, r4, r5, pc}
 8007734:	200003e0 	.word	0x200003e0

08007738 <_sbrk_r>:
 8007738:	b538      	push	{r3, r4, r5, lr}
 800773a:	4d06      	ldr	r5, [pc, #24]	; (8007754 <_sbrk_r+0x1c>)
 800773c:	2300      	movs	r3, #0
 800773e:	4604      	mov	r4, r0
 8007740:	4608      	mov	r0, r1
 8007742:	602b      	str	r3, [r5, #0]
 8007744:	f7fa fcb8 	bl	80020b8 <_sbrk>
 8007748:	1c43      	adds	r3, r0, #1
 800774a:	d102      	bne.n	8007752 <_sbrk_r+0x1a>
 800774c:	682b      	ldr	r3, [r5, #0]
 800774e:	b103      	cbz	r3, 8007752 <_sbrk_r+0x1a>
 8007750:	6023      	str	r3, [r4, #0]
 8007752:	bd38      	pop	{r3, r4, r5, pc}
 8007754:	200003e0 	.word	0x200003e0

08007758 <memcpy>:
 8007758:	440a      	add	r2, r1
 800775a:	4291      	cmp	r1, r2
 800775c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007760:	d100      	bne.n	8007764 <memcpy+0xc>
 8007762:	4770      	bx	lr
 8007764:	b510      	push	{r4, lr}
 8007766:	f811 4b01 	ldrb.w	r4, [r1], #1
 800776a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800776e:	4291      	cmp	r1, r2
 8007770:	d1f9      	bne.n	8007766 <memcpy+0xe>
 8007772:	bd10      	pop	{r4, pc}

08007774 <__assert_func>:
 8007774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007776:	4614      	mov	r4, r2
 8007778:	461a      	mov	r2, r3
 800777a:	4b09      	ldr	r3, [pc, #36]	; (80077a0 <__assert_func+0x2c>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4605      	mov	r5, r0
 8007780:	68d8      	ldr	r0, [r3, #12]
 8007782:	b14c      	cbz	r4, 8007798 <__assert_func+0x24>
 8007784:	4b07      	ldr	r3, [pc, #28]	; (80077a4 <__assert_func+0x30>)
 8007786:	9100      	str	r1, [sp, #0]
 8007788:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800778c:	4906      	ldr	r1, [pc, #24]	; (80077a8 <__assert_func+0x34>)
 800778e:	462b      	mov	r3, r5
 8007790:	f000 f844 	bl	800781c <fiprintf>
 8007794:	f000 f854 	bl	8007840 <abort>
 8007798:	4b04      	ldr	r3, [pc, #16]	; (80077ac <__assert_func+0x38>)
 800779a:	461c      	mov	r4, r3
 800779c:	e7f3      	b.n	8007786 <__assert_func+0x12>
 800779e:	bf00      	nop
 80077a0:	20000064 	.word	0x20000064
 80077a4:	08007b97 	.word	0x08007b97
 80077a8:	08007ba4 	.word	0x08007ba4
 80077ac:	08007bd2 	.word	0x08007bd2

080077b0 <_calloc_r>:
 80077b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077b2:	fba1 2402 	umull	r2, r4, r1, r2
 80077b6:	b94c      	cbnz	r4, 80077cc <_calloc_r+0x1c>
 80077b8:	4611      	mov	r1, r2
 80077ba:	9201      	str	r2, [sp, #4]
 80077bc:	f7ff f93e 	bl	8006a3c <_malloc_r>
 80077c0:	9a01      	ldr	r2, [sp, #4]
 80077c2:	4605      	mov	r5, r0
 80077c4:	b930      	cbnz	r0, 80077d4 <_calloc_r+0x24>
 80077c6:	4628      	mov	r0, r5
 80077c8:	b003      	add	sp, #12
 80077ca:	bd30      	pop	{r4, r5, pc}
 80077cc:	220c      	movs	r2, #12
 80077ce:	6002      	str	r2, [r0, #0]
 80077d0:	2500      	movs	r5, #0
 80077d2:	e7f8      	b.n	80077c6 <_calloc_r+0x16>
 80077d4:	4621      	mov	r1, r4
 80077d6:	f7fe f9c5 	bl	8005b64 <memset>
 80077da:	e7f4      	b.n	80077c6 <_calloc_r+0x16>

080077dc <__ascii_mbtowc>:
 80077dc:	b082      	sub	sp, #8
 80077de:	b901      	cbnz	r1, 80077e2 <__ascii_mbtowc+0x6>
 80077e0:	a901      	add	r1, sp, #4
 80077e2:	b142      	cbz	r2, 80077f6 <__ascii_mbtowc+0x1a>
 80077e4:	b14b      	cbz	r3, 80077fa <__ascii_mbtowc+0x1e>
 80077e6:	7813      	ldrb	r3, [r2, #0]
 80077e8:	600b      	str	r3, [r1, #0]
 80077ea:	7812      	ldrb	r2, [r2, #0]
 80077ec:	1e10      	subs	r0, r2, #0
 80077ee:	bf18      	it	ne
 80077f0:	2001      	movne	r0, #1
 80077f2:	b002      	add	sp, #8
 80077f4:	4770      	bx	lr
 80077f6:	4610      	mov	r0, r2
 80077f8:	e7fb      	b.n	80077f2 <__ascii_mbtowc+0x16>
 80077fa:	f06f 0001 	mvn.w	r0, #1
 80077fe:	e7f8      	b.n	80077f2 <__ascii_mbtowc+0x16>

08007800 <__ascii_wctomb>:
 8007800:	b149      	cbz	r1, 8007816 <__ascii_wctomb+0x16>
 8007802:	2aff      	cmp	r2, #255	; 0xff
 8007804:	bf85      	ittet	hi
 8007806:	238a      	movhi	r3, #138	; 0x8a
 8007808:	6003      	strhi	r3, [r0, #0]
 800780a:	700a      	strbls	r2, [r1, #0]
 800780c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007810:	bf98      	it	ls
 8007812:	2001      	movls	r0, #1
 8007814:	4770      	bx	lr
 8007816:	4608      	mov	r0, r1
 8007818:	4770      	bx	lr
	...

0800781c <fiprintf>:
 800781c:	b40e      	push	{r1, r2, r3}
 800781e:	b503      	push	{r0, r1, lr}
 8007820:	4601      	mov	r1, r0
 8007822:	ab03      	add	r3, sp, #12
 8007824:	4805      	ldr	r0, [pc, #20]	; (800783c <fiprintf+0x20>)
 8007826:	f853 2b04 	ldr.w	r2, [r3], #4
 800782a:	6800      	ldr	r0, [r0, #0]
 800782c:	9301      	str	r3, [sp, #4]
 800782e:	f7ff fd37 	bl	80072a0 <_vfiprintf_r>
 8007832:	b002      	add	sp, #8
 8007834:	f85d eb04 	ldr.w	lr, [sp], #4
 8007838:	b003      	add	sp, #12
 800783a:	4770      	bx	lr
 800783c:	20000064 	.word	0x20000064

08007840 <abort>:
 8007840:	b508      	push	{r3, lr}
 8007842:	2006      	movs	r0, #6
 8007844:	f000 f82c 	bl	80078a0 <raise>
 8007848:	2001      	movs	r0, #1
 800784a:	f7fa fbd9 	bl	8002000 <_exit>

0800784e <_raise_r>:
 800784e:	291f      	cmp	r1, #31
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	4604      	mov	r4, r0
 8007854:	460d      	mov	r5, r1
 8007856:	d904      	bls.n	8007862 <_raise_r+0x14>
 8007858:	2316      	movs	r3, #22
 800785a:	6003      	str	r3, [r0, #0]
 800785c:	f04f 30ff 	mov.w	r0, #4294967295
 8007860:	bd38      	pop	{r3, r4, r5, pc}
 8007862:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007864:	b112      	cbz	r2, 800786c <_raise_r+0x1e>
 8007866:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800786a:	b94b      	cbnz	r3, 8007880 <_raise_r+0x32>
 800786c:	4620      	mov	r0, r4
 800786e:	f000 f831 	bl	80078d4 <_getpid_r>
 8007872:	462a      	mov	r2, r5
 8007874:	4601      	mov	r1, r0
 8007876:	4620      	mov	r0, r4
 8007878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800787c:	f000 b818 	b.w	80078b0 <_kill_r>
 8007880:	2b01      	cmp	r3, #1
 8007882:	d00a      	beq.n	800789a <_raise_r+0x4c>
 8007884:	1c59      	adds	r1, r3, #1
 8007886:	d103      	bne.n	8007890 <_raise_r+0x42>
 8007888:	2316      	movs	r3, #22
 800788a:	6003      	str	r3, [r0, #0]
 800788c:	2001      	movs	r0, #1
 800788e:	e7e7      	b.n	8007860 <_raise_r+0x12>
 8007890:	2400      	movs	r4, #0
 8007892:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007896:	4628      	mov	r0, r5
 8007898:	4798      	blx	r3
 800789a:	2000      	movs	r0, #0
 800789c:	e7e0      	b.n	8007860 <_raise_r+0x12>
	...

080078a0 <raise>:
 80078a0:	4b02      	ldr	r3, [pc, #8]	; (80078ac <raise+0xc>)
 80078a2:	4601      	mov	r1, r0
 80078a4:	6818      	ldr	r0, [r3, #0]
 80078a6:	f7ff bfd2 	b.w	800784e <_raise_r>
 80078aa:	bf00      	nop
 80078ac:	20000064 	.word	0x20000064

080078b0 <_kill_r>:
 80078b0:	b538      	push	{r3, r4, r5, lr}
 80078b2:	4d07      	ldr	r5, [pc, #28]	; (80078d0 <_kill_r+0x20>)
 80078b4:	2300      	movs	r3, #0
 80078b6:	4604      	mov	r4, r0
 80078b8:	4608      	mov	r0, r1
 80078ba:	4611      	mov	r1, r2
 80078bc:	602b      	str	r3, [r5, #0]
 80078be:	f7fa fb8f 	bl	8001fe0 <_kill>
 80078c2:	1c43      	adds	r3, r0, #1
 80078c4:	d102      	bne.n	80078cc <_kill_r+0x1c>
 80078c6:	682b      	ldr	r3, [r5, #0]
 80078c8:	b103      	cbz	r3, 80078cc <_kill_r+0x1c>
 80078ca:	6023      	str	r3, [r4, #0]
 80078cc:	bd38      	pop	{r3, r4, r5, pc}
 80078ce:	bf00      	nop
 80078d0:	200003e0 	.word	0x200003e0

080078d4 <_getpid_r>:
 80078d4:	f7fa bb7c 	b.w	8001fd0 <_getpid>

080078d8 <_init>:
 80078d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078da:	bf00      	nop
 80078dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078de:	bc08      	pop	{r3}
 80078e0:	469e      	mov	lr, r3
 80078e2:	4770      	bx	lr

080078e4 <_fini>:
 80078e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e6:	bf00      	nop
 80078e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ea:	bc08      	pop	{r3}
 80078ec:	469e      	mov	lr, r3
 80078ee:	4770      	bx	lr
